
W25Q_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08002e98  08002e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c8  080030c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080030c8  080030c8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030c8  080030c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c8  080030c8  000130c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080030d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000070  08003140  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08003140  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000776f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000172c  00000000  00000000  00027808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  00028f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  00029798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178d1  00000000  00000000  00029f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009369  00000000  00000000  00041831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083fad  00000000  00000000  0004ab9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ceb47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000253c  00000000  00000000  000ceb98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e80 	.word	0x08002e80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002e80 	.word	0x08002e80

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fba6 	bl	80008a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80f 	bl	8000176 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8b2 	bl	80002c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015c:	f000 f850 	bl	8000200 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f884 	bl	800026c <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  W25_Init();
 8000164:	f000 fb6a 	bl	800083c <W25_Init>
	  W25_PrintUart_ReadData();
 8000168:	f000 fa92 	bl	8000690 <W25_PrintUart_ReadData>
	  HAL_Delay(2000);
 800016c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000170:	f000 fbf8 	bl	8000964 <HAL_Delay>
	  W25_Init();
 8000174:	e7f6      	b.n	8000164 <main+0x18>

08000176 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000176:	b580      	push	{r7, lr}
 8000178:	b090      	sub	sp, #64	; 0x40
 800017a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017c:	f107 0318 	add.w	r3, r7, #24
 8000180:	2228      	movs	r2, #40	; 0x28
 8000182:	2100      	movs	r1, #0
 8000184:	4618      	mov	r0, r3
 8000186:	f002 f9f9 	bl	800257c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018a:	1d3b      	adds	r3, r7, #4
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	605a      	str	r2, [r3, #4]
 8000192:	609a      	str	r2, [r3, #8]
 8000194:	60da      	str	r2, [r3, #12]
 8000196:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000198:	2301      	movs	r3, #1
 800019a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a2:	2300      	movs	r3, #0
 80001a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a6:	2301      	movs	r3, #1
 80001a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001aa:	2302      	movs	r3, #2
 80001ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 fe74 	bl	8000eac <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001ca:	f000 f8b7 	bl	800033c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d2:	2302      	movs	r3, #2
 80001d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2102      	movs	r1, #2
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 f8e1 	bl	80013b0 <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001f4:	f000 f8a2 	bl	800033c <Error_Handler>
  }
}
 80001f8:	bf00      	nop
 80001fa:	3740      	adds	r7, #64	; 0x40
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000204:	4b17      	ldr	r3, [pc, #92]	; (8000264 <MX_SPI1_Init+0x64>)
 8000206:	4a18      	ldr	r2, [pc, #96]	; (8000268 <MX_SPI1_Init+0x68>)
 8000208:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800020a:	4b16      	ldr	r3, [pc, #88]	; (8000264 <MX_SPI1_Init+0x64>)
 800020c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000210:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000212:	4b14      	ldr	r3, [pc, #80]	; (8000264 <MX_SPI1_Init+0x64>)
 8000214:	2200      	movs	r2, #0
 8000216:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000218:	4b12      	ldr	r3, [pc, #72]	; (8000264 <MX_SPI1_Init+0x64>)
 800021a:	2200      	movs	r2, #0
 800021c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800021e:	4b11      	ldr	r3, [pc, #68]	; (8000264 <MX_SPI1_Init+0x64>)
 8000220:	2200      	movs	r2, #0
 8000222:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <MX_SPI1_Init+0x64>)
 8000226:	2200      	movs	r2, #0
 8000228:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <MX_SPI1_Init+0x64>)
 800022c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000230:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000232:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <MX_SPI1_Init+0x64>)
 8000234:	2208      	movs	r2, #8
 8000236:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <MX_SPI1_Init+0x64>)
 800023a:	2200      	movs	r2, #0
 800023c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <MX_SPI1_Init+0x64>)
 8000240:	2200      	movs	r2, #0
 8000242:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <MX_SPI1_Init+0x64>)
 8000246:	2200      	movs	r2, #0
 8000248:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800024a:	4b06      	ldr	r3, [pc, #24]	; (8000264 <MX_SPI1_Init+0x64>)
 800024c:	220a      	movs	r2, #10
 800024e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000250:	4804      	ldr	r0, [pc, #16]	; (8000264 <MX_SPI1_Init+0x64>)
 8000252:	f001 fa45 	bl	80016e0 <HAL_SPI_Init>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800025c:	f000 f86e 	bl	800033c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	2000008c 	.word	0x2000008c
 8000268:	40013000 	.word	0x40013000

0800026c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 8000272:	4a12      	ldr	r2, [pc, #72]	; (80002bc <MX_USART1_UART_Init+0x50>)
 8000274:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000276:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 8000278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800027c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 8000292:	220c      	movs	r2, #12
 8000294:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 8000298:	2200      	movs	r2, #0
 800029a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002a2:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_USART1_UART_Init+0x4c>)
 80002a4:	f001 ff88 	bl	80021b8 <HAL_UART_Init>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002ae:	f000 f845 	bl	800033c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	200000e4 	.word	0x200000e4
 80002bc:	40013800 	.word	0x40013800

080002c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c6:	f107 0308 	add.w	r3, r7, #8
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d4:	4b17      	ldr	r3, [pc, #92]	; (8000334 <MX_GPIO_Init+0x74>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a16      	ldr	r2, [pc, #88]	; (8000334 <MX_GPIO_Init+0x74>)
 80002da:	f043 0320 	orr.w	r3, r3, #32
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b14      	ldr	r3, [pc, #80]	; (8000334 <MX_GPIO_Init+0x74>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0320 	and.w	r3, r3, #32
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <MX_GPIO_Init+0x74>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a10      	ldr	r2, [pc, #64]	; (8000334 <MX_GPIO_Init+0x74>)
 80002f2:	f043 0304 	orr.w	r3, r3, #4
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <MX_GPIO_Init+0x74>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0304 	and.w	r3, r3, #4
 8000300:	603b      	str	r3, [r7, #0]
 8000302:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000304:	2201      	movs	r2, #1
 8000306:	2110      	movs	r1, #16
 8000308:	480b      	ldr	r0, [pc, #44]	; (8000338 <MX_GPIO_Init+0x78>)
 800030a:	f000 fdb7 	bl	8000e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800030e:	2310      	movs	r3, #16
 8000310:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000312:	2301      	movs	r3, #1
 8000314:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000316:	2300      	movs	r3, #0
 8000318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800031a:	2303      	movs	r3, #3
 800031c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800031e:	f107 0308 	add.w	r3, r7, #8
 8000322:	4619      	mov	r1, r3
 8000324:	4804      	ldr	r0, [pc, #16]	; (8000338 <MX_GPIO_Init+0x78>)
 8000326:	f000 fc25 	bl	8000b74 <HAL_GPIO_Init>

}
 800032a:	bf00      	nop
 800032c:	3718      	adds	r7, #24
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40021000 	.word	0x40021000
 8000338:	40010800 	.word	0x40010800

0800033c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000340:	b672      	cpsid	i
}
 8000342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000344:	e7fe      	b.n	8000344 <Error_Handler+0x8>
	...

08000348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <HAL_MspInit+0x5c>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <HAL_MspInit+0x5c>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6193      	str	r3, [r2, #24]
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <HAL_MspInit+0x5c>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <HAL_MspInit+0x5c>)
 8000368:	69db      	ldr	r3, [r3, #28]
 800036a:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <HAL_MspInit+0x5c>)
 800036c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000370:	61d3      	str	r3, [r2, #28]
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <HAL_MspInit+0x5c>)
 8000374:	69db      	ldr	r3, [r3, #28]
 8000376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800037e:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <HAL_MspInit+0x60>)
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <HAL_MspInit+0x60>)
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800039a:	bf00      	nop
 800039c:	3714      	adds	r7, #20
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40010000 	.word	0x40010000

080003ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b088      	sub	sp, #32
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b4:	f107 0310 	add.w	r3, r7, #16
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a1b      	ldr	r2, [pc, #108]	; (8000434 <HAL_SPI_MspInit+0x88>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d12f      	bne.n	800042c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003cc:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <HAL_SPI_MspInit+0x8c>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a19      	ldr	r2, [pc, #100]	; (8000438 <HAL_SPI_MspInit+0x8c>)
 80003d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b17      	ldr	r3, [pc, #92]	; (8000438 <HAL_SPI_MspInit+0x8c>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e4:	4b14      	ldr	r3, [pc, #80]	; (8000438 <HAL_SPI_MspInit+0x8c>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a13      	ldr	r2, [pc, #76]	; (8000438 <HAL_SPI_MspInit+0x8c>)
 80003ea:	f043 0304 	orr.w	r3, r3, #4
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <HAL_SPI_MspInit+0x8c>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0304 	and.w	r3, r3, #4
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80003fc:	23a0      	movs	r3, #160	; 0xa0
 80003fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000400:	2302      	movs	r3, #2
 8000402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000404:	2303      	movs	r3, #3
 8000406:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	4619      	mov	r1, r3
 800040e:	480b      	ldr	r0, [pc, #44]	; (800043c <HAL_SPI_MspInit+0x90>)
 8000410:	f000 fbb0 	bl	8000b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000414:	2340      	movs	r3, #64	; 0x40
 8000416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000418:	2300      	movs	r3, #0
 800041a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000420:	f107 0310 	add.w	r3, r7, #16
 8000424:	4619      	mov	r1, r3
 8000426:	4805      	ldr	r0, [pc, #20]	; (800043c <HAL_SPI_MspInit+0x90>)
 8000428:	f000 fba4 	bl	8000b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800042c:	bf00      	nop
 800042e:	3720      	adds	r7, #32
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40013000 	.word	0x40013000
 8000438:	40021000 	.word	0x40021000
 800043c:	40010800 	.word	0x40010800

08000440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a1c      	ldr	r2, [pc, #112]	; (80004cc <HAL_UART_MspInit+0x8c>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d131      	bne.n	80004c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <HAL_UART_MspInit+0x90>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a1a      	ldr	r2, [pc, #104]	; (80004d0 <HAL_UART_MspInit+0x90>)
 8000466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <HAL_UART_MspInit+0x90>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000478:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <HAL_UART_MspInit+0x90>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a14      	ldr	r2, [pc, #80]	; (80004d0 <HAL_UART_MspInit+0x90>)
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <HAL_UART_MspInit+0x90>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0304 	and.w	r3, r3, #4
 800048c:	60bb      	str	r3, [r7, #8]
 800048e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000494:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000496:	2302      	movs	r3, #2
 8000498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800049a:	2303      	movs	r3, #3
 800049c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049e:	f107 0310 	add.w	r3, r7, #16
 80004a2:	4619      	mov	r1, r3
 80004a4:	480b      	ldr	r0, [pc, #44]	; (80004d4 <HAL_UART_MspInit+0x94>)
 80004a6:	f000 fb65 	bl	8000b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	4619      	mov	r1, r3
 80004be:	4805      	ldr	r0, [pc, #20]	; (80004d4 <HAL_UART_MspInit+0x94>)
 80004c0:	f000 fb58 	bl	8000b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004c4:	bf00      	nop
 80004c6:	3720      	adds	r7, #32
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40013800 	.word	0x40013800
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010800 	.word	0x40010800

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <NMI_Handler+0x4>

080004de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <HardFault_Handler+0x4>

080004e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <MemManage_Handler+0x4>

080004ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <BusFault_Handler+0x4>

080004f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <UsageFault_Handler+0x4>

080004f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr

08000502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr

0800050e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr

0800051a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051e:	f000 fa05 	bl	800092c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000530:	4a14      	ldr	r2, [pc, #80]	; (8000584 <_sbrk+0x5c>)
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <_sbrk+0x60>)
 8000534:	1ad3      	subs	r3, r2, r3
 8000536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <_sbrk+0x64>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d102      	bne.n	800054a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <_sbrk+0x64>)
 8000546:	4a12      	ldr	r2, [pc, #72]	; (8000590 <_sbrk+0x68>)
 8000548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <_sbrk+0x64>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4413      	add	r3, r2
 8000552:	693a      	ldr	r2, [r7, #16]
 8000554:	429a      	cmp	r2, r3
 8000556:	d207      	bcs.n	8000568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000558:	f001 ffe6 	bl	8002528 <__errno>
 800055c:	4603      	mov	r3, r0
 800055e:	220c      	movs	r2, #12
 8000560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000566:	e009      	b.n	800057c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <_sbrk+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <_sbrk+0x64>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	4a05      	ldr	r2, [pc, #20]	; (800058c <_sbrk+0x64>)
 8000578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800057a:	68fb      	ldr	r3, [r7, #12]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3718      	adds	r7, #24
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20005000 	.word	0x20005000
 8000588:	00000400 	.word	0x00000400
 800058c:	20000128 	.word	0x20000128
 8000590:	20000240 	.word	0x20000240

08000594 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <SPI1_Send>:
#include "w25q_spi.h"
w25_info_t  w25_info;
uint8_t buf[256];
void SPI1_Send(uint8_t *dt,uint16_t cnt)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, dt, cnt, 1000);
 80005ac:	887a      	ldrh	r2, [r7, #2]
 80005ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <SPI1_Send+0x24>)
 80005b6:	f001 f917 	bl	80017e8 <HAL_SPI_Transmit>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	2000008c 	.word	0x2000008c

080005c8 <SPI1_Recv>:
//---------------------------------------------------------
void SPI1_Recv(uint8_t *dt,uint16_t cnt)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, dt, cnt, 1000);
 80005d4:	887a      	ldrh	r2, [r7, #2]
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <SPI1_Recv+0x24>)
 80005de:	f001 fa3f 	bl	8001a60 <HAL_SPI_Receive>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	2000008c 	.word	0x2000008c

080005f0 <W25_Reset>:
//---------------------------------------------------------
void W25_Reset(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	cs_set();
 80005f4:	2200      	movs	r2, #0
 80005f6:	2110      	movs	r1, #16
 80005f8:	4809      	ldr	r0, [pc, #36]	; (8000620 <W25_Reset+0x30>)
 80005fa:	f000 fc3f 	bl	8000e7c <HAL_GPIO_WritePin>
	buf[0] = W25_ENABLE_RESET;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <W25_Reset+0x34>)
 8000600:	2266      	movs	r2, #102	; 0x66
 8000602:	701a      	strb	r2, [r3, #0]
	buf[1] = W25_RESET;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <W25_Reset+0x34>)
 8000606:	2299      	movs	r2, #153	; 0x99
 8000608:	705a      	strb	r2, [r3, #1]
	SPI1_Send(buf, 2);
 800060a:	2102      	movs	r1, #2
 800060c:	4805      	ldr	r0, [pc, #20]	; (8000624 <W25_Reset+0x34>)
 800060e:	f7ff ffc7 	bl	80005a0 <SPI1_Send>
	cs_reset();
 8000612:	2201      	movs	r2, #1
 8000614:	2110      	movs	r1, #16
 8000616:	4802      	ldr	r0, [pc, #8]	; (8000620 <W25_Reset+0x30>)
 8000618:	f000 fc30 	bl	8000e7c <HAL_GPIO_WritePin>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40010800 	.word	0x40010800
 8000624:	2000012c 	.word	0x2000012c

08000628 <W25_Read_Data>:
//---------------------------------------------------------
void W25_Read_Data(uint32_t addr,uint8_t* data,uint32_t sz)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
	cs_set();
 8000634:	2200      	movs	r2, #0
 8000636:	2110      	movs	r1, #16
 8000638:	4813      	ldr	r0, [pc, #76]	; (8000688 <W25_Read_Data+0x60>)
 800063a:	f000 fc1f 	bl	8000e7c <HAL_GPIO_WritePin>
	buf[0] = W25_READ;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <W25_Read_Data+0x64>)
 8000640:	2203      	movs	r2, #3
 8000642:	701a      	strb	r2, [r3, #0]
	buf[1] = (addr >> 16 ) & 0xFF;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	0c1b      	lsrs	r3, r3, #16
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <W25_Read_Data+0x64>)
 800064c:	705a      	strb	r2, [r3, #1]
	buf[2] = (addr >> 8 ) & 0xFF;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b0d      	ldr	r3, [pc, #52]	; (800068c <W25_Read_Data+0x64>)
 8000656:	709a      	strb	r2, [r3, #2]
	buf[3] =  addr & 0xFF;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	b2da      	uxtb	r2, r3
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <W25_Read_Data+0x64>)
 800065e:	70da      	strb	r2, [r3, #3]
	SPI1_Send(buf, 4);
 8000660:	2104      	movs	r1, #4
 8000662:	480a      	ldr	r0, [pc, #40]	; (800068c <W25_Read_Data+0x64>)
 8000664:	f7ff ff9c 	bl	80005a0 <SPI1_Send>
	SPI1_Recv(data, sz);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	b29b      	uxth	r3, r3
 800066c:	4619      	mov	r1, r3
 800066e:	68b8      	ldr	r0, [r7, #8]
 8000670:	f7ff ffaa 	bl	80005c8 <SPI1_Recv>
	cs_reset();
 8000674:	2201      	movs	r2, #1
 8000676:	2110      	movs	r1, #16
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <W25_Read_Data+0x60>)
 800067a:	f000 fbff 	bl	8000e7c <HAL_GPIO_WritePin>
}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40010800 	.word	0x40010800
 800068c:	2000012c 	.word	0x2000012c

08000690 <W25_PrintUart_ReadData>:
		sz = w25_info.PageSize - offset;
	page_addr = page_addr*w25_info.PageSize + offset;
}
//---------------------------------------------------------
void W25_PrintUart_ReadData(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af00      	add	r7, sp, #0
	char str1[30];
	unsigned int addr=0;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
	for(uint16_t k=0; k<4; k++)
 800069a:	2300      	movs	r3, #0
 800069c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800069e:	e0b2      	b.n	8000806 <W25_PrintUart_ReadData+0x176>
	{
		W25_Read_Data(k*256, buf, 256); // Mỗi lần đọc về sẽ đọc 256 bytes tương ứng với 256 địa chỉ
 80006a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006a8:	495b      	ldr	r1, [pc, #364]	; (8000818 <W25_PrintUart_ReadData+0x188>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffbc 	bl	8000628 <W25_Read_Data>
		for(uint8_t i=0; i<16; i++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80006b6:	e097      	b.n	80007e8 <W25_PrintUart_ReadData+0x158>
		{
			addr = k*256 + i*16;
 80006b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006ba:	011a      	lsls	r2, r3, #4
 80006bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80006c0:	4413      	add	r3, r2
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
			sprintf(str1,"%08X: ", addr);
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006ca:	4954      	ldr	r1, [pc, #336]	; (800081c <W25_PrintUart_ReadData+0x18c>)
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 ff5d 	bl	800258c <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)str1,10,0x1000);
 80006d2:	1d39      	adds	r1, r7, #4
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	220a      	movs	r2, #10
 80006da:	4851      	ldr	r0, [pc, #324]	; (8000820 <W25_PrintUart_ReadData+0x190>)
 80006dc:	f001 fdb9 	bl	8002252 <HAL_UART_Transmit>
			for(uint8_t j=0; j<16; j++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80006e6:	e02c      	b.n	8000742 <W25_PrintUart_ReadData+0xb2>
			{
				sprintf(str1,"%02X", buf[(uint16_t)i*16 + (uint16_t)j]);
 80006e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80006ec:	011a      	lsls	r2, r3, #4
 80006ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80006f2:	4413      	add	r3, r2
 80006f4:	4a48      	ldr	r2, [pc, #288]	; (8000818 <W25_PrintUart_ReadData+0x188>)
 80006f6:	5cd3      	ldrb	r3, [r2, r3]
 80006f8:	461a      	mov	r2, r3
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4949      	ldr	r1, [pc, #292]	; (8000824 <W25_PrintUart_ReadData+0x194>)
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 ff44 	bl	800258c <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t*)str1,2,0x1000);
 8000704:	1d39      	adds	r1, r7, #4
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	2202      	movs	r2, #2
 800070c:	4844      	ldr	r0, [pc, #272]	; (8000820 <W25_PrintUart_ReadData+0x190>)
 800070e:	f001 fda0 	bl	8002252 <HAL_UART_Transmit>
				if(j==7)
 8000712:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000716:	2b07      	cmp	r3, #7
 8000718:	d107      	bne.n	800072a <W25_PrintUart_ReadData+0x9a>
					HAL_UART_Transmit(&huart1,(uint8_t*)"|",1,0x1000);
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	2201      	movs	r2, #1
 8000720:	4941      	ldr	r1, [pc, #260]	; (8000828 <W25_PrintUart_ReadData+0x198>)
 8000722:	483f      	ldr	r0, [pc, #252]	; (8000820 <W25_PrintUart_ReadData+0x190>)
 8000724:	f001 fd95 	bl	8002252 <HAL_UART_Transmit>
 8000728:	e006      	b.n	8000738 <W25_PrintUart_ReadData+0xa8>
				else
					HAL_UART_Transmit(&huart1,(uint8_t*)" ",1,0x1000);
 800072a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072e:	2201      	movs	r2, #1
 8000730:	493e      	ldr	r1, [pc, #248]	; (800082c <W25_PrintUart_ReadData+0x19c>)
 8000732:	483b      	ldr	r0, [pc, #236]	; (8000820 <W25_PrintUart_ReadData+0x190>)
 8000734:	f001 fd8d 	bl	8002252 <HAL_UART_Transmit>
			for(uint8_t j=0; j<16; j++)
 8000738:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800073c:	3301      	adds	r3, #1
 800073e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000742:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000746:	2b0f      	cmp	r3, #15
 8000748:	d9ce      	bls.n	80006e8 <W25_PrintUart_ReadData+0x58>
			}
			HAL_UART_Transmit(&huart1,(uint8_t*)"| ",1,0x1000);
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	2201      	movs	r2, #1
 8000750:	4937      	ldr	r1, [pc, #220]	; (8000830 <W25_PrintUart_ReadData+0x1a0>)
 8000752:	4833      	ldr	r0, [pc, #204]	; (8000820 <W25_PrintUart_ReadData+0x190>)
 8000754:	f001 fd7d 	bl	8002252 <HAL_UART_Transmit>
			for(uint8_t j=0; j<16; j++)
 8000758:	2300      	movs	r3, #0
 800075a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800075e:	e033      	b.n	80007c8 <W25_PrintUart_ReadData+0x138>
			{
				if ((buf[(uint16_t)i*16 + (uint16_t)j] == 0x0A) || (buf[(uint16_t)i*16 + (uint16_t)j] == 0x0D))
 8000760:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000764:	011a      	lsls	r2, r3, #4
 8000766:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800076a:	4413      	add	r3, r2
 800076c:	4a2a      	ldr	r2, [pc, #168]	; (8000818 <W25_PrintUart_ReadData+0x188>)
 800076e:	5cd3      	ldrb	r3, [r2, r3]
 8000770:	2b0a      	cmp	r3, #10
 8000772:	d009      	beq.n	8000788 <W25_PrintUart_ReadData+0xf8>
 8000774:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000778:	011a      	lsls	r2, r3, #4
 800077a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800077e:	4413      	add	r3, r2
 8000780:	4a25      	ldr	r2, [pc, #148]	; (8000818 <W25_PrintUart_ReadData+0x188>)
 8000782:	5cd3      	ldrb	r3, [r2, r3]
 8000784:	2b0d      	cmp	r3, #13
 8000786:	d105      	bne.n	8000794 <W25_PrintUart_ReadData+0x104>
					sprintf(str1," ");
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	4928      	ldr	r1, [pc, #160]	; (800082c <W25_PrintUart_ReadData+0x19c>)
 800078c:	4618      	mov	r0, r3
 800078e:	f001 fefd 	bl	800258c <siprintf>
 8000792:	e00d      	b.n	80007b0 <W25_PrintUart_ReadData+0x120>
				else
					sprintf(str1,"%c", (char) buf[(uint16_t)i*16 + (uint16_t)j]);
 8000794:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000798:	011a      	lsls	r2, r3, #4
 800079a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800079e:	4413      	add	r3, r2
 80007a0:	4a1d      	ldr	r2, [pc, #116]	; (8000818 <W25_PrintUart_ReadData+0x188>)
 80007a2:	5cd3      	ldrb	r3, [r2, r3]
 80007a4:	461a      	mov	r2, r3
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4922      	ldr	r1, [pc, #136]	; (8000834 <W25_PrintUart_ReadData+0x1a4>)
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 feee 	bl	800258c <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t*)str1,1,0x1000);
 80007b0:	1d39      	adds	r1, r7, #4
 80007b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b6:	2201      	movs	r2, #1
 80007b8:	4819      	ldr	r0, [pc, #100]	; (8000820 <W25_PrintUart_ReadData+0x190>)
 80007ba:	f001 fd4a 	bl	8002252 <HAL_UART_Transmit>
			for(uint8_t j=0; j<16; j++)
 80007be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80007c2:	3301      	adds	r3, #1
 80007c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80007c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d9c7      	bls.n	8000760 <W25_PrintUart_ReadData+0xd0>
			}
			HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
 80007d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d4:	2202      	movs	r2, #2
 80007d6:	4918      	ldr	r1, [pc, #96]	; (8000838 <W25_PrintUart_ReadData+0x1a8>)
 80007d8:	4811      	ldr	r0, [pc, #68]	; (8000820 <W25_PrintUart_ReadData+0x190>)
 80007da:	f001 fd3a 	bl	8002252 <HAL_UART_Transmit>
		for(uint8_t i=0; i<16; i++)
 80007de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80007e2:	3301      	adds	r3, #1
 80007e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80007e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80007ec:	2b0f      	cmp	r3, #15
 80007ee:	f67f af63 	bls.w	80006b8 <W25_PrintUart_ReadData+0x28>
		}
		HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
 80007f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f6:	2202      	movs	r2, #2
 80007f8:	490f      	ldr	r1, [pc, #60]	; (8000838 <W25_PrintUart_ReadData+0x1a8>)
 80007fa:	4809      	ldr	r0, [pc, #36]	; (8000820 <W25_PrintUart_ReadData+0x190>)
 80007fc:	f001 fd29 	bl	8002252 <HAL_UART_Transmit>
	for(uint16_t k=0; k<4; k++)
 8000800:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000802:	3301      	adds	r3, #1
 8000804:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000806:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000808:	2b03      	cmp	r3, #3
 800080a:	f67f af49 	bls.w	80006a0 <W25_PrintUart_ReadData+0x10>
	}
}
 800080e:	bf00      	nop
 8000810:	bf00      	nop
 8000812:	3730      	adds	r7, #48	; 0x30
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000012c 	.word	0x2000012c
 800081c:	08002eac 	.word	0x08002eac
 8000820:	200000e4 	.word	0x200000e4
 8000824:	08002eb4 	.word	0x08002eb4
 8000828:	08002ebc 	.word	0x08002ebc
 800082c:	08002ec0 	.word	0x08002ec0
 8000830:	08002ec4 	.word	0x08002ec4
 8000834:	08002ec8 	.word	0x08002ec8
 8000838:	08002ecc 	.word	0x08002ecc

0800083c <W25_Init>:
	cs_reset();
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
}
//---------------------------------------------------------
void W25_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8000840:	2064      	movs	r0, #100	; 0x64
 8000842:	f000 f88f 	bl	8000964 <HAL_Delay>
	W25_Reset();
 8000846:	f7ff fed3 	bl	80005f0 <W25_Reset>
	HAL_Delay(100);
 800084a:	2064      	movs	r0, #100	; 0x64
 800084c:	f000 f88a 	bl	8000964 <HAL_Delay>
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}

08000854 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000856:	490d      	ldr	r1, [pc, #52]	; (800088c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000858:	4a0d      	ldr	r2, [pc, #52]	; (8000890 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800085c:	e002      	b.n	8000864 <LoopCopyDataInit>

0800085e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000862:	3304      	adds	r3, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000868:	d3f9      	bcc.n	800085e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800086c:	4c0a      	ldr	r4, [pc, #40]	; (8000898 <LoopFillZerobss+0x22>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000870:	e001      	b.n	8000876 <LoopFillZerobss>

08000872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000874:	3204      	adds	r2, #4

08000876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000878:	d3fb      	bcc.n	8000872 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800087a:	f7ff fe8b 	bl	8000594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800087e:	f001 fe59 	bl	8002534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000882:	f7ff fc63 	bl	800014c <main>
  bx lr
 8000886:	4770      	bx	lr
  ldr r0, =_sdata
 8000888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800088c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000890:	080030d0 	.word	0x080030d0
  ldr r2, =_sbss
 8000894:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000898:	20000240 	.word	0x20000240

0800089c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800089c:	e7fe      	b.n	800089c <ADC1_2_IRQHandler>
	...

080008a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_Init+0x28>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <HAL_Init+0x28>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b0:	2003      	movs	r0, #3
 80008b2:	f000 f92b 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b6:	200f      	movs	r0, #15
 80008b8:	f000 f808 	bl	80008cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008bc:	f7ff fd44 	bl	8000348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40022000 	.word	0x40022000

080008cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_InitTick+0x54>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_InitTick+0x58>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f935 	bl	8000b5a <HAL_SYSTICK_Config>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00e      	b.n	8000918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b0f      	cmp	r3, #15
 80008fe:	d80a      	bhi.n	8000916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000900:	2200      	movs	r2, #0
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000908:	f000 f90b 	bl	8000b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <HAL_InitTick+0x5c>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
 8000914:	e000      	b.n	8000918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000000 	.word	0x20000000
 8000924:	20000008 	.word	0x20000008
 8000928:	20000004 	.word	0x20000004

0800092c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_IncTick+0x1c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_IncTick+0x20>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4413      	add	r3, r2
 800093c:	4a03      	ldr	r2, [pc, #12]	; (800094c <HAL_IncTick+0x20>)
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	20000008 	.word	0x20000008
 800094c:	2000022c 	.word	0x2000022c

08000950 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;
 8000954:	4b02      	ldr	r3, [pc, #8]	; (8000960 <HAL_GetTick+0x10>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	2000022c 	.word	0x2000022c

08000964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800096c:	f7ff fff0 	bl	8000950 <HAL_GetTick>
 8000970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800097c:	d005      	beq.n	800098a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_Delay+0x44>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	4413      	add	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800098a:	bf00      	nop
 800098c:	f7ff ffe0 	bl	8000950 <HAL_GetTick>
 8000990:	4602      	mov	r2, r0
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	429a      	cmp	r2, r3
 800099a:	d8f7      	bhi.n	800098c <HAL_Delay+0x28>
  {
  }
}
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000008 	.word	0x20000008

080009ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db0a      	blt.n	8000a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	490c      	ldr	r1, [pc, #48]	; (8000a5c <__NVIC_SetPriority+0x4c>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	0112      	lsls	r2, r2, #4
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	440b      	add	r3, r1
 8000a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a38:	e00a      	b.n	8000a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4908      	ldr	r1, [pc, #32]	; (8000a60 <__NVIC_SetPriority+0x50>)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	3b04      	subs	r3, #4
 8000a48:	0112      	lsls	r2, r2, #4
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	761a      	strb	r2, [r3, #24]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000e100 	.word	0xe000e100
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f1c3 0307 	rsb	r3, r3, #7
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	bf28      	it	cs
 8000a82:	2304      	movcs	r3, #4
 8000a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d902      	bls.n	8000a94 <NVIC_EncodePriority+0x30>
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3b03      	subs	r3, #3
 8000a92:	e000      	b.n	8000a96 <NVIC_EncodePriority+0x32>
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43d9      	mvns	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	4313      	orrs	r3, r2
         );
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3724      	adds	r7, #36	; 0x24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad8:	d301      	bcc.n	8000ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00f      	b.n	8000afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <SysTick_Config+0x40>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae6:	210f      	movs	r1, #15
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aec:	f7ff ff90 	bl	8000a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <SysTick_Config+0x40>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SysTick_Config+0x40>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff49 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b34:	f7ff ff5e 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	6978      	ldr	r0, [r7, #20]
 8000b40:	f7ff ff90 	bl	8000a64 <NVIC_EncodePriority>
 8000b44:	4602      	mov	r2, r0
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff5f 	bl	8000a10 <__NVIC_SetPriority>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ffb0 	bl	8000ac8 <SysTick_Config>
 8000b68:	4603      	mov	r3, r0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b08b      	sub	sp, #44	; 0x2c
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b86:	e169      	b.n	8000e5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	69fa      	ldr	r2, [r7, #28]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	f040 8158 	bne.w	8000e56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	4a9a      	ldr	r2, [pc, #616]	; (8000e14 <HAL_GPIO_Init+0x2a0>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d05e      	beq.n	8000c6e <HAL_GPIO_Init+0xfa>
 8000bb0:	4a98      	ldr	r2, [pc, #608]	; (8000e14 <HAL_GPIO_Init+0x2a0>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d875      	bhi.n	8000ca2 <HAL_GPIO_Init+0x12e>
 8000bb6:	4a98      	ldr	r2, [pc, #608]	; (8000e18 <HAL_GPIO_Init+0x2a4>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d058      	beq.n	8000c6e <HAL_GPIO_Init+0xfa>
 8000bbc:	4a96      	ldr	r2, [pc, #600]	; (8000e18 <HAL_GPIO_Init+0x2a4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d86f      	bhi.n	8000ca2 <HAL_GPIO_Init+0x12e>
 8000bc2:	4a96      	ldr	r2, [pc, #600]	; (8000e1c <HAL_GPIO_Init+0x2a8>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d052      	beq.n	8000c6e <HAL_GPIO_Init+0xfa>
 8000bc8:	4a94      	ldr	r2, [pc, #592]	; (8000e1c <HAL_GPIO_Init+0x2a8>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d869      	bhi.n	8000ca2 <HAL_GPIO_Init+0x12e>
 8000bce:	4a94      	ldr	r2, [pc, #592]	; (8000e20 <HAL_GPIO_Init+0x2ac>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d04c      	beq.n	8000c6e <HAL_GPIO_Init+0xfa>
 8000bd4:	4a92      	ldr	r2, [pc, #584]	; (8000e20 <HAL_GPIO_Init+0x2ac>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d863      	bhi.n	8000ca2 <HAL_GPIO_Init+0x12e>
 8000bda:	4a92      	ldr	r2, [pc, #584]	; (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d046      	beq.n	8000c6e <HAL_GPIO_Init+0xfa>
 8000be0:	4a90      	ldr	r2, [pc, #576]	; (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d85d      	bhi.n	8000ca2 <HAL_GPIO_Init+0x12e>
 8000be6:	2b12      	cmp	r3, #18
 8000be8:	d82a      	bhi.n	8000c40 <HAL_GPIO_Init+0xcc>
 8000bea:	2b12      	cmp	r3, #18
 8000bec:	d859      	bhi.n	8000ca2 <HAL_GPIO_Init+0x12e>
 8000bee:	a201      	add	r2, pc, #4	; (adr r2, 8000bf4 <HAL_GPIO_Init+0x80>)
 8000bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf4:	08000c6f 	.word	0x08000c6f
 8000bf8:	08000c49 	.word	0x08000c49
 8000bfc:	08000c5b 	.word	0x08000c5b
 8000c00:	08000c9d 	.word	0x08000c9d
 8000c04:	08000ca3 	.word	0x08000ca3
 8000c08:	08000ca3 	.word	0x08000ca3
 8000c0c:	08000ca3 	.word	0x08000ca3
 8000c10:	08000ca3 	.word	0x08000ca3
 8000c14:	08000ca3 	.word	0x08000ca3
 8000c18:	08000ca3 	.word	0x08000ca3
 8000c1c:	08000ca3 	.word	0x08000ca3
 8000c20:	08000ca3 	.word	0x08000ca3
 8000c24:	08000ca3 	.word	0x08000ca3
 8000c28:	08000ca3 	.word	0x08000ca3
 8000c2c:	08000ca3 	.word	0x08000ca3
 8000c30:	08000ca3 	.word	0x08000ca3
 8000c34:	08000ca3 	.word	0x08000ca3
 8000c38:	08000c51 	.word	0x08000c51
 8000c3c:	08000c65 	.word	0x08000c65
 8000c40:	4a79      	ldr	r2, [pc, #484]	; (8000e28 <HAL_GPIO_Init+0x2b4>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d013      	beq.n	8000c6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c46:	e02c      	b.n	8000ca2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	623b      	str	r3, [r7, #32]
          break;
 8000c4e:	e029      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	3304      	adds	r3, #4
 8000c56:	623b      	str	r3, [r7, #32]
          break;
 8000c58:	e024      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	3308      	adds	r3, #8
 8000c60:	623b      	str	r3, [r7, #32]
          break;
 8000c62:	e01f      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	330c      	adds	r3, #12
 8000c6a:	623b      	str	r3, [r7, #32]
          break;
 8000c6c:	e01a      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d102      	bne.n	8000c7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c76:	2304      	movs	r3, #4
 8000c78:	623b      	str	r3, [r7, #32]
          break;
 8000c7a:	e013      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d105      	bne.n	8000c90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c84:	2308      	movs	r3, #8
 8000c86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	611a      	str	r2, [r3, #16]
          break;
 8000c8e:	e009      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c90:	2308      	movs	r3, #8
 8000c92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	615a      	str	r2, [r3, #20]
          break;
 8000c9a:	e003      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
          break;
 8000ca0:	e000      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          break;
 8000ca2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	2bff      	cmp	r3, #255	; 0xff
 8000ca8:	d801      	bhi.n	8000cae <HAL_GPIO_Init+0x13a>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	e001      	b.n	8000cb2 <HAL_GPIO_Init+0x13e>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	2bff      	cmp	r3, #255	; 0xff
 8000cb8:	d802      	bhi.n	8000cc0 <HAL_GPIO_Init+0x14c>
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	e002      	b.n	8000cc6 <HAL_GPIO_Init+0x152>
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	3b08      	subs	r3, #8
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	210f      	movs	r1, #15
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	6a39      	ldr	r1, [r7, #32]
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 80b1 	beq.w	8000e56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cf4:	4b4d      	ldr	r3, [pc, #308]	; (8000e2c <HAL_GPIO_Init+0x2b8>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a4c      	ldr	r2, [pc, #304]	; (8000e2c <HAL_GPIO_Init+0x2b8>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b4a      	ldr	r3, [pc, #296]	; (8000e2c <HAL_GPIO_Init+0x2b8>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d0c:	4a48      	ldr	r2, [pc, #288]	; (8000e30 <HAL_GPIO_Init+0x2bc>)
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	089b      	lsrs	r3, r3, #2
 8000d12:	3302      	adds	r3, #2
 8000d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	220f      	movs	r2, #15
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a40      	ldr	r2, [pc, #256]	; (8000e34 <HAL_GPIO_Init+0x2c0>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d013      	beq.n	8000d60 <HAL_GPIO_Init+0x1ec>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a3f      	ldr	r2, [pc, #252]	; (8000e38 <HAL_GPIO_Init+0x2c4>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d00d      	beq.n	8000d5c <HAL_GPIO_Init+0x1e8>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a3e      	ldr	r2, [pc, #248]	; (8000e3c <HAL_GPIO_Init+0x2c8>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d007      	beq.n	8000d58 <HAL_GPIO_Init+0x1e4>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a3d      	ldr	r2, [pc, #244]	; (8000e40 <HAL_GPIO_Init+0x2cc>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d101      	bne.n	8000d54 <HAL_GPIO_Init+0x1e0>
 8000d50:	2303      	movs	r3, #3
 8000d52:	e006      	b.n	8000d62 <HAL_GPIO_Init+0x1ee>
 8000d54:	2304      	movs	r3, #4
 8000d56:	e004      	b.n	8000d62 <HAL_GPIO_Init+0x1ee>
 8000d58:	2302      	movs	r3, #2
 8000d5a:	e002      	b.n	8000d62 <HAL_GPIO_Init+0x1ee>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e000      	b.n	8000d62 <HAL_GPIO_Init+0x1ee>
 8000d60:	2300      	movs	r3, #0
 8000d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d64:	f002 0203 	and.w	r2, r2, #3
 8000d68:	0092      	lsls	r2, r2, #2
 8000d6a:	4093      	lsls	r3, r2
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d72:	492f      	ldr	r1, [pc, #188]	; (8000e30 <HAL_GPIO_Init+0x2bc>)
 8000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	3302      	adds	r3, #2
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d006      	beq.n	8000d9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	492c      	ldr	r1, [pc, #176]	; (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	600b      	str	r3, [r1, #0]
 8000d98:	e006      	b.n	8000da8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	4928      	ldr	r1, [pc, #160]	; (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000da4:	4013      	ands	r3, r2
 8000da6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d006      	beq.n	8000dc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000db4:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	4922      	ldr	r1, [pc, #136]	; (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	604b      	str	r3, [r1, #4]
 8000dc0:	e006      	b.n	8000dd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	491e      	ldr	r1, [pc, #120]	; (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d006      	beq.n	8000dea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	4918      	ldr	r1, [pc, #96]	; (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	608b      	str	r3, [r1, #8]
 8000de8:	e006      	b.n	8000df8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	4914      	ldr	r1, [pc, #80]	; (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000df4:	4013      	ands	r3, r2
 8000df6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d021      	beq.n	8000e48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	490e      	ldr	r1, [pc, #56]	; (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	60cb      	str	r3, [r1, #12]
 8000e10:	e021      	b.n	8000e56 <HAL_GPIO_Init+0x2e2>
 8000e12:	bf00      	nop
 8000e14:	10320000 	.word	0x10320000
 8000e18:	10310000 	.word	0x10310000
 8000e1c:	10220000 	.word	0x10220000
 8000e20:	10210000 	.word	0x10210000
 8000e24:	10120000 	.word	0x10120000
 8000e28:	10110000 	.word	0x10110000
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010000 	.word	0x40010000
 8000e34:	40010800 	.word	0x40010800
 8000e38:	40010c00 	.word	0x40010c00
 8000e3c:	40011000 	.word	0x40011000
 8000e40:	40011400 	.word	0x40011400
 8000e44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_GPIO_Init+0x304>)
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	4909      	ldr	r1, [pc, #36]	; (8000e78 <HAL_GPIO_Init+0x304>)
 8000e52:	4013      	ands	r3, r2
 8000e54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	3301      	adds	r3, #1
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e62:	fa22 f303 	lsr.w	r3, r2, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f47f ae8e 	bne.w	8000b88 <HAL_GPIO_Init+0x14>
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	372c      	adds	r7, #44	; 0x2c
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	40010400 	.word	0x40010400

08000e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e8c:	787b      	ldrb	r3, [r7, #1]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e92:	887a      	ldrh	r2, [r7, #2]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e98:	e003      	b.n	8000ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	041a      	lsls	r2, r3, #16
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	611a      	str	r2, [r3, #16]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d101      	bne.n	8000ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e272      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 8087 	beq.w	8000fda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ecc:	4b92      	ldr	r3, [pc, #584]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 030c 	and.w	r3, r3, #12
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d00c      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ed8:	4b8f      	ldr	r3, [pc, #572]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 030c 	and.w	r3, r3, #12
 8000ee0:	2b08      	cmp	r3, #8
 8000ee2:	d112      	bne.n	8000f0a <HAL_RCC_OscConfig+0x5e>
 8000ee4:	4b8c      	ldr	r3, [pc, #560]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef0:	d10b      	bne.n	8000f0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef2:	4b89      	ldr	r3, [pc, #548]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d06c      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x12c>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d168      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e24c      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f12:	d106      	bne.n	8000f22 <HAL_RCC_OscConfig+0x76>
 8000f14:	4b80      	ldr	r3, [pc, #512]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a7f      	ldr	r2, [pc, #508]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	e02e      	b.n	8000f80 <HAL_RCC_OscConfig+0xd4>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10c      	bne.n	8000f44 <HAL_RCC_OscConfig+0x98>
 8000f2a:	4b7b      	ldr	r3, [pc, #492]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a7a      	ldr	r2, [pc, #488]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	4b78      	ldr	r3, [pc, #480]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a77      	ldr	r2, [pc, #476]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e01d      	b.n	8000f80 <HAL_RCC_OscConfig+0xd4>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f4c:	d10c      	bne.n	8000f68 <HAL_RCC_OscConfig+0xbc>
 8000f4e:	4b72      	ldr	r3, [pc, #456]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a71      	ldr	r2, [pc, #452]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	4b6f      	ldr	r3, [pc, #444]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a6e      	ldr	r2, [pc, #440]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e00b      	b.n	8000f80 <HAL_RCC_OscConfig+0xd4>
 8000f68:	4b6b      	ldr	r3, [pc, #428]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a6a      	ldr	r2, [pc, #424]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b68      	ldr	r3, [pc, #416]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a67      	ldr	r2, [pc, #412]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d013      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f88:	f7ff fce2 	bl	8000950 <HAL_GetTick>
 8000f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f90:	f7ff fcde 	bl	8000950 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b64      	cmp	r3, #100	; 0x64
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e200      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa2:	4b5d      	ldr	r3, [pc, #372]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0f0      	beq.n	8000f90 <HAL_RCC_OscConfig+0xe4>
 8000fae:	e014      	b.n	8000fda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fcce 	bl	8000950 <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb6:	e008      	b.n	8000fca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb8:	f7ff fcca 	bl	8000950 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b64      	cmp	r3, #100	; 0x64
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e1ec      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fca:	4b53      	ldr	r3, [pc, #332]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f0      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x10c>
 8000fd6:	e000      	b.n	8000fda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d063      	beq.n	80010ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fe6:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00b      	beq.n	800100a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ff2:	4b49      	ldr	r3, [pc, #292]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
 8000ffa:	2b08      	cmp	r3, #8
 8000ffc:	d11c      	bne.n	8001038 <HAL_RCC_OscConfig+0x18c>
 8000ffe:	4b46      	ldr	r3, [pc, #280]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d116      	bne.n	8001038 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100a:	4b43      	ldr	r3, [pc, #268]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d005      	beq.n	8001022 <HAL_RCC_OscConfig+0x176>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d001      	beq.n	8001022 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e1c0      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001022:	4b3d      	ldr	r3, [pc, #244]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	4939      	ldr	r1, [pc, #228]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8001032:	4313      	orrs	r3, r2
 8001034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001036:	e03a      	b.n	80010ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d020      	beq.n	8001082 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001040:	4b36      	ldr	r3, [pc, #216]	; (800111c <HAL_RCC_OscConfig+0x270>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001046:	f7ff fc83 	bl	8000950 <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800104e:	f7ff fc7f 	bl	8000950 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e1a1      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001060:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0f0      	beq.n	800104e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106c:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4927      	ldr	r1, [pc, #156]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 800107c:	4313      	orrs	r3, r2
 800107e:	600b      	str	r3, [r1, #0]
 8001080:	e015      	b.n	80010ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <HAL_RCC_OscConfig+0x270>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001088:	f7ff fc62 	bl	8000950 <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001090:	f7ff fc5e 	bl	8000950 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e180      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f0      	bne.n	8001090 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d03a      	beq.n	8001130 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d019      	beq.n	80010f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <HAL_RCC_OscConfig+0x274>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c8:	f7ff fc42 	bl	8000950 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d0:	f7ff fc3e 	bl	8000950 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e160      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0f0      	beq.n	80010d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f000 fad8 	bl	80016a4 <RCC_Delay>
 80010f4:	e01c      	b.n	8001130 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_RCC_OscConfig+0x274>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fc:	f7ff fc28 	bl	8000950 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001102:	e00f      	b.n	8001124 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001104:	f7ff fc24 	bl	8000950 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d908      	bls.n	8001124 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e146      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000
 800111c:	42420000 	.word	0x42420000
 8001120:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001124:	4b92      	ldr	r3, [pc, #584]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1e9      	bne.n	8001104 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 80a6 	beq.w	800128a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001142:	4b8b      	ldr	r3, [pc, #556]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10d      	bne.n	800116a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b88      	ldr	r3, [pc, #544]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a87      	ldr	r2, [pc, #540]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b85      	ldr	r3, [pc, #532]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001166:	2301      	movs	r3, #1
 8001168:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116a:	4b82      	ldr	r3, [pc, #520]	; (8001374 <HAL_RCC_OscConfig+0x4c8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001172:	2b00      	cmp	r3, #0
 8001174:	d118      	bne.n	80011a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001176:	4b7f      	ldr	r3, [pc, #508]	; (8001374 <HAL_RCC_OscConfig+0x4c8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a7e      	ldr	r2, [pc, #504]	; (8001374 <HAL_RCC_OscConfig+0x4c8>)
 800117c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001182:	f7ff fbe5 	bl	8000950 <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800118a:	f7ff fbe1 	bl	8000950 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b64      	cmp	r3, #100	; 0x64
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e103      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800119c:	4b75      	ldr	r3, [pc, #468]	; (8001374 <HAL_RCC_OscConfig+0x4c8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f0      	beq.n	800118a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d106      	bne.n	80011be <HAL_RCC_OscConfig+0x312>
 80011b0:	4b6f      	ldr	r3, [pc, #444]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	4a6e      	ldr	r2, [pc, #440]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6213      	str	r3, [r2, #32]
 80011bc:	e02d      	b.n	800121a <HAL_RCC_OscConfig+0x36e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10c      	bne.n	80011e0 <HAL_RCC_OscConfig+0x334>
 80011c6:	4b6a      	ldr	r3, [pc, #424]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	4a69      	ldr	r2, [pc, #420]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	6213      	str	r3, [r2, #32]
 80011d2:	4b67      	ldr	r3, [pc, #412]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	4a66      	ldr	r2, [pc, #408]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	f023 0304 	bic.w	r3, r3, #4
 80011dc:	6213      	str	r3, [r2, #32]
 80011de:	e01c      	b.n	800121a <HAL_RCC_OscConfig+0x36e>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	2b05      	cmp	r3, #5
 80011e6:	d10c      	bne.n	8001202 <HAL_RCC_OscConfig+0x356>
 80011e8:	4b61      	ldr	r3, [pc, #388]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	4a60      	ldr	r2, [pc, #384]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6213      	str	r3, [r2, #32]
 80011f4:	4b5e      	ldr	r3, [pc, #376]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	4a5d      	ldr	r2, [pc, #372]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6213      	str	r3, [r2, #32]
 8001200:	e00b      	b.n	800121a <HAL_RCC_OscConfig+0x36e>
 8001202:	4b5b      	ldr	r3, [pc, #364]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	4a5a      	ldr	r2, [pc, #360]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	f023 0301 	bic.w	r3, r3, #1
 800120c:	6213      	str	r3, [r2, #32]
 800120e:	4b58      	ldr	r3, [pc, #352]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	4a57      	ldr	r2, [pc, #348]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	f023 0304 	bic.w	r3, r3, #4
 8001218:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d015      	beq.n	800124e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001222:	f7ff fb95 	bl	8000950 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001228:	e00a      	b.n	8001240 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800122a:	f7ff fb91 	bl	8000950 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	f241 3288 	movw	r2, #5000	; 0x1388
 8001238:	4293      	cmp	r3, r2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e0b1      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001240:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0ee      	beq.n	800122a <HAL_RCC_OscConfig+0x37e>
 800124c:	e014      	b.n	8001278 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124e:	f7ff fb7f 	bl	8000950 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001254:	e00a      	b.n	800126c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001256:	f7ff fb7b 	bl	8000950 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	f241 3288 	movw	r2, #5000	; 0x1388
 8001264:	4293      	cmp	r3, r2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e09b      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126c:	4b40      	ldr	r3, [pc, #256]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1ee      	bne.n	8001256 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d105      	bne.n	800128a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800127e:	4b3c      	ldr	r3, [pc, #240]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a3b      	ldr	r2, [pc, #236]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001288:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8087 	beq.w	80013a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001294:	4b36      	ldr	r3, [pc, #216]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b08      	cmp	r3, #8
 800129e:	d061      	beq.n	8001364 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d146      	bne.n	8001336 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a8:	4b33      	ldr	r3, [pc, #204]	; (8001378 <HAL_RCC_OscConfig+0x4cc>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ae:	f7ff fb4f 	bl	8000950 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b6:	f7ff fb4b 	bl	8000950 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e06d      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c8:	4b29      	ldr	r3, [pc, #164]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f0      	bne.n	80012b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012dc:	d108      	bne.n	80012f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012de:	4b24      	ldr	r3, [pc, #144]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	4921      	ldr	r1, [pc, #132]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012f0:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a19      	ldr	r1, [r3, #32]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	430b      	orrs	r3, r1
 8001302:	491b      	ldr	r1, [pc, #108]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_RCC_OscConfig+0x4cc>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130e:	f7ff fb1f 	bl	8000950 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001316:	f7ff fb1b 	bl	8000950 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e03d      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x46a>
 8001334:	e035      	b.n	80013a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <HAL_RCC_OscConfig+0x4cc>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fb08 	bl	8000950 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001344:	f7ff fb04 	bl	8000950 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e026      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_RCC_OscConfig+0x4c4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x498>
 8001362:	e01e      	b.n	80013a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d107      	bne.n	800137c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e019      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
 8001370:	40021000 	.word	0x40021000
 8001374:	40007000 	.word	0x40007000
 8001378:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_RCC_OscConfig+0x500>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	429a      	cmp	r2, r3
 800138e:	d106      	bne.n	800139e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139a:	429a      	cmp	r2, r3
 800139c:	d001      	beq.n	80013a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e000      	b.n	80013a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021000 	.word	0x40021000

080013b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0d0      	b.n	8001566 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013c4:	4b6a      	ldr	r3, [pc, #424]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d910      	bls.n	80013f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d2:	4b67      	ldr	r3, [pc, #412]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 0207 	bic.w	r2, r3, #7
 80013da:	4965      	ldr	r1, [pc, #404]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	4313      	orrs	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e2:	4b63      	ldr	r3, [pc, #396]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d001      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e0b8      	b.n	8001566 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d020      	beq.n	8001442 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800140c:	4b59      	ldr	r3, [pc, #356]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	4a58      	ldr	r2, [pc, #352]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001416:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001424:	4b53      	ldr	r3, [pc, #332]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	4a52      	ldr	r2, [pc, #328]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800142e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001430:	4b50      	ldr	r3, [pc, #320]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	494d      	ldr	r1, [pc, #308]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 800143e:	4313      	orrs	r3, r2
 8001440:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d040      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d107      	bne.n	8001466 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	4b47      	ldr	r3, [pc, #284]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d115      	bne.n	800148e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e07f      	b.n	8001566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b02      	cmp	r3, #2
 800146c:	d107      	bne.n	800147e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146e:	4b41      	ldr	r3, [pc, #260]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d109      	bne.n	800148e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e073      	b.n	8001566 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147e:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e06b      	b.n	8001566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800148e:	4b39      	ldr	r3, [pc, #228]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f023 0203 	bic.w	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4936      	ldr	r1, [pc, #216]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a0:	f7ff fa56 	bl	8000950 <HAL_GetTick>
 80014a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a6:	e00a      	b.n	80014be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a8:	f7ff fa52 	bl	8000950 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e053      	b.n	8001566 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014be:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 020c 	and.w	r2, r3, #12
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d1eb      	bne.n	80014a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d210      	bcs.n	8001500 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 0207 	bic.w	r2, r3, #7
 80014e6:	4922      	ldr	r1, [pc, #136]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d001      	beq.n	8001500 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e032      	b.n	8001566 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	d008      	beq.n	800151e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	4916      	ldr	r1, [pc, #88]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	2b00      	cmp	r3, #0
 8001528:	d009      	beq.n	800153e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	490e      	ldr	r1, [pc, #56]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 800153a:	4313      	orrs	r3, r2
 800153c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800153e:	f000 f821 	bl	8001584 <HAL_RCC_GetSysClockFreq>
 8001542:	4602      	mov	r2, r0
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	490a      	ldr	r1, [pc, #40]	; (8001578 <HAL_RCC_ClockConfig+0x1c8>)
 8001550:	5ccb      	ldrb	r3, [r1, r3]
 8001552:	fa22 f303 	lsr.w	r3, r2, r3
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <HAL_RCC_ClockConfig+0x1cc>)
 8001558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_RCC_ClockConfig+0x1d0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff f9b4 	bl	80008cc <HAL_InitTick>

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40022000 	.word	0x40022000
 8001574:	40021000 	.word	0x40021000
 8001578:	0800307c 	.word	0x0800307c
 800157c:	20000000 	.word	0x20000000
 8001580:	20000004 	.word	0x20000004

08001584 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001584:	b490      	push	{r4, r7}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800158a:	4b29      	ldr	r3, [pc, #164]	; (8001630 <HAL_RCC_GetSysClockFreq+0xac>)
 800158c:	1d3c      	adds	r4, r7, #4
 800158e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001590:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001594:	f240 2301 	movw	r3, #513	; 0x201
 8001598:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d002      	beq.n	80015c4 <HAL_RCC_GetSysClockFreq+0x40>
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d003      	beq.n	80015ca <HAL_RCC_GetSysClockFreq+0x46>
 80015c2:	e02b      	b.n	800161c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015c4:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015c6:	623b      	str	r3, [r7, #32]
      break;
 80015c8:	e02b      	b.n	8001622 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	0c9b      	lsrs	r3, r3, #18
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3328      	adds	r3, #40	; 0x28
 80015d4:	443b      	add	r3, r7
 80015d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015da:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d012      	beq.n	800160c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	0c5b      	lsrs	r3, r3, #17
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	3328      	adds	r3, #40	; 0x28
 80015f2:	443b      	add	r3, r7
 80015f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015fe:	fb03 f202 	mul.w	r2, r3, r2
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	fbb2 f3f3 	udiv	r3, r2, r3
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
 800160a:	e004      	b.n	8001616 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001610:	fb02 f303 	mul.w	r3, r2, r3
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	623b      	str	r3, [r7, #32]
      break;
 800161a:	e002      	b.n	8001622 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_RCC_GetSysClockFreq+0xb4>)
 800161e:	623b      	str	r3, [r7, #32]
      break;
 8001620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001622:	6a3b      	ldr	r3, [r7, #32]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3728      	adds	r7, #40	; 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bc90      	pop	{r4, r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	0800306c 	.word	0x0800306c
 8001634:	40021000 	.word	0x40021000
 8001638:	007a1200 	.word	0x007a1200
 800163c:	003d0900 	.word	0x003d0900

08001640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001644:	4b02      	ldr	r3, [pc, #8]	; (8001650 <HAL_RCC_GetHCLKFreq+0x10>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	20000000 	.word	0x20000000

08001654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001658:	f7ff fff2 	bl	8001640 <HAL_RCC_GetHCLKFreq>
 800165c:	4602      	mov	r2, r0
 800165e:	4b05      	ldr	r3, [pc, #20]	; (8001674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	4903      	ldr	r1, [pc, #12]	; (8001678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800166a:	5ccb      	ldrb	r3, [r1, r3]
 800166c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001670:	4618      	mov	r0, r3
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000
 8001678:	0800308c 	.word	0x0800308c

0800167c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001680:	f7ff ffde 	bl	8001640 <HAL_RCC_GetHCLKFreq>
 8001684:	4602      	mov	r2, r0
 8001686:	4b05      	ldr	r3, [pc, #20]	; (800169c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	0adb      	lsrs	r3, r3, #11
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	4903      	ldr	r1, [pc, #12]	; (80016a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001692:	5ccb      	ldrb	r3, [r1, r3]
 8001694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001698:	4618      	mov	r0, r3
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000
 80016a0:	0800308c 	.word	0x0800308c

080016a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <RCC_Delay+0x34>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <RCC_Delay+0x38>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	0a5b      	lsrs	r3, r3, #9
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016c0:	bf00      	nop
  }
  while (Delay --);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1e5a      	subs	r2, r3, #1
 80016c6:	60fa      	str	r2, [r7, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1f9      	bne.n	80016c0 <RCC_Delay+0x1c>
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	20000000 	.word	0x20000000
 80016dc:	10624dd3 	.word	0x10624dd3

080016e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e076      	b.n	80017e0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d108      	bne.n	800170c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001702:	d009      	beq.n	8001718 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
 800170a:	e005      	b.n	8001718 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d106      	bne.n	8001738 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7fe fe3a 	bl	80003ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2202      	movs	r2, #2
 800173c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800174e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001788:	431a      	orrs	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179c:	ea42 0103 	orr.w	r1, r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	0c1a      	lsrs	r2, r3, #16
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f002 0204 	and.w	r2, r2, #4
 80017be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	69da      	ldr	r2, [r3, #28]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	4613      	mov	r3, r2
 80017f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_SPI_Transmit+0x22>
 8001806:	2302      	movs	r3, #2
 8001808:	e126      	b.n	8001a58 <HAL_SPI_Transmit+0x270>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001812:	f7ff f89d 	bl	8000950 <HAL_GetTick>
 8001816:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b01      	cmp	r3, #1
 8001826:	d002      	beq.n	800182e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001828:	2302      	movs	r3, #2
 800182a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800182c:	e10b      	b.n	8001a46 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <HAL_SPI_Transmit+0x52>
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d102      	bne.n	8001840 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800183e:	e102      	b.n	8001a46 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2203      	movs	r2, #3
 8001844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	88fa      	ldrh	r2, [r7, #6]
 8001858:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	88fa      	ldrh	r2, [r7, #6]
 800185e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001886:	d10f      	bne.n	80018a8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001896:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b2:	2b40      	cmp	r3, #64	; 0x40
 80018b4:	d007      	beq.n	80018c6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018ce:	d14b      	bne.n	8001968 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <HAL_SPI_Transmit+0xf6>
 80018d8:	8afb      	ldrh	r3, [r7, #22]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d13e      	bne.n	800195c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	881a      	ldrh	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	1c9a      	adds	r2, r3, #2
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001902:	e02b      	b.n	800195c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b02      	cmp	r3, #2
 8001910:	d112      	bne.n	8001938 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	881a      	ldrh	r2, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	1c9a      	adds	r2, r3, #2
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800192c:	b29b      	uxth	r3, r3
 800192e:	3b01      	subs	r3, #1
 8001930:	b29a      	uxth	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	86da      	strh	r2, [r3, #54]	; 0x36
 8001936:	e011      	b.n	800195c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001938:	f7ff f80a 	bl	8000950 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d803      	bhi.n	8001950 <HAL_SPI_Transmit+0x168>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800194e:	d102      	bne.n	8001956 <HAL_SPI_Transmit+0x16e>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	77fb      	strb	r3, [r7, #31]
          goto error;
 800195a:	e074      	b.n	8001a46 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001960:	b29b      	uxth	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1ce      	bne.n	8001904 <HAL_SPI_Transmit+0x11c>
 8001966:	e04c      	b.n	8001a02 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <HAL_SPI_Transmit+0x18e>
 8001970:	8afb      	ldrh	r3, [r7, #22]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d140      	bne.n	80019f8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	330c      	adds	r3, #12
 8001980:	7812      	ldrb	r2, [r2, #0]
 8001982:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001992:	b29b      	uxth	r3, r3
 8001994:	3b01      	subs	r3, #1
 8001996:	b29a      	uxth	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800199c:	e02c      	b.n	80019f8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d113      	bne.n	80019d4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	330c      	adds	r3, #12
 80019b6:	7812      	ldrb	r2, [r2, #0]
 80019b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80019d2:	e011      	b.n	80019f8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019d4:	f7fe ffbc 	bl	8000950 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d803      	bhi.n	80019ec <HAL_SPI_Transmit+0x204>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019ea:	d102      	bne.n	80019f2 <HAL_SPI_Transmit+0x20a>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80019f6:	e026      	b.n	8001a46 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1cd      	bne.n	800199e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	6839      	ldr	r1, [r7, #0]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fbb8 	bl	800217c <SPI_EndRxTxTransaction>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2220      	movs	r2, #32
 8001a16:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10a      	bne.n	8001a36 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	77fb      	strb	r3, [r7, #31]
 8001a42:	e000      	b.n	8001a46 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001a44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001a56:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a7c:	d112      	bne.n	8001aa4 <HAL_SPI_Receive+0x44>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10e      	bne.n	8001aa4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2204      	movs	r2, #4
 8001a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001a8e:	88fa      	ldrh	r2, [r7, #6]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	4613      	mov	r3, r2
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 f8f1 	bl	8001c82 <HAL_SPI_TransmitReceive>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	e0ea      	b.n	8001c7a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_SPI_Receive+0x52>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e0e3      	b.n	8001c7a <HAL_SPI_Receive+0x21a>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001aba:	f7fe ff49 	bl	8000950 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d002      	beq.n	8001ad2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001acc:	2302      	movs	r3, #2
 8001ace:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ad0:	e0ca      	b.n	8001c68 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d002      	beq.n	8001ade <HAL_SPI_Receive+0x7e>
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d102      	bne.n	8001ae4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ae2:	e0c1      	b.n	8001c68 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	88fa      	ldrh	r2, [r7, #6]
 8001afc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	88fa      	ldrh	r2, [r7, #6]
 8001b02:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b2a:	d10f      	bne.n	8001b4c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b4a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b56:	2b40      	cmp	r3, #64	; 0x40
 8001b58:	d007      	beq.n	8001b6a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d162      	bne.n	8001c38 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001b72:	e02e      	b.n	8001bd2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d115      	bne.n	8001bae <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f103 020c 	add.w	r2, r3, #12
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8e:	7812      	ldrb	r2, [r2, #0]
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001bac:	e011      	b.n	8001bd2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bae:	f7fe fecf 	bl	8000950 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d803      	bhi.n	8001bc6 <HAL_SPI_Receive+0x166>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bc4:	d102      	bne.n	8001bcc <HAL_SPI_Receive+0x16c>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001bd0:	e04a      	b.n	8001c68 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1cb      	bne.n	8001b74 <HAL_SPI_Receive+0x114>
 8001bdc:	e031      	b.n	8001c42 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d113      	bne.n	8001c14 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf6:	b292      	uxth	r2, r2
 8001bf8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfe:	1c9a      	adds	r2, r3, #2
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c12:	e011      	b.n	8001c38 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c14:	f7fe fe9c 	bl	8000950 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d803      	bhi.n	8001c2c <HAL_SPI_Receive+0x1cc>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c2a:	d102      	bne.n	8001c32 <HAL_SPI_Receive+0x1d2>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001c36:	e017      	b.n	8001c68 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1cd      	bne.n	8001bde <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	6839      	ldr	r1, [r7, #0]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fa46 	bl	80020d8 <SPI_EndRxTransaction>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2220      	movs	r2, #32
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	75fb      	strb	r3, [r7, #23]
 8001c64:	e000      	b.n	8001c68 <HAL_SPI_Receive+0x208>
  }

error :
 8001c66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b08c      	sub	sp, #48	; 0x30
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001c90:	2301      	movs	r3, #1
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_SPI_TransmitReceive+0x26>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e18a      	b.n	8001fbe <HAL_SPI_TransmitReceive+0x33c>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cb0:	f7fe fe4e 	bl	8000950 <HAL_GetTick>
 8001cb4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001cca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d00f      	beq.n	8001cf2 <HAL_SPI_TransmitReceive+0x70>
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cd8:	d107      	bne.n	8001cea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d103      	bne.n	8001cea <HAL_SPI_TransmitReceive+0x68>
 8001ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d003      	beq.n	8001cf2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001cea:	2302      	movs	r3, #2
 8001cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001cf0:	e15b      	b.n	8001faa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_SPI_TransmitReceive+0x82>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HAL_SPI_TransmitReceive+0x82>
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d103      	bne.n	8001d0c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d0a:	e14e      	b.n	8001faa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d003      	beq.n	8001d20 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2205      	movs	r2, #5
 8001d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	887a      	ldrh	r2, [r7, #2]
 8001d36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	887a      	ldrh	r2, [r7, #2]
 8001d42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d60:	2b40      	cmp	r3, #64	; 0x40
 8001d62:	d007      	beq.n	8001d74 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d7c:	d178      	bne.n	8001e70 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <HAL_SPI_TransmitReceive+0x10a>
 8001d86:	8b7b      	ldrh	r3, [r7, #26]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d166      	bne.n	8001e5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	881a      	ldrh	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	1c9a      	adds	r2, r3, #2
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001db0:	e053      	b.n	8001e5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d11b      	bne.n	8001df8 <HAL_SPI_TransmitReceive+0x176>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d016      	beq.n	8001df8 <HAL_SPI_TransmitReceive+0x176>
 8001dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d113      	bne.n	8001df8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	881a      	ldrh	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	1c9a      	adds	r2, r3, #2
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d119      	bne.n	8001e3a <HAL_SPI_TransmitReceive+0x1b8>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d014      	beq.n	8001e3a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1a:	b292      	uxth	r2, r2
 8001e1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e22:	1c9a      	adds	r2, r3, #2
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e36:	2301      	movs	r3, #1
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e3a:	f7fe fd89 	bl	8000950 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d807      	bhi.n	8001e5a <HAL_SPI_TransmitReceive+0x1d8>
 8001e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e50:	d003      	beq.n	8001e5a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e58:	e0a7      	b.n	8001faa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1a6      	bne.n	8001db2 <HAL_SPI_TransmitReceive+0x130>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1a1      	bne.n	8001db2 <HAL_SPI_TransmitReceive+0x130>
 8001e6e:	e07c      	b.n	8001f6a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_SPI_TransmitReceive+0x1fc>
 8001e78:	8b7b      	ldrh	r3, [r7, #26]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d16b      	bne.n	8001f56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	330c      	adds	r3, #12
 8001e88:	7812      	ldrb	r2, [r2, #0]
 8001e8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ea4:	e057      	b.n	8001f56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d11c      	bne.n	8001eee <HAL_SPI_TransmitReceive+0x26c>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d017      	beq.n	8001eee <HAL_SPI_TransmitReceive+0x26c>
 8001ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d114      	bne.n	8001eee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	330c      	adds	r3, #12
 8001ece:	7812      	ldrb	r2, [r2, #0]
 8001ed0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d119      	bne.n	8001f30 <HAL_SPI_TransmitReceive+0x2ae>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d014      	beq.n	8001f30 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f30:	f7fe fd0e 	bl	8000950 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d803      	bhi.n	8001f48 <HAL_SPI_TransmitReceive+0x2c6>
 8001f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f46:	d102      	bne.n	8001f4e <HAL_SPI_TransmitReceive+0x2cc>
 8001f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d103      	bne.n	8001f56 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f54:	e029      	b.n	8001faa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1a2      	bne.n	8001ea6 <HAL_SPI_TransmitReceive+0x224>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d19d      	bne.n	8001ea6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 f904 	bl	800217c <SPI_EndRxTxTransaction>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d006      	beq.n	8001f88 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001f86:	e010      	b.n	8001faa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	e000      	b.n	8001faa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001fa8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3730      	adds	r7, #48	; 0x30
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001fd8:	f7fe fcba 	bl	8000950 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001fe8:	f7fe fcb2 	bl	8000950 <HAL_GetTick>
 8001fec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001fee:	4b39      	ldr	r3, [pc, #228]	; (80020d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	015b      	lsls	r3, r3, #5
 8001ff4:	0d1b      	lsrs	r3, r3, #20
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	fb02 f303 	mul.w	r3, r2, r3
 8001ffc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ffe:	e054      	b.n	80020aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002006:	d050      	beq.n	80020aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002008:	f7fe fca2 	bl	8000950 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	429a      	cmp	r2, r3
 8002016:	d902      	bls.n	800201e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d13d      	bne.n	800209a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800202c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002036:	d111      	bne.n	800205c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002040:	d004      	beq.n	800204c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204a:	d107      	bne.n	800205c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800205a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002064:	d10f      	bne.n	8002086 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002084:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e017      	b.n	80020ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4013      	ands	r3, r2
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	bf0c      	ite	eq
 80020ba:	2301      	moveq	r3, #1
 80020bc:	2300      	movne	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d19b      	bne.n	8002000 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3720      	adds	r7, #32
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000000 	.word	0x20000000

080020d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af02      	add	r7, sp, #8
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020ec:	d111      	bne.n	8002112 <SPI_EndRxTransaction+0x3a>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020f6:	d004      	beq.n	8002102 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002100:	d107      	bne.n	8002112 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002110:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800211a:	d117      	bne.n	800214c <SPI_EndRxTransaction+0x74>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002124:	d112      	bne.n	800214c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2200      	movs	r2, #0
 800212e:	2101      	movs	r1, #1
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f7ff ff49 	bl	8001fc8 <SPI_WaitFlagStateUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01a      	beq.n	8002172 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f043 0220 	orr.w	r2, r3, #32
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e013      	b.n	8002174 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2200      	movs	r2, #0
 8002154:	2180      	movs	r1, #128	; 0x80
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f7ff ff36 	bl	8001fc8 <SPI_WaitFlagStateUntilTimeout>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002166:	f043 0220 	orr.w	r2, r3, #32
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e000      	b.n	8002174 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af02      	add	r7, sp, #8
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2200      	movs	r2, #0
 8002190:	2180      	movs	r1, #128	; 0x80
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f7ff ff18 	bl	8001fc8 <SPI_WaitFlagStateUntilTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d007      	beq.n	80021ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a2:	f043 0220 	orr.w	r2, r3, #32
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e000      	b.n	80021b0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e03f      	b.n	800224a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d106      	bne.n	80021e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe f92e 	bl	8000440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2224      	movs	r2, #36	; 0x24
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f905 	bl	800240c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b08a      	sub	sp, #40	; 0x28
 8002256:	af02      	add	r7, sp, #8
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4613      	mov	r3, r2
 8002260:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b20      	cmp	r3, #32
 8002270:	d17c      	bne.n	800236c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <HAL_UART_Transmit+0x2c>
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e075      	b.n	800236e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_UART_Transmit+0x3e>
 800228c:	2302      	movs	r3, #2
 800228e:	e06e      	b.n	800236e <HAL_UART_Transmit+0x11c>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2221      	movs	r2, #33	; 0x21
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022a6:	f7fe fb53 	bl	8000950 <HAL_GetTick>
 80022aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	88fa      	ldrh	r2, [r7, #6]
 80022b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	88fa      	ldrh	r2, [r7, #6]
 80022b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c0:	d108      	bne.n	80022d4 <HAL_UART_Transmit+0x82>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d104      	bne.n	80022d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	e003      	b.n	80022dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022e4:	e02a      	b.n	800233c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2200      	movs	r2, #0
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f840 	bl	8002376 <UART_WaitOnFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e036      	b.n	800236e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10b      	bne.n	800231e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002314:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	3302      	adds	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	e007      	b.n	800232e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	781a      	ldrb	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	3301      	adds	r3, #1
 800232c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1cf      	bne.n	80022e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2200      	movs	r2, #0
 800234e:	2140      	movs	r1, #64	; 0x40
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f810 	bl	8002376 <UART_WaitOnFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e006      	b.n	800236e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	e000      	b.n	800236e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800236c:	2302      	movs	r3, #2
  }
}
 800236e:	4618      	mov	r0, r3
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	4613      	mov	r3, r2
 8002384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002386:	e02c      	b.n	80023e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800238e:	d028      	beq.n	80023e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d007      	beq.n	80023a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002396:	f7fe fadb 	bl	8000950 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d21d      	bcs.n	80023e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e00f      	b.n	8002402 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4013      	ands	r3, r2
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	bf0c      	ite	eq
 80023f2:	2301      	moveq	r3, #1
 80023f4:	2300      	movne	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d0c3      	beq.n	8002388 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002446:	f023 030c 	bic.w	r3, r3, #12
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	430b      	orrs	r3, r1
 8002452:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a2c      	ldr	r2, [pc, #176]	; (8002520 <UART_SetConfig+0x114>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d103      	bne.n	800247c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002474:	f7ff f902 	bl	800167c <HAL_RCC_GetPCLK2Freq>
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	e002      	b.n	8002482 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800247c:	f7ff f8ea 	bl	8001654 <HAL_RCC_GetPCLK1Freq>
 8002480:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	009a      	lsls	r2, r3, #2
 800248c:	441a      	add	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	fbb2 f3f3 	udiv	r3, r2, r3
 8002498:	4a22      	ldr	r2, [pc, #136]	; (8002524 <UART_SetConfig+0x118>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	0119      	lsls	r1, r3, #4
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	009a      	lsls	r2, r3, #2
 80024ac:	441a      	add	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024b8:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <UART_SetConfig+0x118>)
 80024ba:	fba3 0302 	umull	r0, r3, r3, r2
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	2064      	movs	r0, #100	; 0x64
 80024c2:	fb00 f303 	mul.w	r3, r0, r3
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	3332      	adds	r3, #50	; 0x32
 80024cc:	4a15      	ldr	r2, [pc, #84]	; (8002524 <UART_SetConfig+0x118>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024d8:	4419      	add	r1, r3
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	009a      	lsls	r2, r3, #2
 80024e4:	441a      	add	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <UART_SetConfig+0x118>)
 80024f2:	fba3 0302 	umull	r0, r3, r3, r2
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	2064      	movs	r0, #100	; 0x64
 80024fa:	fb00 f303 	mul.w	r3, r0, r3
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	3332      	adds	r3, #50	; 0x32
 8002504:	4a07      	ldr	r2, [pc, #28]	; (8002524 <UART_SetConfig+0x118>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	f003 020f 	and.w	r2, r3, #15
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	440a      	add	r2, r1
 8002516:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40013800 	.word	0x40013800
 8002524:	51eb851f 	.word	0x51eb851f

08002528 <__errno>:
 8002528:	4b01      	ldr	r3, [pc, #4]	; (8002530 <__errno+0x8>)
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	2000000c 	.word	0x2000000c

08002534 <__libc_init_array>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	2600      	movs	r6, #0
 8002538:	4d0c      	ldr	r5, [pc, #48]	; (800256c <__libc_init_array+0x38>)
 800253a:	4c0d      	ldr	r4, [pc, #52]	; (8002570 <__libc_init_array+0x3c>)
 800253c:	1b64      	subs	r4, r4, r5
 800253e:	10a4      	asrs	r4, r4, #2
 8002540:	42a6      	cmp	r6, r4
 8002542:	d109      	bne.n	8002558 <__libc_init_array+0x24>
 8002544:	f000 fc9c 	bl	8002e80 <_init>
 8002548:	2600      	movs	r6, #0
 800254a:	4d0a      	ldr	r5, [pc, #40]	; (8002574 <__libc_init_array+0x40>)
 800254c:	4c0a      	ldr	r4, [pc, #40]	; (8002578 <__libc_init_array+0x44>)
 800254e:	1b64      	subs	r4, r4, r5
 8002550:	10a4      	asrs	r4, r4, #2
 8002552:	42a6      	cmp	r6, r4
 8002554:	d105      	bne.n	8002562 <__libc_init_array+0x2e>
 8002556:	bd70      	pop	{r4, r5, r6, pc}
 8002558:	f855 3b04 	ldr.w	r3, [r5], #4
 800255c:	4798      	blx	r3
 800255e:	3601      	adds	r6, #1
 8002560:	e7ee      	b.n	8002540 <__libc_init_array+0xc>
 8002562:	f855 3b04 	ldr.w	r3, [r5], #4
 8002566:	4798      	blx	r3
 8002568:	3601      	adds	r6, #1
 800256a:	e7f2      	b.n	8002552 <__libc_init_array+0x1e>
 800256c:	080030c8 	.word	0x080030c8
 8002570:	080030c8 	.word	0x080030c8
 8002574:	080030c8 	.word	0x080030c8
 8002578:	080030cc 	.word	0x080030cc

0800257c <memset>:
 800257c:	4603      	mov	r3, r0
 800257e:	4402      	add	r2, r0
 8002580:	4293      	cmp	r3, r2
 8002582:	d100      	bne.n	8002586 <memset+0xa>
 8002584:	4770      	bx	lr
 8002586:	f803 1b01 	strb.w	r1, [r3], #1
 800258a:	e7f9      	b.n	8002580 <memset+0x4>

0800258c <siprintf>:
 800258c:	b40e      	push	{r1, r2, r3}
 800258e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002592:	b500      	push	{lr}
 8002594:	b09c      	sub	sp, #112	; 0x70
 8002596:	ab1d      	add	r3, sp, #116	; 0x74
 8002598:	9002      	str	r0, [sp, #8]
 800259a:	9006      	str	r0, [sp, #24]
 800259c:	9107      	str	r1, [sp, #28]
 800259e:	9104      	str	r1, [sp, #16]
 80025a0:	4808      	ldr	r0, [pc, #32]	; (80025c4 <siprintf+0x38>)
 80025a2:	4909      	ldr	r1, [pc, #36]	; (80025c8 <siprintf+0x3c>)
 80025a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80025a8:	9105      	str	r1, [sp, #20]
 80025aa:	6800      	ldr	r0, [r0, #0]
 80025ac:	a902      	add	r1, sp, #8
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	f000 f868 	bl	8002684 <_svfiprintf_r>
 80025b4:	2200      	movs	r2, #0
 80025b6:	9b02      	ldr	r3, [sp, #8]
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	b01c      	add	sp, #112	; 0x70
 80025bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80025c0:	b003      	add	sp, #12
 80025c2:	4770      	bx	lr
 80025c4:	2000000c 	.word	0x2000000c
 80025c8:	ffff0208 	.word	0xffff0208

080025cc <__ssputs_r>:
 80025cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025d0:	688e      	ldr	r6, [r1, #8]
 80025d2:	4682      	mov	sl, r0
 80025d4:	429e      	cmp	r6, r3
 80025d6:	460c      	mov	r4, r1
 80025d8:	4690      	mov	r8, r2
 80025da:	461f      	mov	r7, r3
 80025dc:	d838      	bhi.n	8002650 <__ssputs_r+0x84>
 80025de:	898a      	ldrh	r2, [r1, #12]
 80025e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80025e4:	d032      	beq.n	800264c <__ssputs_r+0x80>
 80025e6:	6825      	ldr	r5, [r4, #0]
 80025e8:	6909      	ldr	r1, [r1, #16]
 80025ea:	3301      	adds	r3, #1
 80025ec:	eba5 0901 	sub.w	r9, r5, r1
 80025f0:	6965      	ldr	r5, [r4, #20]
 80025f2:	444b      	add	r3, r9
 80025f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80025f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80025fc:	106d      	asrs	r5, r5, #1
 80025fe:	429d      	cmp	r5, r3
 8002600:	bf38      	it	cc
 8002602:	461d      	movcc	r5, r3
 8002604:	0553      	lsls	r3, r2, #21
 8002606:	d531      	bpl.n	800266c <__ssputs_r+0xa0>
 8002608:	4629      	mov	r1, r5
 800260a:	f000 fb6f 	bl	8002cec <_malloc_r>
 800260e:	4606      	mov	r6, r0
 8002610:	b950      	cbnz	r0, 8002628 <__ssputs_r+0x5c>
 8002612:	230c      	movs	r3, #12
 8002614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002618:	f8ca 3000 	str.w	r3, [sl]
 800261c:	89a3      	ldrh	r3, [r4, #12]
 800261e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002622:	81a3      	strh	r3, [r4, #12]
 8002624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002628:	464a      	mov	r2, r9
 800262a:	6921      	ldr	r1, [r4, #16]
 800262c:	f000 face 	bl	8002bcc <memcpy>
 8002630:	89a3      	ldrh	r3, [r4, #12]
 8002632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800263a:	81a3      	strh	r3, [r4, #12]
 800263c:	6126      	str	r6, [r4, #16]
 800263e:	444e      	add	r6, r9
 8002640:	6026      	str	r6, [r4, #0]
 8002642:	463e      	mov	r6, r7
 8002644:	6165      	str	r5, [r4, #20]
 8002646:	eba5 0509 	sub.w	r5, r5, r9
 800264a:	60a5      	str	r5, [r4, #8]
 800264c:	42be      	cmp	r6, r7
 800264e:	d900      	bls.n	8002652 <__ssputs_r+0x86>
 8002650:	463e      	mov	r6, r7
 8002652:	4632      	mov	r2, r6
 8002654:	4641      	mov	r1, r8
 8002656:	6820      	ldr	r0, [r4, #0]
 8002658:	f000 fac6 	bl	8002be8 <memmove>
 800265c:	68a3      	ldr	r3, [r4, #8]
 800265e:	2000      	movs	r0, #0
 8002660:	1b9b      	subs	r3, r3, r6
 8002662:	60a3      	str	r3, [r4, #8]
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	4433      	add	r3, r6
 8002668:	6023      	str	r3, [r4, #0]
 800266a:	e7db      	b.n	8002624 <__ssputs_r+0x58>
 800266c:	462a      	mov	r2, r5
 800266e:	f000 fbb1 	bl	8002dd4 <_realloc_r>
 8002672:	4606      	mov	r6, r0
 8002674:	2800      	cmp	r0, #0
 8002676:	d1e1      	bne.n	800263c <__ssputs_r+0x70>
 8002678:	4650      	mov	r0, sl
 800267a:	6921      	ldr	r1, [r4, #16]
 800267c:	f000 face 	bl	8002c1c <_free_r>
 8002680:	e7c7      	b.n	8002612 <__ssputs_r+0x46>
	...

08002684 <_svfiprintf_r>:
 8002684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002688:	4698      	mov	r8, r3
 800268a:	898b      	ldrh	r3, [r1, #12]
 800268c:	4607      	mov	r7, r0
 800268e:	061b      	lsls	r3, r3, #24
 8002690:	460d      	mov	r5, r1
 8002692:	4614      	mov	r4, r2
 8002694:	b09d      	sub	sp, #116	; 0x74
 8002696:	d50e      	bpl.n	80026b6 <_svfiprintf_r+0x32>
 8002698:	690b      	ldr	r3, [r1, #16]
 800269a:	b963      	cbnz	r3, 80026b6 <_svfiprintf_r+0x32>
 800269c:	2140      	movs	r1, #64	; 0x40
 800269e:	f000 fb25 	bl	8002cec <_malloc_r>
 80026a2:	6028      	str	r0, [r5, #0]
 80026a4:	6128      	str	r0, [r5, #16]
 80026a6:	b920      	cbnz	r0, 80026b2 <_svfiprintf_r+0x2e>
 80026a8:	230c      	movs	r3, #12
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026b0:	e0d1      	b.n	8002856 <_svfiprintf_r+0x1d2>
 80026b2:	2340      	movs	r3, #64	; 0x40
 80026b4:	616b      	str	r3, [r5, #20]
 80026b6:	2300      	movs	r3, #0
 80026b8:	9309      	str	r3, [sp, #36]	; 0x24
 80026ba:	2320      	movs	r3, #32
 80026bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80026c0:	2330      	movs	r3, #48	; 0x30
 80026c2:	f04f 0901 	mov.w	r9, #1
 80026c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80026ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002870 <_svfiprintf_r+0x1ec>
 80026ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80026d2:	4623      	mov	r3, r4
 80026d4:	469a      	mov	sl, r3
 80026d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026da:	b10a      	cbz	r2, 80026e0 <_svfiprintf_r+0x5c>
 80026dc:	2a25      	cmp	r2, #37	; 0x25
 80026de:	d1f9      	bne.n	80026d4 <_svfiprintf_r+0x50>
 80026e0:	ebba 0b04 	subs.w	fp, sl, r4
 80026e4:	d00b      	beq.n	80026fe <_svfiprintf_r+0x7a>
 80026e6:	465b      	mov	r3, fp
 80026e8:	4622      	mov	r2, r4
 80026ea:	4629      	mov	r1, r5
 80026ec:	4638      	mov	r0, r7
 80026ee:	f7ff ff6d 	bl	80025cc <__ssputs_r>
 80026f2:	3001      	adds	r0, #1
 80026f4:	f000 80aa 	beq.w	800284c <_svfiprintf_r+0x1c8>
 80026f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026fa:	445a      	add	r2, fp
 80026fc:	9209      	str	r2, [sp, #36]	; 0x24
 80026fe:	f89a 3000 	ldrb.w	r3, [sl]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 80a2 	beq.w	800284c <_svfiprintf_r+0x1c8>
 8002708:	2300      	movs	r3, #0
 800270a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800270e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002712:	f10a 0a01 	add.w	sl, sl, #1
 8002716:	9304      	str	r3, [sp, #16]
 8002718:	9307      	str	r3, [sp, #28]
 800271a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800271e:	931a      	str	r3, [sp, #104]	; 0x68
 8002720:	4654      	mov	r4, sl
 8002722:	2205      	movs	r2, #5
 8002724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002728:	4851      	ldr	r0, [pc, #324]	; (8002870 <_svfiprintf_r+0x1ec>)
 800272a:	f000 fa41 	bl	8002bb0 <memchr>
 800272e:	9a04      	ldr	r2, [sp, #16]
 8002730:	b9d8      	cbnz	r0, 800276a <_svfiprintf_r+0xe6>
 8002732:	06d0      	lsls	r0, r2, #27
 8002734:	bf44      	itt	mi
 8002736:	2320      	movmi	r3, #32
 8002738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800273c:	0711      	lsls	r1, r2, #28
 800273e:	bf44      	itt	mi
 8002740:	232b      	movmi	r3, #43	; 0x2b
 8002742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002746:	f89a 3000 	ldrb.w	r3, [sl]
 800274a:	2b2a      	cmp	r3, #42	; 0x2a
 800274c:	d015      	beq.n	800277a <_svfiprintf_r+0xf6>
 800274e:	4654      	mov	r4, sl
 8002750:	2000      	movs	r0, #0
 8002752:	f04f 0c0a 	mov.w	ip, #10
 8002756:	9a07      	ldr	r2, [sp, #28]
 8002758:	4621      	mov	r1, r4
 800275a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800275e:	3b30      	subs	r3, #48	; 0x30
 8002760:	2b09      	cmp	r3, #9
 8002762:	d94e      	bls.n	8002802 <_svfiprintf_r+0x17e>
 8002764:	b1b0      	cbz	r0, 8002794 <_svfiprintf_r+0x110>
 8002766:	9207      	str	r2, [sp, #28]
 8002768:	e014      	b.n	8002794 <_svfiprintf_r+0x110>
 800276a:	eba0 0308 	sub.w	r3, r0, r8
 800276e:	fa09 f303 	lsl.w	r3, r9, r3
 8002772:	4313      	orrs	r3, r2
 8002774:	46a2      	mov	sl, r4
 8002776:	9304      	str	r3, [sp, #16]
 8002778:	e7d2      	b.n	8002720 <_svfiprintf_r+0x9c>
 800277a:	9b03      	ldr	r3, [sp, #12]
 800277c:	1d19      	adds	r1, r3, #4
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	9103      	str	r1, [sp, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	bfbb      	ittet	lt
 8002786:	425b      	neglt	r3, r3
 8002788:	f042 0202 	orrlt.w	r2, r2, #2
 800278c:	9307      	strge	r3, [sp, #28]
 800278e:	9307      	strlt	r3, [sp, #28]
 8002790:	bfb8      	it	lt
 8002792:	9204      	strlt	r2, [sp, #16]
 8002794:	7823      	ldrb	r3, [r4, #0]
 8002796:	2b2e      	cmp	r3, #46	; 0x2e
 8002798:	d10c      	bne.n	80027b4 <_svfiprintf_r+0x130>
 800279a:	7863      	ldrb	r3, [r4, #1]
 800279c:	2b2a      	cmp	r3, #42	; 0x2a
 800279e:	d135      	bne.n	800280c <_svfiprintf_r+0x188>
 80027a0:	9b03      	ldr	r3, [sp, #12]
 80027a2:	3402      	adds	r4, #2
 80027a4:	1d1a      	adds	r2, r3, #4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	9203      	str	r2, [sp, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bfb8      	it	lt
 80027ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80027b2:	9305      	str	r3, [sp, #20]
 80027b4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002874 <_svfiprintf_r+0x1f0>
 80027b8:	2203      	movs	r2, #3
 80027ba:	4650      	mov	r0, sl
 80027bc:	7821      	ldrb	r1, [r4, #0]
 80027be:	f000 f9f7 	bl	8002bb0 <memchr>
 80027c2:	b140      	cbz	r0, 80027d6 <_svfiprintf_r+0x152>
 80027c4:	2340      	movs	r3, #64	; 0x40
 80027c6:	eba0 000a 	sub.w	r0, r0, sl
 80027ca:	fa03 f000 	lsl.w	r0, r3, r0
 80027ce:	9b04      	ldr	r3, [sp, #16]
 80027d0:	3401      	adds	r4, #1
 80027d2:	4303      	orrs	r3, r0
 80027d4:	9304      	str	r3, [sp, #16]
 80027d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027da:	2206      	movs	r2, #6
 80027dc:	4826      	ldr	r0, [pc, #152]	; (8002878 <_svfiprintf_r+0x1f4>)
 80027de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80027e2:	f000 f9e5 	bl	8002bb0 <memchr>
 80027e6:	2800      	cmp	r0, #0
 80027e8:	d038      	beq.n	800285c <_svfiprintf_r+0x1d8>
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <_svfiprintf_r+0x1f8>)
 80027ec:	bb1b      	cbnz	r3, 8002836 <_svfiprintf_r+0x1b2>
 80027ee:	9b03      	ldr	r3, [sp, #12]
 80027f0:	3307      	adds	r3, #7
 80027f2:	f023 0307 	bic.w	r3, r3, #7
 80027f6:	3308      	adds	r3, #8
 80027f8:	9303      	str	r3, [sp, #12]
 80027fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027fc:	4433      	add	r3, r6
 80027fe:	9309      	str	r3, [sp, #36]	; 0x24
 8002800:	e767      	b.n	80026d2 <_svfiprintf_r+0x4e>
 8002802:	460c      	mov	r4, r1
 8002804:	2001      	movs	r0, #1
 8002806:	fb0c 3202 	mla	r2, ip, r2, r3
 800280a:	e7a5      	b.n	8002758 <_svfiprintf_r+0xd4>
 800280c:	2300      	movs	r3, #0
 800280e:	f04f 0c0a 	mov.w	ip, #10
 8002812:	4619      	mov	r1, r3
 8002814:	3401      	adds	r4, #1
 8002816:	9305      	str	r3, [sp, #20]
 8002818:	4620      	mov	r0, r4
 800281a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800281e:	3a30      	subs	r2, #48	; 0x30
 8002820:	2a09      	cmp	r2, #9
 8002822:	d903      	bls.n	800282c <_svfiprintf_r+0x1a8>
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0c5      	beq.n	80027b4 <_svfiprintf_r+0x130>
 8002828:	9105      	str	r1, [sp, #20]
 800282a:	e7c3      	b.n	80027b4 <_svfiprintf_r+0x130>
 800282c:	4604      	mov	r4, r0
 800282e:	2301      	movs	r3, #1
 8002830:	fb0c 2101 	mla	r1, ip, r1, r2
 8002834:	e7f0      	b.n	8002818 <_svfiprintf_r+0x194>
 8002836:	ab03      	add	r3, sp, #12
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	462a      	mov	r2, r5
 800283c:	4638      	mov	r0, r7
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <_svfiprintf_r+0x1fc>)
 8002840:	a904      	add	r1, sp, #16
 8002842:	f3af 8000 	nop.w
 8002846:	1c42      	adds	r2, r0, #1
 8002848:	4606      	mov	r6, r0
 800284a:	d1d6      	bne.n	80027fa <_svfiprintf_r+0x176>
 800284c:	89ab      	ldrh	r3, [r5, #12]
 800284e:	065b      	lsls	r3, r3, #25
 8002850:	f53f af2c 	bmi.w	80026ac <_svfiprintf_r+0x28>
 8002854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002856:	b01d      	add	sp, #116	; 0x74
 8002858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800285c:	ab03      	add	r3, sp, #12
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	462a      	mov	r2, r5
 8002862:	4638      	mov	r0, r7
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <_svfiprintf_r+0x1fc>)
 8002866:	a904      	add	r1, sp, #16
 8002868:	f000 f87c 	bl	8002964 <_printf_i>
 800286c:	e7eb      	b.n	8002846 <_svfiprintf_r+0x1c2>
 800286e:	bf00      	nop
 8002870:	08003094 	.word	0x08003094
 8002874:	0800309a 	.word	0x0800309a
 8002878:	0800309e 	.word	0x0800309e
 800287c:	00000000 	.word	0x00000000
 8002880:	080025cd 	.word	0x080025cd

08002884 <_printf_common>:
 8002884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002888:	4616      	mov	r6, r2
 800288a:	4699      	mov	r9, r3
 800288c:	688a      	ldr	r2, [r1, #8]
 800288e:	690b      	ldr	r3, [r1, #16]
 8002890:	4607      	mov	r7, r0
 8002892:	4293      	cmp	r3, r2
 8002894:	bfb8      	it	lt
 8002896:	4613      	movlt	r3, r2
 8002898:	6033      	str	r3, [r6, #0]
 800289a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800289e:	460c      	mov	r4, r1
 80028a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028a4:	b10a      	cbz	r2, 80028aa <_printf_common+0x26>
 80028a6:	3301      	adds	r3, #1
 80028a8:	6033      	str	r3, [r6, #0]
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	0699      	lsls	r1, r3, #26
 80028ae:	bf42      	ittt	mi
 80028b0:	6833      	ldrmi	r3, [r6, #0]
 80028b2:	3302      	addmi	r3, #2
 80028b4:	6033      	strmi	r3, [r6, #0]
 80028b6:	6825      	ldr	r5, [r4, #0]
 80028b8:	f015 0506 	ands.w	r5, r5, #6
 80028bc:	d106      	bne.n	80028cc <_printf_common+0x48>
 80028be:	f104 0a19 	add.w	sl, r4, #25
 80028c2:	68e3      	ldr	r3, [r4, #12]
 80028c4:	6832      	ldr	r2, [r6, #0]
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	42ab      	cmp	r3, r5
 80028ca:	dc28      	bgt.n	800291e <_printf_common+0x9a>
 80028cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80028d0:	1e13      	subs	r3, r2, #0
 80028d2:	6822      	ldr	r2, [r4, #0]
 80028d4:	bf18      	it	ne
 80028d6:	2301      	movne	r3, #1
 80028d8:	0692      	lsls	r2, r2, #26
 80028da:	d42d      	bmi.n	8002938 <_printf_common+0xb4>
 80028dc:	4649      	mov	r1, r9
 80028de:	4638      	mov	r0, r7
 80028e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028e4:	47c0      	blx	r8
 80028e6:	3001      	adds	r0, #1
 80028e8:	d020      	beq.n	800292c <_printf_common+0xa8>
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	68e5      	ldr	r5, [r4, #12]
 80028ee:	f003 0306 	and.w	r3, r3, #6
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	bf18      	it	ne
 80028f6:	2500      	movne	r5, #0
 80028f8:	6832      	ldr	r2, [r6, #0]
 80028fa:	f04f 0600 	mov.w	r6, #0
 80028fe:	68a3      	ldr	r3, [r4, #8]
 8002900:	bf08      	it	eq
 8002902:	1aad      	subeq	r5, r5, r2
 8002904:	6922      	ldr	r2, [r4, #16]
 8002906:	bf08      	it	eq
 8002908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800290c:	4293      	cmp	r3, r2
 800290e:	bfc4      	itt	gt
 8002910:	1a9b      	subgt	r3, r3, r2
 8002912:	18ed      	addgt	r5, r5, r3
 8002914:	341a      	adds	r4, #26
 8002916:	42b5      	cmp	r5, r6
 8002918:	d11a      	bne.n	8002950 <_printf_common+0xcc>
 800291a:	2000      	movs	r0, #0
 800291c:	e008      	b.n	8002930 <_printf_common+0xac>
 800291e:	2301      	movs	r3, #1
 8002920:	4652      	mov	r2, sl
 8002922:	4649      	mov	r1, r9
 8002924:	4638      	mov	r0, r7
 8002926:	47c0      	blx	r8
 8002928:	3001      	adds	r0, #1
 800292a:	d103      	bne.n	8002934 <_printf_common+0xb0>
 800292c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002934:	3501      	adds	r5, #1
 8002936:	e7c4      	b.n	80028c2 <_printf_common+0x3e>
 8002938:	2030      	movs	r0, #48	; 0x30
 800293a:	18e1      	adds	r1, r4, r3
 800293c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002946:	4422      	add	r2, r4
 8002948:	3302      	adds	r3, #2
 800294a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800294e:	e7c5      	b.n	80028dc <_printf_common+0x58>
 8002950:	2301      	movs	r3, #1
 8002952:	4622      	mov	r2, r4
 8002954:	4649      	mov	r1, r9
 8002956:	4638      	mov	r0, r7
 8002958:	47c0      	blx	r8
 800295a:	3001      	adds	r0, #1
 800295c:	d0e6      	beq.n	800292c <_printf_common+0xa8>
 800295e:	3601      	adds	r6, #1
 8002960:	e7d9      	b.n	8002916 <_printf_common+0x92>
	...

08002964 <_printf_i>:
 8002964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002968:	7e0f      	ldrb	r7, [r1, #24]
 800296a:	4691      	mov	r9, r2
 800296c:	2f78      	cmp	r7, #120	; 0x78
 800296e:	4680      	mov	r8, r0
 8002970:	460c      	mov	r4, r1
 8002972:	469a      	mov	sl, r3
 8002974:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002976:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800297a:	d807      	bhi.n	800298c <_printf_i+0x28>
 800297c:	2f62      	cmp	r7, #98	; 0x62
 800297e:	d80a      	bhi.n	8002996 <_printf_i+0x32>
 8002980:	2f00      	cmp	r7, #0
 8002982:	f000 80d9 	beq.w	8002b38 <_printf_i+0x1d4>
 8002986:	2f58      	cmp	r7, #88	; 0x58
 8002988:	f000 80a4 	beq.w	8002ad4 <_printf_i+0x170>
 800298c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002994:	e03a      	b.n	8002a0c <_printf_i+0xa8>
 8002996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800299a:	2b15      	cmp	r3, #21
 800299c:	d8f6      	bhi.n	800298c <_printf_i+0x28>
 800299e:	a101      	add	r1, pc, #4	; (adr r1, 80029a4 <_printf_i+0x40>)
 80029a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029a4:	080029fd 	.word	0x080029fd
 80029a8:	08002a11 	.word	0x08002a11
 80029ac:	0800298d 	.word	0x0800298d
 80029b0:	0800298d 	.word	0x0800298d
 80029b4:	0800298d 	.word	0x0800298d
 80029b8:	0800298d 	.word	0x0800298d
 80029bc:	08002a11 	.word	0x08002a11
 80029c0:	0800298d 	.word	0x0800298d
 80029c4:	0800298d 	.word	0x0800298d
 80029c8:	0800298d 	.word	0x0800298d
 80029cc:	0800298d 	.word	0x0800298d
 80029d0:	08002b1f 	.word	0x08002b1f
 80029d4:	08002a41 	.word	0x08002a41
 80029d8:	08002b01 	.word	0x08002b01
 80029dc:	0800298d 	.word	0x0800298d
 80029e0:	0800298d 	.word	0x0800298d
 80029e4:	08002b41 	.word	0x08002b41
 80029e8:	0800298d 	.word	0x0800298d
 80029ec:	08002a41 	.word	0x08002a41
 80029f0:	0800298d 	.word	0x0800298d
 80029f4:	0800298d 	.word	0x0800298d
 80029f8:	08002b09 	.word	0x08002b09
 80029fc:	682b      	ldr	r3, [r5, #0]
 80029fe:	1d1a      	adds	r2, r3, #4
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	602a      	str	r2, [r5, #0]
 8002a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0a4      	b.n	8002b5a <_printf_i+0x1f6>
 8002a10:	6820      	ldr	r0, [r4, #0]
 8002a12:	6829      	ldr	r1, [r5, #0]
 8002a14:	0606      	lsls	r6, r0, #24
 8002a16:	f101 0304 	add.w	r3, r1, #4
 8002a1a:	d50a      	bpl.n	8002a32 <_printf_i+0xce>
 8002a1c:	680e      	ldr	r6, [r1, #0]
 8002a1e:	602b      	str	r3, [r5, #0]
 8002a20:	2e00      	cmp	r6, #0
 8002a22:	da03      	bge.n	8002a2c <_printf_i+0xc8>
 8002a24:	232d      	movs	r3, #45	; 0x2d
 8002a26:	4276      	negs	r6, r6
 8002a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a2c:	230a      	movs	r3, #10
 8002a2e:	485e      	ldr	r0, [pc, #376]	; (8002ba8 <_printf_i+0x244>)
 8002a30:	e019      	b.n	8002a66 <_printf_i+0x102>
 8002a32:	680e      	ldr	r6, [r1, #0]
 8002a34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a38:	602b      	str	r3, [r5, #0]
 8002a3a:	bf18      	it	ne
 8002a3c:	b236      	sxthne	r6, r6
 8002a3e:	e7ef      	b.n	8002a20 <_printf_i+0xbc>
 8002a40:	682b      	ldr	r3, [r5, #0]
 8002a42:	6820      	ldr	r0, [r4, #0]
 8002a44:	1d19      	adds	r1, r3, #4
 8002a46:	6029      	str	r1, [r5, #0]
 8002a48:	0601      	lsls	r1, r0, #24
 8002a4a:	d501      	bpl.n	8002a50 <_printf_i+0xec>
 8002a4c:	681e      	ldr	r6, [r3, #0]
 8002a4e:	e002      	b.n	8002a56 <_printf_i+0xf2>
 8002a50:	0646      	lsls	r6, r0, #25
 8002a52:	d5fb      	bpl.n	8002a4c <_printf_i+0xe8>
 8002a54:	881e      	ldrh	r6, [r3, #0]
 8002a56:	2f6f      	cmp	r7, #111	; 0x6f
 8002a58:	bf0c      	ite	eq
 8002a5a:	2308      	moveq	r3, #8
 8002a5c:	230a      	movne	r3, #10
 8002a5e:	4852      	ldr	r0, [pc, #328]	; (8002ba8 <_printf_i+0x244>)
 8002a60:	2100      	movs	r1, #0
 8002a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a66:	6865      	ldr	r5, [r4, #4]
 8002a68:	2d00      	cmp	r5, #0
 8002a6a:	bfa8      	it	ge
 8002a6c:	6821      	ldrge	r1, [r4, #0]
 8002a6e:	60a5      	str	r5, [r4, #8]
 8002a70:	bfa4      	itt	ge
 8002a72:	f021 0104 	bicge.w	r1, r1, #4
 8002a76:	6021      	strge	r1, [r4, #0]
 8002a78:	b90e      	cbnz	r6, 8002a7e <_printf_i+0x11a>
 8002a7a:	2d00      	cmp	r5, #0
 8002a7c:	d04d      	beq.n	8002b1a <_printf_i+0x1b6>
 8002a7e:	4615      	mov	r5, r2
 8002a80:	fbb6 f1f3 	udiv	r1, r6, r3
 8002a84:	fb03 6711 	mls	r7, r3, r1, r6
 8002a88:	5dc7      	ldrb	r7, [r0, r7]
 8002a8a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a8e:	4637      	mov	r7, r6
 8002a90:	42bb      	cmp	r3, r7
 8002a92:	460e      	mov	r6, r1
 8002a94:	d9f4      	bls.n	8002a80 <_printf_i+0x11c>
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d10b      	bne.n	8002ab2 <_printf_i+0x14e>
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	07de      	lsls	r6, r3, #31
 8002a9e:	d508      	bpl.n	8002ab2 <_printf_i+0x14e>
 8002aa0:	6923      	ldr	r3, [r4, #16]
 8002aa2:	6861      	ldr	r1, [r4, #4]
 8002aa4:	4299      	cmp	r1, r3
 8002aa6:	bfde      	ittt	le
 8002aa8:	2330      	movle	r3, #48	; 0x30
 8002aaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002aae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002ab2:	1b52      	subs	r2, r2, r5
 8002ab4:	6122      	str	r2, [r4, #16]
 8002ab6:	464b      	mov	r3, r9
 8002ab8:	4621      	mov	r1, r4
 8002aba:	4640      	mov	r0, r8
 8002abc:	f8cd a000 	str.w	sl, [sp]
 8002ac0:	aa03      	add	r2, sp, #12
 8002ac2:	f7ff fedf 	bl	8002884 <_printf_common>
 8002ac6:	3001      	adds	r0, #1
 8002ac8:	d14c      	bne.n	8002b64 <_printf_i+0x200>
 8002aca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ace:	b004      	add	sp, #16
 8002ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ad4:	4834      	ldr	r0, [pc, #208]	; (8002ba8 <_printf_i+0x244>)
 8002ad6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002ada:	6829      	ldr	r1, [r5, #0]
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	f851 6b04 	ldr.w	r6, [r1], #4
 8002ae2:	6029      	str	r1, [r5, #0]
 8002ae4:	061d      	lsls	r5, r3, #24
 8002ae6:	d514      	bpl.n	8002b12 <_printf_i+0x1ae>
 8002ae8:	07df      	lsls	r7, r3, #31
 8002aea:	bf44      	itt	mi
 8002aec:	f043 0320 	orrmi.w	r3, r3, #32
 8002af0:	6023      	strmi	r3, [r4, #0]
 8002af2:	b91e      	cbnz	r6, 8002afc <_printf_i+0x198>
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	f023 0320 	bic.w	r3, r3, #32
 8002afa:	6023      	str	r3, [r4, #0]
 8002afc:	2310      	movs	r3, #16
 8002afe:	e7af      	b.n	8002a60 <_printf_i+0xfc>
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	f043 0320 	orr.w	r3, r3, #32
 8002b06:	6023      	str	r3, [r4, #0]
 8002b08:	2378      	movs	r3, #120	; 0x78
 8002b0a:	4828      	ldr	r0, [pc, #160]	; (8002bac <_printf_i+0x248>)
 8002b0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b10:	e7e3      	b.n	8002ada <_printf_i+0x176>
 8002b12:	0659      	lsls	r1, r3, #25
 8002b14:	bf48      	it	mi
 8002b16:	b2b6      	uxthmi	r6, r6
 8002b18:	e7e6      	b.n	8002ae8 <_printf_i+0x184>
 8002b1a:	4615      	mov	r5, r2
 8002b1c:	e7bb      	b.n	8002a96 <_printf_i+0x132>
 8002b1e:	682b      	ldr	r3, [r5, #0]
 8002b20:	6826      	ldr	r6, [r4, #0]
 8002b22:	1d18      	adds	r0, r3, #4
 8002b24:	6961      	ldr	r1, [r4, #20]
 8002b26:	6028      	str	r0, [r5, #0]
 8002b28:	0635      	lsls	r5, r6, #24
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	d501      	bpl.n	8002b32 <_printf_i+0x1ce>
 8002b2e:	6019      	str	r1, [r3, #0]
 8002b30:	e002      	b.n	8002b38 <_printf_i+0x1d4>
 8002b32:	0670      	lsls	r0, r6, #25
 8002b34:	d5fb      	bpl.n	8002b2e <_printf_i+0x1ca>
 8002b36:	8019      	strh	r1, [r3, #0]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	4615      	mov	r5, r2
 8002b3c:	6123      	str	r3, [r4, #16]
 8002b3e:	e7ba      	b.n	8002ab6 <_printf_i+0x152>
 8002b40:	682b      	ldr	r3, [r5, #0]
 8002b42:	2100      	movs	r1, #0
 8002b44:	1d1a      	adds	r2, r3, #4
 8002b46:	602a      	str	r2, [r5, #0]
 8002b48:	681d      	ldr	r5, [r3, #0]
 8002b4a:	6862      	ldr	r2, [r4, #4]
 8002b4c:	4628      	mov	r0, r5
 8002b4e:	f000 f82f 	bl	8002bb0 <memchr>
 8002b52:	b108      	cbz	r0, 8002b58 <_printf_i+0x1f4>
 8002b54:	1b40      	subs	r0, r0, r5
 8002b56:	6060      	str	r0, [r4, #4]
 8002b58:	6863      	ldr	r3, [r4, #4]
 8002b5a:	6123      	str	r3, [r4, #16]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b62:	e7a8      	b.n	8002ab6 <_printf_i+0x152>
 8002b64:	462a      	mov	r2, r5
 8002b66:	4649      	mov	r1, r9
 8002b68:	4640      	mov	r0, r8
 8002b6a:	6923      	ldr	r3, [r4, #16]
 8002b6c:	47d0      	blx	sl
 8002b6e:	3001      	adds	r0, #1
 8002b70:	d0ab      	beq.n	8002aca <_printf_i+0x166>
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	079b      	lsls	r3, r3, #30
 8002b76:	d413      	bmi.n	8002ba0 <_printf_i+0x23c>
 8002b78:	68e0      	ldr	r0, [r4, #12]
 8002b7a:	9b03      	ldr	r3, [sp, #12]
 8002b7c:	4298      	cmp	r0, r3
 8002b7e:	bfb8      	it	lt
 8002b80:	4618      	movlt	r0, r3
 8002b82:	e7a4      	b.n	8002ace <_printf_i+0x16a>
 8002b84:	2301      	movs	r3, #1
 8002b86:	4632      	mov	r2, r6
 8002b88:	4649      	mov	r1, r9
 8002b8a:	4640      	mov	r0, r8
 8002b8c:	47d0      	blx	sl
 8002b8e:	3001      	adds	r0, #1
 8002b90:	d09b      	beq.n	8002aca <_printf_i+0x166>
 8002b92:	3501      	adds	r5, #1
 8002b94:	68e3      	ldr	r3, [r4, #12]
 8002b96:	9903      	ldr	r1, [sp, #12]
 8002b98:	1a5b      	subs	r3, r3, r1
 8002b9a:	42ab      	cmp	r3, r5
 8002b9c:	dcf2      	bgt.n	8002b84 <_printf_i+0x220>
 8002b9e:	e7eb      	b.n	8002b78 <_printf_i+0x214>
 8002ba0:	2500      	movs	r5, #0
 8002ba2:	f104 0619 	add.w	r6, r4, #25
 8002ba6:	e7f5      	b.n	8002b94 <_printf_i+0x230>
 8002ba8:	080030a5 	.word	0x080030a5
 8002bac:	080030b6 	.word	0x080030b6

08002bb0 <memchr>:
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	b510      	push	{r4, lr}
 8002bb4:	b2c9      	uxtb	r1, r1
 8002bb6:	4402      	add	r2, r0
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	d101      	bne.n	8002bc2 <memchr+0x12>
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	e003      	b.n	8002bca <memchr+0x1a>
 8002bc2:	7804      	ldrb	r4, [r0, #0]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	428c      	cmp	r4, r1
 8002bc8:	d1f6      	bne.n	8002bb8 <memchr+0x8>
 8002bca:	bd10      	pop	{r4, pc}

08002bcc <memcpy>:
 8002bcc:	440a      	add	r2, r1
 8002bce:	4291      	cmp	r1, r2
 8002bd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002bd4:	d100      	bne.n	8002bd8 <memcpy+0xc>
 8002bd6:	4770      	bx	lr
 8002bd8:	b510      	push	{r4, lr}
 8002bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bde:	4291      	cmp	r1, r2
 8002be0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002be4:	d1f9      	bne.n	8002bda <memcpy+0xe>
 8002be6:	bd10      	pop	{r4, pc}

08002be8 <memmove>:
 8002be8:	4288      	cmp	r0, r1
 8002bea:	b510      	push	{r4, lr}
 8002bec:	eb01 0402 	add.w	r4, r1, r2
 8002bf0:	d902      	bls.n	8002bf8 <memmove+0x10>
 8002bf2:	4284      	cmp	r4, r0
 8002bf4:	4623      	mov	r3, r4
 8002bf6:	d807      	bhi.n	8002c08 <memmove+0x20>
 8002bf8:	1e43      	subs	r3, r0, #1
 8002bfa:	42a1      	cmp	r1, r4
 8002bfc:	d008      	beq.n	8002c10 <memmove+0x28>
 8002bfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c06:	e7f8      	b.n	8002bfa <memmove+0x12>
 8002c08:	4601      	mov	r1, r0
 8002c0a:	4402      	add	r2, r0
 8002c0c:	428a      	cmp	r2, r1
 8002c0e:	d100      	bne.n	8002c12 <memmove+0x2a>
 8002c10:	bd10      	pop	{r4, pc}
 8002c12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002c16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002c1a:	e7f7      	b.n	8002c0c <memmove+0x24>

08002c1c <_free_r>:
 8002c1c:	b538      	push	{r3, r4, r5, lr}
 8002c1e:	4605      	mov	r5, r0
 8002c20:	2900      	cmp	r1, #0
 8002c22:	d040      	beq.n	8002ca6 <_free_r+0x8a>
 8002c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c28:	1f0c      	subs	r4, r1, #4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bfb8      	it	lt
 8002c2e:	18e4      	addlt	r4, r4, r3
 8002c30:	f000 f910 	bl	8002e54 <__malloc_lock>
 8002c34:	4a1c      	ldr	r2, [pc, #112]	; (8002ca8 <_free_r+0x8c>)
 8002c36:	6813      	ldr	r3, [r2, #0]
 8002c38:	b933      	cbnz	r3, 8002c48 <_free_r+0x2c>
 8002c3a:	6063      	str	r3, [r4, #4]
 8002c3c:	6014      	str	r4, [r2, #0]
 8002c3e:	4628      	mov	r0, r5
 8002c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c44:	f000 b90c 	b.w	8002e60 <__malloc_unlock>
 8002c48:	42a3      	cmp	r3, r4
 8002c4a:	d908      	bls.n	8002c5e <_free_r+0x42>
 8002c4c:	6820      	ldr	r0, [r4, #0]
 8002c4e:	1821      	adds	r1, r4, r0
 8002c50:	428b      	cmp	r3, r1
 8002c52:	bf01      	itttt	eq
 8002c54:	6819      	ldreq	r1, [r3, #0]
 8002c56:	685b      	ldreq	r3, [r3, #4]
 8002c58:	1809      	addeq	r1, r1, r0
 8002c5a:	6021      	streq	r1, [r4, #0]
 8002c5c:	e7ed      	b.n	8002c3a <_free_r+0x1e>
 8002c5e:	461a      	mov	r2, r3
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	b10b      	cbz	r3, 8002c68 <_free_r+0x4c>
 8002c64:	42a3      	cmp	r3, r4
 8002c66:	d9fa      	bls.n	8002c5e <_free_r+0x42>
 8002c68:	6811      	ldr	r1, [r2, #0]
 8002c6a:	1850      	adds	r0, r2, r1
 8002c6c:	42a0      	cmp	r0, r4
 8002c6e:	d10b      	bne.n	8002c88 <_free_r+0x6c>
 8002c70:	6820      	ldr	r0, [r4, #0]
 8002c72:	4401      	add	r1, r0
 8002c74:	1850      	adds	r0, r2, r1
 8002c76:	4283      	cmp	r3, r0
 8002c78:	6011      	str	r1, [r2, #0]
 8002c7a:	d1e0      	bne.n	8002c3e <_free_r+0x22>
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4401      	add	r1, r0
 8002c82:	6011      	str	r1, [r2, #0]
 8002c84:	6053      	str	r3, [r2, #4]
 8002c86:	e7da      	b.n	8002c3e <_free_r+0x22>
 8002c88:	d902      	bls.n	8002c90 <_free_r+0x74>
 8002c8a:	230c      	movs	r3, #12
 8002c8c:	602b      	str	r3, [r5, #0]
 8002c8e:	e7d6      	b.n	8002c3e <_free_r+0x22>
 8002c90:	6820      	ldr	r0, [r4, #0]
 8002c92:	1821      	adds	r1, r4, r0
 8002c94:	428b      	cmp	r3, r1
 8002c96:	bf01      	itttt	eq
 8002c98:	6819      	ldreq	r1, [r3, #0]
 8002c9a:	685b      	ldreq	r3, [r3, #4]
 8002c9c:	1809      	addeq	r1, r1, r0
 8002c9e:	6021      	streq	r1, [r4, #0]
 8002ca0:	6063      	str	r3, [r4, #4]
 8002ca2:	6054      	str	r4, [r2, #4]
 8002ca4:	e7cb      	b.n	8002c3e <_free_r+0x22>
 8002ca6:	bd38      	pop	{r3, r4, r5, pc}
 8002ca8:	20000230 	.word	0x20000230

08002cac <sbrk_aligned>:
 8002cac:	b570      	push	{r4, r5, r6, lr}
 8002cae:	4e0e      	ldr	r6, [pc, #56]	; (8002ce8 <sbrk_aligned+0x3c>)
 8002cb0:	460c      	mov	r4, r1
 8002cb2:	6831      	ldr	r1, [r6, #0]
 8002cb4:	4605      	mov	r5, r0
 8002cb6:	b911      	cbnz	r1, 8002cbe <sbrk_aligned+0x12>
 8002cb8:	f000 f8bc 	bl	8002e34 <_sbrk_r>
 8002cbc:	6030      	str	r0, [r6, #0]
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	f000 f8b7 	bl	8002e34 <_sbrk_r>
 8002cc6:	1c43      	adds	r3, r0, #1
 8002cc8:	d00a      	beq.n	8002ce0 <sbrk_aligned+0x34>
 8002cca:	1cc4      	adds	r4, r0, #3
 8002ccc:	f024 0403 	bic.w	r4, r4, #3
 8002cd0:	42a0      	cmp	r0, r4
 8002cd2:	d007      	beq.n	8002ce4 <sbrk_aligned+0x38>
 8002cd4:	1a21      	subs	r1, r4, r0
 8002cd6:	4628      	mov	r0, r5
 8002cd8:	f000 f8ac 	bl	8002e34 <_sbrk_r>
 8002cdc:	3001      	adds	r0, #1
 8002cde:	d101      	bne.n	8002ce4 <sbrk_aligned+0x38>
 8002ce0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
 8002ce8:	20000234 	.word	0x20000234

08002cec <_malloc_r>:
 8002cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cf0:	1ccd      	adds	r5, r1, #3
 8002cf2:	f025 0503 	bic.w	r5, r5, #3
 8002cf6:	3508      	adds	r5, #8
 8002cf8:	2d0c      	cmp	r5, #12
 8002cfa:	bf38      	it	cc
 8002cfc:	250c      	movcc	r5, #12
 8002cfe:	2d00      	cmp	r5, #0
 8002d00:	4607      	mov	r7, r0
 8002d02:	db01      	blt.n	8002d08 <_malloc_r+0x1c>
 8002d04:	42a9      	cmp	r1, r5
 8002d06:	d905      	bls.n	8002d14 <_malloc_r+0x28>
 8002d08:	230c      	movs	r3, #12
 8002d0a:	2600      	movs	r6, #0
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	4630      	mov	r0, r6
 8002d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d14:	4e2e      	ldr	r6, [pc, #184]	; (8002dd0 <_malloc_r+0xe4>)
 8002d16:	f000 f89d 	bl	8002e54 <__malloc_lock>
 8002d1a:	6833      	ldr	r3, [r6, #0]
 8002d1c:	461c      	mov	r4, r3
 8002d1e:	bb34      	cbnz	r4, 8002d6e <_malloc_r+0x82>
 8002d20:	4629      	mov	r1, r5
 8002d22:	4638      	mov	r0, r7
 8002d24:	f7ff ffc2 	bl	8002cac <sbrk_aligned>
 8002d28:	1c43      	adds	r3, r0, #1
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	d14d      	bne.n	8002dca <_malloc_r+0xde>
 8002d2e:	6834      	ldr	r4, [r6, #0]
 8002d30:	4626      	mov	r6, r4
 8002d32:	2e00      	cmp	r6, #0
 8002d34:	d140      	bne.n	8002db8 <_malloc_r+0xcc>
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	4631      	mov	r1, r6
 8002d3a:	4638      	mov	r0, r7
 8002d3c:	eb04 0803 	add.w	r8, r4, r3
 8002d40:	f000 f878 	bl	8002e34 <_sbrk_r>
 8002d44:	4580      	cmp	r8, r0
 8002d46:	d13a      	bne.n	8002dbe <_malloc_r+0xd2>
 8002d48:	6821      	ldr	r1, [r4, #0]
 8002d4a:	3503      	adds	r5, #3
 8002d4c:	1a6d      	subs	r5, r5, r1
 8002d4e:	f025 0503 	bic.w	r5, r5, #3
 8002d52:	3508      	adds	r5, #8
 8002d54:	2d0c      	cmp	r5, #12
 8002d56:	bf38      	it	cc
 8002d58:	250c      	movcc	r5, #12
 8002d5a:	4638      	mov	r0, r7
 8002d5c:	4629      	mov	r1, r5
 8002d5e:	f7ff ffa5 	bl	8002cac <sbrk_aligned>
 8002d62:	3001      	adds	r0, #1
 8002d64:	d02b      	beq.n	8002dbe <_malloc_r+0xd2>
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	442b      	add	r3, r5
 8002d6a:	6023      	str	r3, [r4, #0]
 8002d6c:	e00e      	b.n	8002d8c <_malloc_r+0xa0>
 8002d6e:	6822      	ldr	r2, [r4, #0]
 8002d70:	1b52      	subs	r2, r2, r5
 8002d72:	d41e      	bmi.n	8002db2 <_malloc_r+0xc6>
 8002d74:	2a0b      	cmp	r2, #11
 8002d76:	d916      	bls.n	8002da6 <_malloc_r+0xba>
 8002d78:	1961      	adds	r1, r4, r5
 8002d7a:	42a3      	cmp	r3, r4
 8002d7c:	6025      	str	r5, [r4, #0]
 8002d7e:	bf18      	it	ne
 8002d80:	6059      	strne	r1, [r3, #4]
 8002d82:	6863      	ldr	r3, [r4, #4]
 8002d84:	bf08      	it	eq
 8002d86:	6031      	streq	r1, [r6, #0]
 8002d88:	5162      	str	r2, [r4, r5]
 8002d8a:	604b      	str	r3, [r1, #4]
 8002d8c:	4638      	mov	r0, r7
 8002d8e:	f104 060b 	add.w	r6, r4, #11
 8002d92:	f000 f865 	bl	8002e60 <__malloc_unlock>
 8002d96:	f026 0607 	bic.w	r6, r6, #7
 8002d9a:	1d23      	adds	r3, r4, #4
 8002d9c:	1af2      	subs	r2, r6, r3
 8002d9e:	d0b6      	beq.n	8002d0e <_malloc_r+0x22>
 8002da0:	1b9b      	subs	r3, r3, r6
 8002da2:	50a3      	str	r3, [r4, r2]
 8002da4:	e7b3      	b.n	8002d0e <_malloc_r+0x22>
 8002da6:	6862      	ldr	r2, [r4, #4]
 8002da8:	42a3      	cmp	r3, r4
 8002daa:	bf0c      	ite	eq
 8002dac:	6032      	streq	r2, [r6, #0]
 8002dae:	605a      	strne	r2, [r3, #4]
 8002db0:	e7ec      	b.n	8002d8c <_malloc_r+0xa0>
 8002db2:	4623      	mov	r3, r4
 8002db4:	6864      	ldr	r4, [r4, #4]
 8002db6:	e7b2      	b.n	8002d1e <_malloc_r+0x32>
 8002db8:	4634      	mov	r4, r6
 8002dba:	6876      	ldr	r6, [r6, #4]
 8002dbc:	e7b9      	b.n	8002d32 <_malloc_r+0x46>
 8002dbe:	230c      	movs	r3, #12
 8002dc0:	4638      	mov	r0, r7
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	f000 f84c 	bl	8002e60 <__malloc_unlock>
 8002dc8:	e7a1      	b.n	8002d0e <_malloc_r+0x22>
 8002dca:	6025      	str	r5, [r4, #0]
 8002dcc:	e7de      	b.n	8002d8c <_malloc_r+0xa0>
 8002dce:	bf00      	nop
 8002dd0:	20000230 	.word	0x20000230

08002dd4 <_realloc_r>:
 8002dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dd8:	4680      	mov	r8, r0
 8002dda:	4614      	mov	r4, r2
 8002ddc:	460e      	mov	r6, r1
 8002dde:	b921      	cbnz	r1, 8002dea <_realloc_r+0x16>
 8002de0:	4611      	mov	r1, r2
 8002de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002de6:	f7ff bf81 	b.w	8002cec <_malloc_r>
 8002dea:	b92a      	cbnz	r2, 8002df8 <_realloc_r+0x24>
 8002dec:	f7ff ff16 	bl	8002c1c <_free_r>
 8002df0:	4625      	mov	r5, r4
 8002df2:	4628      	mov	r0, r5
 8002df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002df8:	f000 f838 	bl	8002e6c <_malloc_usable_size_r>
 8002dfc:	4284      	cmp	r4, r0
 8002dfe:	4607      	mov	r7, r0
 8002e00:	d802      	bhi.n	8002e08 <_realloc_r+0x34>
 8002e02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002e06:	d812      	bhi.n	8002e2e <_realloc_r+0x5a>
 8002e08:	4621      	mov	r1, r4
 8002e0a:	4640      	mov	r0, r8
 8002e0c:	f7ff ff6e 	bl	8002cec <_malloc_r>
 8002e10:	4605      	mov	r5, r0
 8002e12:	2800      	cmp	r0, #0
 8002e14:	d0ed      	beq.n	8002df2 <_realloc_r+0x1e>
 8002e16:	42bc      	cmp	r4, r7
 8002e18:	4622      	mov	r2, r4
 8002e1a:	4631      	mov	r1, r6
 8002e1c:	bf28      	it	cs
 8002e1e:	463a      	movcs	r2, r7
 8002e20:	f7ff fed4 	bl	8002bcc <memcpy>
 8002e24:	4631      	mov	r1, r6
 8002e26:	4640      	mov	r0, r8
 8002e28:	f7ff fef8 	bl	8002c1c <_free_r>
 8002e2c:	e7e1      	b.n	8002df2 <_realloc_r+0x1e>
 8002e2e:	4635      	mov	r5, r6
 8002e30:	e7df      	b.n	8002df2 <_realloc_r+0x1e>
	...

08002e34 <_sbrk_r>:
 8002e34:	b538      	push	{r3, r4, r5, lr}
 8002e36:	2300      	movs	r3, #0
 8002e38:	4d05      	ldr	r5, [pc, #20]	; (8002e50 <_sbrk_r+0x1c>)
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	4608      	mov	r0, r1
 8002e3e:	602b      	str	r3, [r5, #0]
 8002e40:	f7fd fb72 	bl	8000528 <_sbrk>
 8002e44:	1c43      	adds	r3, r0, #1
 8002e46:	d102      	bne.n	8002e4e <_sbrk_r+0x1a>
 8002e48:	682b      	ldr	r3, [r5, #0]
 8002e4a:	b103      	cbz	r3, 8002e4e <_sbrk_r+0x1a>
 8002e4c:	6023      	str	r3, [r4, #0]
 8002e4e:	bd38      	pop	{r3, r4, r5, pc}
 8002e50:	20000238 	.word	0x20000238

08002e54 <__malloc_lock>:
 8002e54:	4801      	ldr	r0, [pc, #4]	; (8002e5c <__malloc_lock+0x8>)
 8002e56:	f000 b811 	b.w	8002e7c <__retarget_lock_acquire_recursive>
 8002e5a:	bf00      	nop
 8002e5c:	2000023c 	.word	0x2000023c

08002e60 <__malloc_unlock>:
 8002e60:	4801      	ldr	r0, [pc, #4]	; (8002e68 <__malloc_unlock+0x8>)
 8002e62:	f000 b80c 	b.w	8002e7e <__retarget_lock_release_recursive>
 8002e66:	bf00      	nop
 8002e68:	2000023c 	.word	0x2000023c

08002e6c <_malloc_usable_size_r>:
 8002e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e70:	1f18      	subs	r0, r3, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	bfbc      	itt	lt
 8002e76:	580b      	ldrlt	r3, [r1, r0]
 8002e78:	18c0      	addlt	r0, r0, r3
 8002e7a:	4770      	bx	lr

08002e7c <__retarget_lock_acquire_recursive>:
 8002e7c:	4770      	bx	lr

08002e7e <__retarget_lock_release_recursive>:
 8002e7e:	4770      	bx	lr

08002e80 <_init>:
 8002e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e82:	bf00      	nop
 8002e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e86:	bc08      	pop	{r3}
 8002e88:	469e      	mov	lr, r3
 8002e8a:	4770      	bx	lr

08002e8c <_fini>:
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	bf00      	nop
 8002e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e92:	bc08      	pop	{r3}
 8002e94:	469e      	mov	lr, r3
 8002e96:	4770      	bx	lr
