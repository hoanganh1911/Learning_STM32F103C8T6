
W25Q_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cbc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002dc8  08002dc8  00012dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e38  08002e38  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002e38  08002e38  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e38  08002e38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e38  08002e38  00012e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e3c  08002e3c  00012e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  08002eb0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08002eb0  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c7e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000152e  00000000  00000000  00026d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  00028248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  00028a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001719a  00000000  00000000  00029200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000843e  00000000  00000000  0004039a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ed2  00000000  00000000  000487d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc6aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000249c  00000000  00000000  000cc6fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002db0 	.word	0x08002db0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002db0 	.word	0x08002db0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SPI1_Send>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//---------------------------------------------------------
void SPI1_Send(uint8_t *dt,uint16_t cnt)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	460b      	mov	r3, r1
 8000166:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, dt, cnt, 1000);
 8000168:	887a      	ldrh	r2, [r7, #2]
 800016a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800016e:	6879      	ldr	r1, [r7, #4]
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <SPI1_Send+0x24>)
 8000172:	f001 fac3 	bl	80016fc <HAL_SPI_Transmit>
}
 8000176:	bf00      	nop
 8000178:	3708      	adds	r7, #8
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	2000008c 	.word	0x2000008c

08000184 <SPI1_Recv>:
//---------------------------------------------------------
void SPI1_Recv(uint8_t *dt,uint16_t cnt)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	460b      	mov	r3, r1
 800018e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, dt, cnt, 1000);
 8000190:	887a      	ldrh	r2, [r7, #2]
 8000192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000196:	6879      	ldr	r1, [r7, #4]
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <SPI1_Recv+0x24>)
 800019a:	f001 fbeb 	bl	8001974 <HAL_SPI_Receive>
}
 800019e:	bf00      	nop
 80001a0:	3708      	adds	r7, #8
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	2000008c 	.word	0x2000008c

080001ac <W25_Reset>:
//---------------------------------------------------------
void W25_Reset(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	cs_set();
 80001b0:	2200      	movs	r2, #0
 80001b2:	2110      	movs	r1, #16
 80001b4:	4809      	ldr	r0, [pc, #36]	; (80001dc <W25_Reset+0x30>)
 80001b6:	f000 fdeb 	bl	8000d90 <HAL_GPIO_WritePin>
	tx_buf[0] = W25_ENABLE_RESET;
 80001ba:	4b09      	ldr	r3, [pc, #36]	; (80001e0 <W25_Reset+0x34>)
 80001bc:	2266      	movs	r2, #102	; 0x66
 80001be:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = W25_RESET;
 80001c0:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <W25_Reset+0x34>)
 80001c2:	2299      	movs	r2, #153	; 0x99
 80001c4:	705a      	strb	r2, [r3, #1]
	SPI1_Send(tx_buf, 2);
 80001c6:	2102      	movs	r1, #2
 80001c8:	4805      	ldr	r0, [pc, #20]	; (80001e0 <W25_Reset+0x34>)
 80001ca:	f7ff ffc7 	bl	800015c <SPI1_Send>
	cs_reset();
 80001ce:	2201      	movs	r2, #1
 80001d0:	2110      	movs	r1, #16
 80001d2:	4802      	ldr	r0, [pc, #8]	; (80001dc <W25_Reset+0x30>)
 80001d4:	f000 fddc 	bl	8000d90 <HAL_GPIO_WritePin>
}
 80001d8:	bf00      	nop
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	40010800 	.word	0x40010800
 80001e0:	20000128 	.word	0x20000128

080001e4 <W25_Read_ID>:
	SPI1_Recv(data, sz);
	cs_reset();
}
//---------------------------------------------------------
uint64_t W25_Read_ID(void)
{
 80001e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80001e8:	b086      	sub	sp, #24
 80001ea:	af00      	add	r7, sp, #0
	  uint8_t dt[12];
	  tx_buf[0] = W25_UNIQUE_ID;
 80001ec:	4b25      	ldr	r3, [pc, #148]	; (8000284 <W25_Read_ID+0xa0>)
 80001ee:	224b      	movs	r2, #75	; 0x4b
 80001f0:	701a      	strb	r2, [r3, #0]
	  cs_set();
 80001f2:	2200      	movs	r2, #0
 80001f4:	2110      	movs	r1, #16
 80001f6:	4824      	ldr	r0, [pc, #144]	; (8000288 <W25_Read_ID+0xa4>)
 80001f8:	f000 fdca 	bl	8000d90 <HAL_GPIO_WritePin>
	  SPI1_Send(tx_buf, 1);
 80001fc:	2101      	movs	r1, #1
 80001fe:	4821      	ldr	r0, [pc, #132]	; (8000284 <W25_Read_ID+0xa0>)
 8000200:	f7ff ffac 	bl	800015c <SPI1_Send>
	  SPI1_Recv(dt,12);
 8000204:	463b      	mov	r3, r7
 8000206:	210c      	movs	r1, #12
 8000208:	4618      	mov	r0, r3
 800020a:	f7ff ffbb 	bl	8000184 <SPI1_Recv>
	  cs_reset();
 800020e:	2201      	movs	r2, #1
 8000210:	2110      	movs	r1, #16
 8000212:	481d      	ldr	r0, [pc, #116]	; (8000288 <W25_Read_ID+0xa4>)
 8000214:	f000 fdbc 	bl	8000d90 <HAL_GPIO_WritePin>
	  uint64_t v = 0;
 8000218:	f04f 0200 	mov.w	r2, #0
 800021c:	f04f 0300 	mov.w	r3, #0
 8000220:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  for (int i = 4;i < 12;i++)
 8000224:	2304      	movs	r3, #4
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	e021      	b.n	800026e <W25_Read_ID+0x8a>
	  {
		  v |= dt[i];
 800022a:	463a      	mov	r2, r7
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4413      	add	r3, r2
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	b2db      	uxtb	r3, r3
 8000234:	2200      	movs	r2, #0
 8000236:	461c      	mov	r4, r3
 8000238:	4615      	mov	r5, r2
 800023a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800023e:	ea42 0804 	orr.w	r8, r2, r4
 8000242:	ea43 0905 	orr.w	r9, r3, r5
 8000246:	e9c7 8904 	strd	r8, r9, [r7, #16]
		  if (i!=11)
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2b0b      	cmp	r3, #11
 800024e:	d00b      	beq.n	8000268 <W25_Read_ID+0x84>
			  v <<= 8;
 8000250:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000254:	f04f 0200 	mov.w	r2, #0
 8000258:	f04f 0300 	mov.w	r3, #0
 800025c:	020b      	lsls	r3, r1, #8
 800025e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8000262:	0202      	lsls	r2, r0, #8
 8000264:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  for (int i = 4;i < 12;i++)
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	3301      	adds	r3, #1
 800026c:	60fb      	str	r3, [r7, #12]
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2b0b      	cmp	r3, #11
 8000272:	ddda      	ble.n	800022a <W25_Read_ID+0x46>
	  }
	  return v;
 8000274:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8000278:	4610      	mov	r0, r2
 800027a:	4619      	mov	r1, r3
 800027c:	3718      	adds	r7, #24
 800027e:	46bd      	mov	sp, r7
 8000280:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000284:	20000128 	.word	0x20000128
 8000288:	40010800 	.word	0x40010800

0800028c <W25_Ini>:
//---------------------------------------------------------
void W25_Ini(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8000290:	2064      	movs	r0, #100	; 0x64
 8000292:	f000 faf1 	bl	8000878 <HAL_Delay>
	W25_Reset();
 8000296:	f7ff ff89 	bl	80001ac <W25_Reset>
	HAL_Delay(100);
 800029a:	2064      	movs	r0, #100	; 0x64
 800029c:	f000 faec 	bl	8000878 <HAL_Delay>
}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b08a      	sub	sp, #40	; 0x28
 80002a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002aa:	f000 fa83 	bl	80007b4 <HAL_Init>
//  uint32_t x = W25_Read_ID();
//  HAL_UART_Transmit(&huart1, (uint8_t*)x,4,1000);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ae:	f000 f845 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b2:	f000 f8e9 	bl	8000488 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002b6:	f000 f887 	bl	80003c8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80002ba:	f000 f8bb 	bl	8000434 <MX_USART1_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char str1[10];
	  char str2[10];
	  W25_Ini();
 80002be:	f7ff ffe5 	bl	800028c <W25_Ini>
	  uint64_t id = W25_Read_ID();
 80002c2:	f7ff ff8f 	bl	80001e4 <W25_Read_ID>
 80002c6:	e9c7 0108 	strd	r0, r1, [r7, #32]
	  uint32_t low = id;
 80002ca:	6a3b      	ldr	r3, [r7, #32]
 80002cc:	61fb      	str	r3, [r7, #28]
	  uint32_t high = (id >> 32);
 80002ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80002d2:	f04f 0200 	mov.w	r2, #0
 80002d6:	f04f 0300 	mov.w	r3, #0
 80002da:	000a      	movs	r2, r1
 80002dc:	2300      	movs	r3, #0
 80002de:	4613      	mov	r3, r2
 80002e0:	61bb      	str	r3, [r7, #24]
	  sprintf(str1,"ID:0x%lX",high);
 80002e2:	f107 030c 	add.w	r3, r7, #12
 80002e6:	69ba      	ldr	r2, [r7, #24]
 80002e8:	4911      	ldr	r1, [pc, #68]	; (8000330 <main+0x8c>)
 80002ea:	4618      	mov	r0, r3
 80002ec:	f002 f8d8 	bl	80024a0 <siprintf>
	  sprintf(str2,"%lX\r\n",low);
 80002f0:	463b      	mov	r3, r7
 80002f2:	69fa      	ldr	r2, [r7, #28]
 80002f4:	490f      	ldr	r1, [pc, #60]	; (8000334 <main+0x90>)
 80002f6:	4618      	mov	r0, r3
 80002f8:	f002 f8d2 	bl	80024a0 <siprintf>
	  strcat(str1,str2);
 80002fc:	463a      	mov	r2, r7
 80002fe:	f107 030c 	add.w	r3, r7, #12
 8000302:	4611      	mov	r1, r2
 8000304:	4618      	mov	r0, r3
 8000306:	f002 f8eb 	bl	80024e0 <strcat>
	  HAL_UART_Transmit(&huart1,(uint8_t *) str1,strlen(str1),1000);
 800030a:	f107 030c 	add.w	r3, r7, #12
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ff1c 	bl	800014c <strlen>
 8000314:	4603      	mov	r3, r0
 8000316:	b29a      	uxth	r2, r3
 8000318:	f107 010c 	add.w	r1, r7, #12
 800031c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000320:	4805      	ldr	r0, [pc, #20]	; (8000338 <main+0x94>)
 8000322:	f001 ff20 	bl	8002166 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8000326:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800032a:	f000 faa5 	bl	8000878 <HAL_Delay>
  {
 800032e:	e7c6      	b.n	80002be <main+0x1a>
 8000330:	08002dc8 	.word	0x08002dc8
 8000334:	08002dd4 	.word	0x08002dd4
 8000338:	200000e4 	.word	0x200000e4

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b090      	sub	sp, #64	; 0x40
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	f107 0318 	add.w	r3, r7, #24
 8000346:	2228      	movs	r2, #40	; 0x28
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f002 f8a0 	bl	8002490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
 800035c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800035e:	2301      	movs	r3, #1
 8000360:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000366:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036c:	2301      	movs	r3, #1
 800036e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000370:	2302      	movs	r3, #2
 8000372:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000378:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800037a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800037e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000380:	f107 0318 	add.w	r3, r7, #24
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fd1b 	bl	8000dc0 <HAL_RCC_OscConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000390:	f000 f8b8 	bl	8000504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000394:	230f      	movs	r3, #15
 8000396:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000398:	2302      	movs	r3, #2
 800039a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2102      	movs	r1, #2
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 ff88 	bl	80012c4 <HAL_RCC_ClockConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ba:	f000 f8a3 	bl	8000504 <Error_Handler>
  }
}
 80003be:	bf00      	nop
 80003c0:	3740      	adds	r7, #64	; 0x40
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
	...

080003c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003cc:	4b17      	ldr	r3, [pc, #92]	; (800042c <MX_SPI1_Init+0x64>)
 80003ce:	4a18      	ldr	r2, [pc, #96]	; (8000430 <MX_SPI1_Init+0x68>)
 80003d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003d2:	4b16      	ldr	r3, [pc, #88]	; (800042c <MX_SPI1_Init+0x64>)
 80003d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003da:	4b14      	ldr	r3, [pc, #80]	; (800042c <MX_SPI1_Init+0x64>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <MX_SPI1_Init+0x64>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e6:	4b11      	ldr	r3, [pc, #68]	; (800042c <MX_SPI1_Init+0x64>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_SPI1_Init+0x64>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_SPI1_Init+0x64>)
 80003f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <MX_SPI1_Init+0x64>)
 80003fc:	2208      	movs	r2, #8
 80003fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000400:	4b0a      	ldr	r3, [pc, #40]	; (800042c <MX_SPI1_Init+0x64>)
 8000402:	2200      	movs	r2, #0
 8000404:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000406:	4b09      	ldr	r3, [pc, #36]	; (800042c <MX_SPI1_Init+0x64>)
 8000408:	2200      	movs	r2, #0
 800040a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800040c:	4b07      	ldr	r3, [pc, #28]	; (800042c <MX_SPI1_Init+0x64>)
 800040e:	2200      	movs	r2, #0
 8000410:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <MX_SPI1_Init+0x64>)
 8000414:	220a      	movs	r2, #10
 8000416:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000418:	4804      	ldr	r0, [pc, #16]	; (800042c <MX_SPI1_Init+0x64>)
 800041a:	f001 f8eb 	bl	80015f4 <HAL_SPI_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000424:	f000 f86e 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	2000008c 	.word	0x2000008c
 8000430:	40013000 	.word	0x40013000

08000434 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 800043a:	4a12      	ldr	r2, [pc, #72]	; (8000484 <MX_USART1_UART_Init+0x50>)
 800043c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000444:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800044c:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000458:	4b09      	ldr	r3, [pc, #36]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 800045a:	220c      	movs	r2, #12
 800045c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045e:	4b08      	ldr	r3, [pc, #32]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800046a:	4805      	ldr	r0, [pc, #20]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 800046c:	f001 fe2e 	bl	80020cc <HAL_UART_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000476:	f000 f845 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200000e4 	.word	0x200000e4
 8000484:	40013800 	.word	0x40013800

08000488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048e:	f107 0308 	add.w	r3, r7, #8
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800049c:	4b17      	ldr	r3, [pc, #92]	; (80004fc <MX_GPIO_Init+0x74>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a16      	ldr	r2, [pc, #88]	; (80004fc <MX_GPIO_Init+0x74>)
 80004a2:	f043 0320 	orr.w	r3, r3, #32
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b14      	ldr	r3, [pc, #80]	; (80004fc <MX_GPIO_Init+0x74>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0320 	and.w	r3, r3, #32
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <MX_GPIO_Init+0x74>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a10      	ldr	r2, [pc, #64]	; (80004fc <MX_GPIO_Init+0x74>)
 80004ba:	f043 0304 	orr.w	r3, r3, #4
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <MX_GPIO_Init+0x74>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0304 	and.w	r3, r3, #4
 80004c8:	603b      	str	r3, [r7, #0]
 80004ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2110      	movs	r1, #16
 80004d0:	480b      	ldr	r0, [pc, #44]	; (8000500 <MX_GPIO_Init+0x78>)
 80004d2:	f000 fc5d 	bl	8000d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80004d6:	2310      	movs	r3, #16
 80004d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004da:	2301      	movs	r3, #1
 80004dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e2:	2303      	movs	r3, #3
 80004e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80004e6:	f107 0308 	add.w	r3, r7, #8
 80004ea:	4619      	mov	r1, r3
 80004ec:	4804      	ldr	r0, [pc, #16]	; (8000500 <MX_GPIO_Init+0x78>)
 80004ee:	f000 facb 	bl	8000a88 <HAL_GPIO_Init>

}
 80004f2:	bf00      	nop
 80004f4:	3718      	adds	r7, #24
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010800 	.word	0x40010800

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	e7fe      	b.n	800050c <Error_Handler+0x8>
	...

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <HAL_MspInit+0x5c>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a14      	ldr	r2, [pc, #80]	; (800056c <HAL_MspInit+0x5c>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_MspInit+0x5c>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_MspInit+0x5c>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <HAL_MspInit+0x5c>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <HAL_MspInit+0x5c>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <HAL_MspInit+0x60>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <HAL_MspInit+0x60>)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40021000 	.word	0x40021000
 8000570:	40010000 	.word	0x40010000

08000574 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <HAL_SPI_MspInit+0x88>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d12f      	bne.n	80005f4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000594:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <HAL_SPI_MspInit+0x8c>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a19      	ldr	r2, [pc, #100]	; (8000600 <HAL_SPI_MspInit+0x8c>)
 800059a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b17      	ldr	r3, [pc, #92]	; (8000600 <HAL_SPI_MspInit+0x8c>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <HAL_SPI_MspInit+0x8c>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a13      	ldr	r2, [pc, #76]	; (8000600 <HAL_SPI_MspInit+0x8c>)
 80005b2:	f043 0304 	orr.w	r3, r3, #4
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <HAL_SPI_MspInit+0x8c>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0304 	and.w	r3, r3, #4
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80005c4:	23a0      	movs	r3, #160	; 0xa0
 80005c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c8:	2302      	movs	r3, #2
 80005ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005cc:	2303      	movs	r3, #3
 80005ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	4619      	mov	r1, r3
 80005d6:	480b      	ldr	r0, [pc, #44]	; (8000604 <HAL_SPI_MspInit+0x90>)
 80005d8:	f000 fa56 	bl	8000a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005dc:	2340      	movs	r3, #64	; 0x40
 80005de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	4619      	mov	r1, r3
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <HAL_SPI_MspInit+0x90>)
 80005f0:	f000 fa4a 	bl	8000a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80005f4:	bf00      	nop
 80005f6:	3720      	adds	r7, #32
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40013000 	.word	0x40013000
 8000600:	40021000 	.word	0x40021000
 8000604:	40010800 	.word	0x40010800

08000608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <HAL_UART_MspInit+0x8c>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d131      	bne.n	800068c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <HAL_UART_MspInit+0x90>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a1a      	ldr	r2, [pc, #104]	; (8000698 <HAL_UART_MspInit+0x90>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <HAL_UART_MspInit+0x90>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <HAL_UART_MspInit+0x90>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a14      	ldr	r2, [pc, #80]	; (8000698 <HAL_UART_MspInit+0x90>)
 8000646:	f043 0304 	orr.w	r3, r3, #4
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_UART_MspInit+0x90>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0304 	and.w	r3, r3, #4
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800065c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065e:	2302      	movs	r3, #2
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000662:	2303      	movs	r3, #3
 8000664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	f107 0310 	add.w	r3, r7, #16
 800066a:	4619      	mov	r1, r3
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <HAL_UART_MspInit+0x94>)
 800066e:	f000 fa0b 	bl	8000a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000676:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	4619      	mov	r1, r3
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <HAL_UART_MspInit+0x94>)
 8000688:	f000 f9fe 	bl	8000a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800068c:	bf00      	nop
 800068e:	3720      	adds	r7, #32
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40013800 	.word	0x40013800
 8000698:	40021000 	.word	0x40021000
 800069c:	40010800 	.word	0x40010800

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <NMI_Handler+0x4>

080006a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <HardFault_Handler+0x4>

080006ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <MemManage_Handler+0x4>

080006b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <BusFault_Handler+0x4>

080006b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <UsageFault_Handler+0x4>

080006be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr

080006ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr

080006d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr

080006e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e6:	f000 f8ab 	bl	8000840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006f8:	4a14      	ldr	r2, [pc, #80]	; (800074c <_sbrk+0x5c>)
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <_sbrk+0x60>)
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000704:	4b13      	ldr	r3, [pc, #76]	; (8000754 <_sbrk+0x64>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d102      	bne.n	8000712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <_sbrk+0x64>)
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <_sbrk+0x68>)
 8000710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <_sbrk+0x64>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	429a      	cmp	r2, r3
 800071e:	d207      	bcs.n	8000730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000720:	f001 fe8c 	bl	800243c <__errno>
 8000724:	4603      	mov	r3, r0
 8000726:	220c      	movs	r2, #12
 8000728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800072a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800072e:	e009      	b.n	8000744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <_sbrk+0x64>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000736:	4b07      	ldr	r3, [pc, #28]	; (8000754 <_sbrk+0x64>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	4a05      	ldr	r2, [pc, #20]	; (8000754 <_sbrk+0x64>)
 8000740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000742:	68fb      	ldr	r3, [r7, #12]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20005000 	.word	0x20005000
 8000750:	00000400 	.word	0x00000400
 8000754:	20000134 	.word	0x20000134
 8000758:	20000150 	.word	0x20000150

0800075c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000768:	480c      	ldr	r0, [pc, #48]	; (800079c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800076a:	490d      	ldr	r1, [pc, #52]	; (80007a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800076c:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000770:	e002      	b.n	8000778 <LoopCopyDataInit>

08000772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000776:	3304      	adds	r3, #4

08000778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800077c:	d3f9      	bcc.n	8000772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000780:	4c0a      	ldr	r4, [pc, #40]	; (80007ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000784:	e001      	b.n	800078a <LoopFillZerobss>

08000786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000788:	3204      	adds	r2, #4

0800078a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800078c:	d3fb      	bcc.n	8000786 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800078e:	f7ff ffe5 	bl	800075c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000792:	f001 fe59 	bl	8002448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000796:	f7ff fd85 	bl	80002a4 <main>
  bx lr
 800079a:	4770      	bx	lr
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007a4:	08002e40 	.word	0x08002e40
  ldr r2, =_sbss
 80007a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007ac:	2000014c 	.word	0x2000014c

080007b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC1_2_IRQHandler>
	...

080007b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <HAL_Init+0x28>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a07      	ldr	r2, [pc, #28]	; (80007dc <HAL_Init+0x28>)
 80007be:	f043 0310 	orr.w	r3, r3, #16
 80007c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f92b 	bl	8000a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ca:	200f      	movs	r0, #15
 80007cc:	f000 f808 	bl	80007e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d0:	f7ff fe9e 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40022000 	.word	0x40022000

080007e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_InitTick+0x54>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_InitTick+0x58>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f935 	bl	8000a6e <HAL_SYSTICK_Config>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	e00e      	b.n	800082c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b0f      	cmp	r3, #15
 8000812:	d80a      	bhi.n	800082a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000814:	2200      	movs	r2, #0
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800081c:	f000 f90b 	bl	8000a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000820:	4a06      	ldr	r2, [pc, #24]	; (800083c <HAL_InitTick+0x5c>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000826:	2300      	movs	r3, #0
 8000828:	e000      	b.n	800082c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000000 	.word	0x20000000
 8000838:	20000008 	.word	0x20000008
 800083c:	20000004 	.word	0x20000004

08000840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_IncTick+0x1c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_IncTick+0x20>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	4a03      	ldr	r2, [pc, #12]	; (8000860 <HAL_IncTick+0x20>)
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	20000008 	.word	0x20000008
 8000860:	20000138 	.word	0x20000138

08000864 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b02      	ldr	r3, [pc, #8]	; (8000874 <HAL_GetTick+0x10>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	20000138 	.word	0x20000138

08000878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000880:	f7ff fff0 	bl	8000864 <HAL_GetTick>
 8000884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000890:	d005      	beq.n	800089e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <HAL_Delay+0x44>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	461a      	mov	r2, r3
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	4413      	add	r3, r2
 800089c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800089e:	bf00      	nop
 80008a0:	f7ff ffe0 	bl	8000864 <HAL_GetTick>
 80008a4:	4602      	mov	r2, r0
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d8f7      	bhi.n	80008a0 <HAL_Delay+0x28>
  {
  }
}
 80008b0:	bf00      	nop
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000008 	.word	0x20000008

080008c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008dc:	4013      	ands	r3, r2
 80008de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	60d3      	str	r3, [r2, #12]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <__NVIC_GetPriorityGrouping+0x18>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	f003 0307 	and.w	r3, r3, #7
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	db0a      	blt.n	800094e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	490c      	ldr	r1, [pc, #48]	; (8000970 <__NVIC_SetPriority+0x4c>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800094c:	e00a      	b.n	8000964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4908      	ldr	r1, [pc, #32]	; (8000974 <__NVIC_SetPriority+0x50>)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	3b04      	subs	r3, #4
 800095c:	0112      	lsls	r2, r2, #4
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	440b      	add	r3, r1
 8000962:	761a      	strb	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f1c3 0307 	rsb	r3, r3, #7
 8000992:	2b04      	cmp	r3, #4
 8000994:	bf28      	it	cs
 8000996:	2304      	movcs	r3, #4
 8000998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3304      	adds	r3, #4
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d902      	bls.n	80009a8 <NVIC_EncodePriority+0x30>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3b03      	subs	r3, #3
 80009a6:	e000      	b.n	80009aa <NVIC_EncodePriority+0x32>
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43da      	mvns	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43d9      	mvns	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	4313      	orrs	r3, r2
         );
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3724      	adds	r7, #36	; 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009ec:	d301      	bcc.n	80009f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00f      	b.n	8000a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <SysTick_Config+0x40>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fa:	210f      	movs	r1, #15
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a00:	f7ff ff90 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <SysTick_Config+0x40>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <SysTick_Config+0x40>)
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	e000e010 	.word	0xe000e010

08000a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ff49 	bl	80008c0 <__NVIC_SetPriorityGrouping>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a48:	f7ff ff5e 	bl	8000908 <__NVIC_GetPriorityGrouping>
 8000a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	68b9      	ldr	r1, [r7, #8]
 8000a52:	6978      	ldr	r0, [r7, #20]
 8000a54:	f7ff ff90 	bl	8000978 <NVIC_EncodePriority>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff5f 	bl	8000924 <__NVIC_SetPriority>
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ffb0 	bl	80009dc <SysTick_Config>
 8000a7c:	4603      	mov	r3, r0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b08b      	sub	sp, #44	; 0x2c
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9a:	e169      	b.n	8000d70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	69fa      	ldr	r2, [r7, #28]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	f040 8158 	bne.w	8000d6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	4a9a      	ldr	r2, [pc, #616]	; (8000d28 <HAL_GPIO_Init+0x2a0>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d05e      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ac4:	4a98      	ldr	r2, [pc, #608]	; (8000d28 <HAL_GPIO_Init+0x2a0>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d875      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000aca:	4a98      	ldr	r2, [pc, #608]	; (8000d2c <HAL_GPIO_Init+0x2a4>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d058      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ad0:	4a96      	ldr	r2, [pc, #600]	; (8000d2c <HAL_GPIO_Init+0x2a4>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d86f      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000ad6:	4a96      	ldr	r2, [pc, #600]	; (8000d30 <HAL_GPIO_Init+0x2a8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d052      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000adc:	4a94      	ldr	r2, [pc, #592]	; (8000d30 <HAL_GPIO_Init+0x2a8>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d869      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000ae2:	4a94      	ldr	r2, [pc, #592]	; (8000d34 <HAL_GPIO_Init+0x2ac>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d04c      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ae8:	4a92      	ldr	r2, [pc, #584]	; (8000d34 <HAL_GPIO_Init+0x2ac>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d863      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000aee:	4a92      	ldr	r2, [pc, #584]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d046      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000af4:	4a90      	ldr	r2, [pc, #576]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d85d      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000afa:	2b12      	cmp	r3, #18
 8000afc:	d82a      	bhi.n	8000b54 <HAL_GPIO_Init+0xcc>
 8000afe:	2b12      	cmp	r3, #18
 8000b00:	d859      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000b02:	a201      	add	r2, pc, #4	; (adr r2, 8000b08 <HAL_GPIO_Init+0x80>)
 8000b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b08:	08000b83 	.word	0x08000b83
 8000b0c:	08000b5d 	.word	0x08000b5d
 8000b10:	08000b6f 	.word	0x08000b6f
 8000b14:	08000bb1 	.word	0x08000bb1
 8000b18:	08000bb7 	.word	0x08000bb7
 8000b1c:	08000bb7 	.word	0x08000bb7
 8000b20:	08000bb7 	.word	0x08000bb7
 8000b24:	08000bb7 	.word	0x08000bb7
 8000b28:	08000bb7 	.word	0x08000bb7
 8000b2c:	08000bb7 	.word	0x08000bb7
 8000b30:	08000bb7 	.word	0x08000bb7
 8000b34:	08000bb7 	.word	0x08000bb7
 8000b38:	08000bb7 	.word	0x08000bb7
 8000b3c:	08000bb7 	.word	0x08000bb7
 8000b40:	08000bb7 	.word	0x08000bb7
 8000b44:	08000bb7 	.word	0x08000bb7
 8000b48:	08000bb7 	.word	0x08000bb7
 8000b4c:	08000b65 	.word	0x08000b65
 8000b50:	08000b79 	.word	0x08000b79
 8000b54:	4a79      	ldr	r2, [pc, #484]	; (8000d3c <HAL_GPIO_Init+0x2b4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d013      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b5a:	e02c      	b.n	8000bb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	623b      	str	r3, [r7, #32]
          break;
 8000b62:	e029      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	623b      	str	r3, [r7, #32]
          break;
 8000b6c:	e024      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	3308      	adds	r3, #8
 8000b74:	623b      	str	r3, [r7, #32]
          break;
 8000b76:	e01f      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	330c      	adds	r3, #12
 8000b7e:	623b      	str	r3, [r7, #32]
          break;
 8000b80:	e01a      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	623b      	str	r3, [r7, #32]
          break;
 8000b8e:	e013      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d105      	bne.n	8000ba4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b98:	2308      	movs	r3, #8
 8000b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	69fa      	ldr	r2, [r7, #28]
 8000ba0:	611a      	str	r2, [r3, #16]
          break;
 8000ba2:	e009      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69fa      	ldr	r2, [r7, #28]
 8000bac:	615a      	str	r2, [r3, #20]
          break;
 8000bae:	e003      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
          break;
 8000bb4:	e000      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          break;
 8000bb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	2bff      	cmp	r3, #255	; 0xff
 8000bbc:	d801      	bhi.n	8000bc2 <HAL_GPIO_Init+0x13a>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	e001      	b.n	8000bc6 <HAL_GPIO_Init+0x13e>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	2bff      	cmp	r3, #255	; 0xff
 8000bcc:	d802      	bhi.n	8000bd4 <HAL_GPIO_Init+0x14c>
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	e002      	b.n	8000bda <HAL_GPIO_Init+0x152>
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	3b08      	subs	r3, #8
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	210f      	movs	r1, #15
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	401a      	ands	r2, r3
 8000bec:	6a39      	ldr	r1, [r7, #32]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 80b1 	beq.w	8000d6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c08:	4b4d      	ldr	r3, [pc, #308]	; (8000d40 <HAL_GPIO_Init+0x2b8>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a4c      	ldr	r2, [pc, #304]	; (8000d40 <HAL_GPIO_Init+0x2b8>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b4a      	ldr	r3, [pc, #296]	; (8000d40 <HAL_GPIO_Init+0x2b8>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c20:	4a48      	ldr	r2, [pc, #288]	; (8000d44 <HAL_GPIO_Init+0x2bc>)
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	3302      	adds	r3, #2
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4013      	ands	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a40      	ldr	r2, [pc, #256]	; (8000d48 <HAL_GPIO_Init+0x2c0>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d013      	beq.n	8000c74 <HAL_GPIO_Init+0x1ec>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a3f      	ldr	r2, [pc, #252]	; (8000d4c <HAL_GPIO_Init+0x2c4>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d00d      	beq.n	8000c70 <HAL_GPIO_Init+0x1e8>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a3e      	ldr	r2, [pc, #248]	; (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d007      	beq.n	8000c6c <HAL_GPIO_Init+0x1e4>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a3d      	ldr	r2, [pc, #244]	; (8000d54 <HAL_GPIO_Init+0x2cc>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d101      	bne.n	8000c68 <HAL_GPIO_Init+0x1e0>
 8000c64:	2303      	movs	r3, #3
 8000c66:	e006      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c68:	2304      	movs	r3, #4
 8000c6a:	e004      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	e002      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c70:	2301      	movs	r3, #1
 8000c72:	e000      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c74:	2300      	movs	r3, #0
 8000c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c78:	f002 0203 	and.w	r2, r2, #3
 8000c7c:	0092      	lsls	r2, r2, #2
 8000c7e:	4093      	lsls	r3, r2
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c86:	492f      	ldr	r1, [pc, #188]	; (8000d44 <HAL_GPIO_Init+0x2bc>)
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	089b      	lsrs	r3, r3, #2
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ca0:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	492c      	ldr	r1, [pc, #176]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	600b      	str	r3, [r1, #0]
 8000cac:	e006      	b.n	8000cbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cae:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	4928      	ldr	r1, [pc, #160]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cb8:	4013      	ands	r3, r2
 8000cba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d006      	beq.n	8000cd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cc8:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	4922      	ldr	r1, [pc, #136]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	604b      	str	r3, [r1, #4]
 8000cd4:	e006      	b.n	8000ce4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cd6:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	491e      	ldr	r1, [pc, #120]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d006      	beq.n	8000cfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	4918      	ldr	r1, [pc, #96]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	608b      	str	r3, [r1, #8]
 8000cfc:	e006      	b.n	8000d0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	4914      	ldr	r1, [pc, #80]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d08:	4013      	ands	r3, r2
 8000d0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d021      	beq.n	8000d5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	490e      	ldr	r1, [pc, #56]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	60cb      	str	r3, [r1, #12]
 8000d24:	e021      	b.n	8000d6a <HAL_GPIO_Init+0x2e2>
 8000d26:	bf00      	nop
 8000d28:	10320000 	.word	0x10320000
 8000d2c:	10310000 	.word	0x10310000
 8000d30:	10220000 	.word	0x10220000
 8000d34:	10210000 	.word	0x10210000
 8000d38:	10120000 	.word	0x10120000
 8000d3c:	10110000 	.word	0x10110000
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010000 	.word	0x40010000
 8000d48:	40010800 	.word	0x40010800
 8000d4c:	40010c00 	.word	0x40010c00
 8000d50:	40011000 	.word	0x40011000
 8000d54:	40011400 	.word	0x40011400
 8000d58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_GPIO_Init+0x304>)
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	43db      	mvns	r3, r3
 8000d64:	4909      	ldr	r1, [pc, #36]	; (8000d8c <HAL_GPIO_Init+0x304>)
 8000d66:	4013      	ands	r3, r2
 8000d68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d76:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f47f ae8e 	bne.w	8000a9c <HAL_GPIO_Init+0x14>
  }
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	372c      	adds	r7, #44	; 0x2c
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	40010400 	.word	0x40010400

08000d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000da0:	787b      	ldrb	r3, [r7, #1]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000da6:	887a      	ldrh	r2, [r7, #2]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dac:	e003      	b.n	8000db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dae:	887b      	ldrh	r3, [r7, #2]
 8000db0:	041a      	lsls	r2, r3, #16
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	611a      	str	r2, [r3, #16]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e272      	b.n	80012b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 8087 	beq.w	8000eee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000de0:	4b92      	ldr	r3, [pc, #584]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 030c 	and.w	r3, r3, #12
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	d00c      	beq.n	8000e06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dec:	4b8f      	ldr	r3, [pc, #572]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 030c 	and.w	r3, r3, #12
 8000df4:	2b08      	cmp	r3, #8
 8000df6:	d112      	bne.n	8000e1e <HAL_RCC_OscConfig+0x5e>
 8000df8:	4b8c      	ldr	r3, [pc, #560]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	d10b      	bne.n	8000e1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e06:	4b89      	ldr	r3, [pc, #548]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d06c      	beq.n	8000eec <HAL_RCC_OscConfig+0x12c>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d168      	bne.n	8000eec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e24c      	b.n	80012b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e26:	d106      	bne.n	8000e36 <HAL_RCC_OscConfig+0x76>
 8000e28:	4b80      	ldr	r3, [pc, #512]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a7f      	ldr	r2, [pc, #508]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	e02e      	b.n	8000e94 <HAL_RCC_OscConfig+0xd4>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10c      	bne.n	8000e58 <HAL_RCC_OscConfig+0x98>
 8000e3e:	4b7b      	ldr	r3, [pc, #492]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a7a      	ldr	r2, [pc, #488]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	4b78      	ldr	r3, [pc, #480]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a77      	ldr	r2, [pc, #476]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e01d      	b.n	8000e94 <HAL_RCC_OscConfig+0xd4>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e60:	d10c      	bne.n	8000e7c <HAL_RCC_OscConfig+0xbc>
 8000e62:	4b72      	ldr	r3, [pc, #456]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a71      	ldr	r2, [pc, #452]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	4b6f      	ldr	r3, [pc, #444]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a6e      	ldr	r2, [pc, #440]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	e00b      	b.n	8000e94 <HAL_RCC_OscConfig+0xd4>
 8000e7c:	4b6b      	ldr	r3, [pc, #428]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a6a      	ldr	r2, [pc, #424]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	4b68      	ldr	r3, [pc, #416]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a67      	ldr	r2, [pc, #412]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d013      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fce2 	bl	8000864 <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea4:	f7ff fcde 	bl	8000864 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b64      	cmp	r3, #100	; 0x64
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e200      	b.n	80012b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb6:	4b5d      	ldr	r3, [pc, #372]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0f0      	beq.n	8000ea4 <HAL_RCC_OscConfig+0xe4>
 8000ec2:	e014      	b.n	8000eee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fcce 	bl	8000864 <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ecc:	f7ff fcca 	bl	8000864 <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b64      	cmp	r3, #100	; 0x64
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e1ec      	b.n	80012b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ede:	4b53      	ldr	r3, [pc, #332]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f0      	bne.n	8000ecc <HAL_RCC_OscConfig+0x10c>
 8000eea:	e000      	b.n	8000eee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d063      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000efa:	4b4c      	ldr	r3, [pc, #304]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 030c 	and.w	r3, r3, #12
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d00b      	beq.n	8000f1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f06:	4b49      	ldr	r3, [pc, #292]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 030c 	and.w	r3, r3, #12
 8000f0e:	2b08      	cmp	r3, #8
 8000f10:	d11c      	bne.n	8000f4c <HAL_RCC_OscConfig+0x18c>
 8000f12:	4b46      	ldr	r3, [pc, #280]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d116      	bne.n	8000f4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1e:	4b43      	ldr	r3, [pc, #268]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d005      	beq.n	8000f36 <HAL_RCC_OscConfig+0x176>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d001      	beq.n	8000f36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e1c0      	b.n	80012b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f36:	4b3d      	ldr	r3, [pc, #244]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	4939      	ldr	r1, [pc, #228]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000f46:	4313      	orrs	r3, r2
 8000f48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f4a:	e03a      	b.n	8000fc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d020      	beq.n	8000f96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f54:	4b36      	ldr	r3, [pc, #216]	; (8001030 <HAL_RCC_OscConfig+0x270>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5a:	f7ff fc83 	bl	8000864 <HAL_GetTick>
 8000f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f60:	e008      	b.n	8000f74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f62:	f7ff fc7f 	bl	8000864 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e1a1      	b.n	80012b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f74:	4b2d      	ldr	r3, [pc, #180]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0f0      	beq.n	8000f62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f80:	4b2a      	ldr	r3, [pc, #168]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	4927      	ldr	r1, [pc, #156]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000f90:	4313      	orrs	r3, r2
 8000f92:	600b      	str	r3, [r1, #0]
 8000f94:	e015      	b.n	8000fc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f96:	4b26      	ldr	r3, [pc, #152]	; (8001030 <HAL_RCC_OscConfig+0x270>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fc62 	bl	8000864 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fa4:	f7ff fc5e 	bl	8000864 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e180      	b.n	80012b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f0      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0308 	and.w	r3, r3, #8
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d03a      	beq.n	8001044 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d019      	beq.n	800100a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_RCC_OscConfig+0x274>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fdc:	f7ff fc42 	bl	8000864 <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe4:	f7ff fc3e 	bl	8000864 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e160      	b.n	80012b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0f0      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f000 fad8 	bl	80015b8 <RCC_Delay>
 8001008:	e01c      	b.n	8001044 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_RCC_OscConfig+0x274>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001010:	f7ff fc28 	bl	8000864 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001016:	e00f      	b.n	8001038 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001018:	f7ff fc24 	bl	8000864 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d908      	bls.n	8001038 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e146      	b.n	80012b8 <HAL_RCC_OscConfig+0x4f8>
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000
 8001030:	42420000 	.word	0x42420000
 8001034:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001038:	4b92      	ldr	r3, [pc, #584]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1e9      	bne.n	8001018 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80a6 	beq.w	800119e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001056:	4b8b      	ldr	r3, [pc, #556]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10d      	bne.n	800107e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	4b88      	ldr	r3, [pc, #544]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	4a87      	ldr	r2, [pc, #540]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106c:	61d3      	str	r3, [r2, #28]
 800106e:	4b85      	ldr	r3, [pc, #532]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800107a:	2301      	movs	r3, #1
 800107c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107e:	4b82      	ldr	r3, [pc, #520]	; (8001288 <HAL_RCC_OscConfig+0x4c8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001086:	2b00      	cmp	r3, #0
 8001088:	d118      	bne.n	80010bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800108a:	4b7f      	ldr	r3, [pc, #508]	; (8001288 <HAL_RCC_OscConfig+0x4c8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a7e      	ldr	r2, [pc, #504]	; (8001288 <HAL_RCC_OscConfig+0x4c8>)
 8001090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001096:	f7ff fbe5 	bl	8000864 <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800109e:	f7ff fbe1 	bl	8000864 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b64      	cmp	r3, #100	; 0x64
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e103      	b.n	80012b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b0:	4b75      	ldr	r3, [pc, #468]	; (8001288 <HAL_RCC_OscConfig+0x4c8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f0      	beq.n	800109e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d106      	bne.n	80010d2 <HAL_RCC_OscConfig+0x312>
 80010c4:	4b6f      	ldr	r3, [pc, #444]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	4a6e      	ldr	r2, [pc, #440]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	6213      	str	r3, [r2, #32]
 80010d0:	e02d      	b.n	800112e <HAL_RCC_OscConfig+0x36e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x334>
 80010da:	4b6a      	ldr	r3, [pc, #424]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	4a69      	ldr	r2, [pc, #420]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	f023 0301 	bic.w	r3, r3, #1
 80010e4:	6213      	str	r3, [r2, #32]
 80010e6:	4b67      	ldr	r3, [pc, #412]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	4a66      	ldr	r2, [pc, #408]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	f023 0304 	bic.w	r3, r3, #4
 80010f0:	6213      	str	r3, [r2, #32]
 80010f2:	e01c      	b.n	800112e <HAL_RCC_OscConfig+0x36e>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	2b05      	cmp	r3, #5
 80010fa:	d10c      	bne.n	8001116 <HAL_RCC_OscConfig+0x356>
 80010fc:	4b61      	ldr	r3, [pc, #388]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	4a60      	ldr	r2, [pc, #384]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6213      	str	r3, [r2, #32]
 8001108:	4b5e      	ldr	r3, [pc, #376]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	4a5d      	ldr	r2, [pc, #372]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6213      	str	r3, [r2, #32]
 8001114:	e00b      	b.n	800112e <HAL_RCC_OscConfig+0x36e>
 8001116:	4b5b      	ldr	r3, [pc, #364]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	4a5a      	ldr	r2, [pc, #360]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 800111c:	f023 0301 	bic.w	r3, r3, #1
 8001120:	6213      	str	r3, [r2, #32]
 8001122:	4b58      	ldr	r3, [pc, #352]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	4a57      	ldr	r2, [pc, #348]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 8001128:	f023 0304 	bic.w	r3, r3, #4
 800112c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d015      	beq.n	8001162 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001136:	f7ff fb95 	bl	8000864 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800113c:	e00a      	b.n	8001154 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113e:	f7ff fb91 	bl	8000864 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	f241 3288 	movw	r2, #5000	; 0x1388
 800114c:	4293      	cmp	r3, r2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e0b1      	b.n	80012b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001154:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0ee      	beq.n	800113e <HAL_RCC_OscConfig+0x37e>
 8001160:	e014      	b.n	800118c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001162:	f7ff fb7f 	bl	8000864 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001168:	e00a      	b.n	8001180 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800116a:	f7ff fb7b 	bl	8000864 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	f241 3288 	movw	r2, #5000	; 0x1388
 8001178:	4293      	cmp	r3, r2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e09b      	b.n	80012b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1ee      	bne.n	800116a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800118c:	7dfb      	ldrb	r3, [r7, #23]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d105      	bne.n	800119e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001192:	4b3c      	ldr	r3, [pc, #240]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	4a3b      	ldr	r2, [pc, #236]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800119c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 8087 	beq.w	80012b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a8:	4b36      	ldr	r3, [pc, #216]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 030c 	and.w	r3, r3, #12
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d061      	beq.n	8001278 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d146      	bne.n	800124a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011bc:	4b33      	ldr	r3, [pc, #204]	; (800128c <HAL_RCC_OscConfig+0x4cc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c2:	f7ff fb4f 	bl	8000864 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ca:	f7ff fb4b 	bl	8000864 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e06d      	b.n	80012b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011dc:	4b29      	ldr	r3, [pc, #164]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f0      	bne.n	80011ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f0:	d108      	bne.n	8001204 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011f2:	4b24      	ldr	r3, [pc, #144]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	4921      	ldr	r1, [pc, #132]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 8001200:	4313      	orrs	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a19      	ldr	r1, [r3, #32]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	430b      	orrs	r3, r1
 8001216:	491b      	ldr	r1, [pc, #108]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 8001218:	4313      	orrs	r3, r2
 800121a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <HAL_RCC_OscConfig+0x4cc>)
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001222:	f7ff fb1f 	bl	8000864 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800122a:	f7ff fb1b 	bl	8000864 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e03d      	b.n	80012b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0x46a>
 8001248:	e035      	b.n	80012b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_RCC_OscConfig+0x4cc>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fb08 	bl	8000864 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001258:	f7ff fb04 	bl	8000864 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e026      	b.n	80012b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x498>
 8001276:	e01e      	b.n	80012b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d107      	bne.n	8001290 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e019      	b.n	80012b8 <HAL_RCC_OscConfig+0x4f8>
 8001284:	40021000 	.word	0x40021000
 8001288:	40007000 	.word	0x40007000
 800128c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_RCC_OscConfig+0x500>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d106      	bne.n	80012b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d001      	beq.n	80012b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40021000 	.word	0x40021000

080012c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0d0      	b.n	800147a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012d8:	4b6a      	ldr	r3, [pc, #424]	; (8001484 <HAL_RCC_ClockConfig+0x1c0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d910      	bls.n	8001308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e6:	4b67      	ldr	r3, [pc, #412]	; (8001484 <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 0207 	bic.w	r2, r3, #7
 80012ee:	4965      	ldr	r1, [pc, #404]	; (8001484 <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f6:	4b63      	ldr	r3, [pc, #396]	; (8001484 <HAL_RCC_ClockConfig+0x1c0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d001      	beq.n	8001308 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e0b8      	b.n	800147a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d020      	beq.n	8001356 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001320:	4b59      	ldr	r3, [pc, #356]	; (8001488 <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	4a58      	ldr	r2, [pc, #352]	; (8001488 <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800132a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001338:	4b53      	ldr	r3, [pc, #332]	; (8001488 <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	4a52      	ldr	r2, [pc, #328]	; (8001488 <HAL_RCC_ClockConfig+0x1c4>)
 800133e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001342:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001344:	4b50      	ldr	r3, [pc, #320]	; (8001488 <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	494d      	ldr	r1, [pc, #308]	; (8001488 <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	4313      	orrs	r3, r2
 8001354:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d040      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d107      	bne.n	800137a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	4b47      	ldr	r3, [pc, #284]	; (8001488 <HAL_RCC_ClockConfig+0x1c4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d115      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e07f      	b.n	800147a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d107      	bne.n	8001392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001382:	4b41      	ldr	r3, [pc, #260]	; (8001488 <HAL_RCC_ClockConfig+0x1c4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d109      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e073      	b.n	800147a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001392:	4b3d      	ldr	r3, [pc, #244]	; (8001488 <HAL_RCC_ClockConfig+0x1c4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e06b      	b.n	800147a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013a2:	4b39      	ldr	r3, [pc, #228]	; (8001488 <HAL_RCC_ClockConfig+0x1c4>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f023 0203 	bic.w	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	4936      	ldr	r1, [pc, #216]	; (8001488 <HAL_RCC_ClockConfig+0x1c4>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013b4:	f7ff fa56 	bl	8000864 <HAL_GetTick>
 80013b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ba:	e00a      	b.n	80013d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013bc:	f7ff fa52 	bl	8000864 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e053      	b.n	800147a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d2:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <HAL_RCC_ClockConfig+0x1c4>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 020c 	and.w	r2, r3, #12
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d1eb      	bne.n	80013bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013e4:	4b27      	ldr	r3, [pc, #156]	; (8001484 <HAL_RCC_ClockConfig+0x1c0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d210      	bcs.n	8001414 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f2:	4b24      	ldr	r3, [pc, #144]	; (8001484 <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 0207 	bic.w	r2, r3, #7
 80013fa:	4922      	ldr	r1, [pc, #136]	; (8001484 <HAL_RCC_ClockConfig+0x1c0>)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	4313      	orrs	r3, r2
 8001400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_RCC_ClockConfig+0x1c0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d001      	beq.n	8001414 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e032      	b.n	800147a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b00      	cmp	r3, #0
 800141e:	d008      	beq.n	8001432 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	4916      	ldr	r1, [pc, #88]	; (8001488 <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	4313      	orrs	r3, r2
 8001430:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	d009      	beq.n	8001452 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	490e      	ldr	r1, [pc, #56]	; (8001488 <HAL_RCC_ClockConfig+0x1c4>)
 800144e:	4313      	orrs	r3, r2
 8001450:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001452:	f000 f821 	bl	8001498 <HAL_RCC_GetSysClockFreq>
 8001456:	4602      	mov	r2, r0
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	091b      	lsrs	r3, r3, #4
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	490a      	ldr	r1, [pc, #40]	; (800148c <HAL_RCC_ClockConfig+0x1c8>)
 8001464:	5ccb      	ldrb	r3, [r1, r3]
 8001466:	fa22 f303 	lsr.w	r3, r2, r3
 800146a:	4a09      	ldr	r2, [pc, #36]	; (8001490 <HAL_RCC_ClockConfig+0x1cc>)
 800146c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_RCC_ClockConfig+0x1d0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff f9b4 	bl	80007e0 <HAL_InitTick>

  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40022000 	.word	0x40022000
 8001488:	40021000 	.word	0x40021000
 800148c:	08002dec 	.word	0x08002dec
 8001490:	20000000 	.word	0x20000000
 8001494:	20000004 	.word	0x20000004

08001498 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001498:	b490      	push	{r4, r7}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800149e:	4b29      	ldr	r3, [pc, #164]	; (8001544 <HAL_RCC_GetSysClockFreq+0xac>)
 80014a0:	1d3c      	adds	r4, r7, #4
 80014a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014a8:	f240 2301 	movw	r3, #513	; 0x201
 80014ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014c2:	4b21      	ldr	r3, [pc, #132]	; (8001548 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d002      	beq.n	80014d8 <HAL_RCC_GetSysClockFreq+0x40>
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d003      	beq.n	80014de <HAL_RCC_GetSysClockFreq+0x46>
 80014d6:	e02b      	b.n	8001530 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014d8:	4b1c      	ldr	r3, [pc, #112]	; (800154c <HAL_RCC_GetSysClockFreq+0xb4>)
 80014da:	623b      	str	r3, [r7, #32]
      break;
 80014dc:	e02b      	b.n	8001536 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	0c9b      	lsrs	r3, r3, #18
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3328      	adds	r3, #40	; 0x28
 80014e8:	443b      	add	r3, r7
 80014ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014ee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d012      	beq.n	8001520 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	0c5b      	lsrs	r3, r3, #17
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	3328      	adds	r3, #40	; 0x28
 8001506:	443b      	add	r3, r7
 8001508:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800150c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001512:	fb03 f202 	mul.w	r2, r3, r2
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	fbb2 f3f3 	udiv	r3, r2, r3
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
 800151e:	e004      	b.n	800152a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001524:	fb02 f303 	mul.w	r3, r2, r3
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	623b      	str	r3, [r7, #32]
      break;
 800152e:	e002      	b.n	8001536 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001532:	623b      	str	r3, [r7, #32]
      break;
 8001534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001536:	6a3b      	ldr	r3, [r7, #32]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3728      	adds	r7, #40	; 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bc90      	pop	{r4, r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	08002ddc 	.word	0x08002ddc
 8001548:	40021000 	.word	0x40021000
 800154c:	007a1200 	.word	0x007a1200
 8001550:	003d0900 	.word	0x003d0900

08001554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001558:	4b02      	ldr	r3, [pc, #8]	; (8001564 <HAL_RCC_GetHCLKFreq+0x10>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	20000000 	.word	0x20000000

08001568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800156c:	f7ff fff2 	bl	8001554 <HAL_RCC_GetHCLKFreq>
 8001570:	4602      	mov	r2, r0
 8001572:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	4903      	ldr	r1, [pc, #12]	; (800158c <HAL_RCC_GetPCLK1Freq+0x24>)
 800157e:	5ccb      	ldrb	r3, [r1, r3]
 8001580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001584:	4618      	mov	r0, r3
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40021000 	.word	0x40021000
 800158c:	08002dfc 	.word	0x08002dfc

08001590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001594:	f7ff ffde 	bl	8001554 <HAL_RCC_GetHCLKFreq>
 8001598:	4602      	mov	r2, r0
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	0adb      	lsrs	r3, r3, #11
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	4903      	ldr	r1, [pc, #12]	; (80015b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015a6:	5ccb      	ldrb	r3, [r1, r3]
 80015a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000
 80015b4:	08002dfc 	.word	0x08002dfc

080015b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <RCC_Delay+0x34>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <RCC_Delay+0x38>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	0a5b      	lsrs	r3, r3, #9
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015d4:	bf00      	nop
  }
  while (Delay --);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1e5a      	subs	r2, r3, #1
 80015da:	60fa      	str	r2, [r7, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f9      	bne.n	80015d4 <RCC_Delay+0x1c>
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	20000000 	.word	0x20000000
 80015f0:	10624dd3 	.word	0x10624dd3

080015f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e076      	b.n	80016f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	2b00      	cmp	r3, #0
 800160c:	d108      	bne.n	8001620 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001616:	d009      	beq.n	800162c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
 800161e:	e005      	b.n	800162c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d106      	bne.n	800164c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7fe ff94 	bl	8000574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2202      	movs	r2, #2
 8001650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001662:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b0:	ea42 0103 	orr.w	r1, r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	0c1a      	lsrs	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f002 0204 	and.w	r2, r2, #4
 80016d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	69da      	ldr	r2, [r3, #28]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	4613      	mov	r3, r2
 800170a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_SPI_Transmit+0x22>
 800171a:	2302      	movs	r3, #2
 800171c:	e126      	b.n	800196c <HAL_SPI_Transmit+0x270>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001726:	f7ff f89d 	bl	8000864 <HAL_GetTick>
 800172a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b01      	cmp	r3, #1
 800173a:	d002      	beq.n	8001742 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800173c:	2302      	movs	r3, #2
 800173e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001740:	e10b      	b.n	800195a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d002      	beq.n	800174e <HAL_SPI_Transmit+0x52>
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001752:	e102      	b.n	800195a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2203      	movs	r2, #3
 8001758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	88fa      	ldrh	r2, [r7, #6]
 800176c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	88fa      	ldrh	r2, [r7, #6]
 8001772:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800179a:	d10f      	bne.n	80017bc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c6:	2b40      	cmp	r3, #64	; 0x40
 80017c8:	d007      	beq.n	80017da <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017e2:	d14b      	bne.n	800187c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <HAL_SPI_Transmit+0xf6>
 80017ec:	8afb      	ldrh	r3, [r7, #22]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d13e      	bne.n	8001870 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	881a      	ldrh	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	1c9a      	adds	r2, r3, #2
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800180c:	b29b      	uxth	r3, r3
 800180e:	3b01      	subs	r3, #1
 8001810:	b29a      	uxth	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001816:	e02b      	b.n	8001870 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b02      	cmp	r3, #2
 8001824:	d112      	bne.n	800184c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	881a      	ldrh	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	1c9a      	adds	r2, r3, #2
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001840:	b29b      	uxth	r3, r3
 8001842:	3b01      	subs	r3, #1
 8001844:	b29a      	uxth	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	86da      	strh	r2, [r3, #54]	; 0x36
 800184a:	e011      	b.n	8001870 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800184c:	f7ff f80a 	bl	8000864 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d803      	bhi.n	8001864 <HAL_SPI_Transmit+0x168>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001862:	d102      	bne.n	800186a <HAL_SPI_Transmit+0x16e>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800186e:	e074      	b.n	800195a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001874:	b29b      	uxth	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ce      	bne.n	8001818 <HAL_SPI_Transmit+0x11c>
 800187a:	e04c      	b.n	8001916 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d002      	beq.n	800188a <HAL_SPI_Transmit+0x18e>
 8001884:	8afb      	ldrh	r3, [r7, #22]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d140      	bne.n	800190c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	330c      	adds	r3, #12
 8001894:	7812      	ldrb	r2, [r2, #0]
 8001896:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80018b0:	e02c      	b.n	800190c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d113      	bne.n	80018e8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	330c      	adds	r3, #12
 80018ca:	7812      	ldrb	r2, [r2, #0]
 80018cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80018e6:	e011      	b.n	800190c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018e8:	f7fe ffbc 	bl	8000864 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d803      	bhi.n	8001900 <HAL_SPI_Transmit+0x204>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018fe:	d102      	bne.n	8001906 <HAL_SPI_Transmit+0x20a>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	77fb      	strb	r3, [r7, #31]
          goto error;
 800190a:	e026      	b.n	800195a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001910:	b29b      	uxth	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1cd      	bne.n	80018b2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	6839      	ldr	r1, [r7, #0]
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 fbb8 	bl	8002090 <SPI_EndRxTxTransaction>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2220      	movs	r2, #32
 800192a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10a      	bne.n	800194a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	77fb      	strb	r3, [r7, #31]
 8001956:	e000      	b.n	800195a <HAL_SPI_Transmit+0x25e>
  }

error:
 8001958:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800196a:	7ffb      	ldrb	r3, [r7, #31]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3720      	adds	r7, #32
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af02      	add	r7, sp, #8
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	4613      	mov	r3, r2
 8001982:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001990:	d112      	bne.n	80019b8 <HAL_SPI_Receive+0x44>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10e      	bne.n	80019b8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2204      	movs	r2, #4
 800199e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80019a2:	88fa      	ldrh	r2, [r7, #6]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	4613      	mov	r3, r2
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f8f1 	bl	8001b96 <HAL_SPI_TransmitReceive>
 80019b4:	4603      	mov	r3, r0
 80019b6:	e0ea      	b.n	8001b8e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_SPI_Receive+0x52>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e0e3      	b.n	8001b8e <HAL_SPI_Receive+0x21a>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019ce:	f7fe ff49 	bl	8000864 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d002      	beq.n	80019e6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80019e0:	2302      	movs	r3, #2
 80019e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80019e4:	e0ca      	b.n	8001b7c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <HAL_SPI_Receive+0x7e>
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80019f6:	e0c1      	b.n	8001b7c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2204      	movs	r2, #4
 80019fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	88fa      	ldrh	r2, [r7, #6]
 8001a10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	88fa      	ldrh	r2, [r7, #6]
 8001a16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a3e:	d10f      	bne.n	8001a60 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a5e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a6a:	2b40      	cmp	r3, #64	; 0x40
 8001a6c:	d007      	beq.n	8001a7e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d162      	bne.n	8001b4c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001a86:	e02e      	b.n	8001ae6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d115      	bne.n	8001ac2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f103 020c 	add.w	r2, r3, #12
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa2:	7812      	ldrb	r2, [r2, #0]
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ac0:	e011      	b.n	8001ae6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ac2:	f7fe fecf 	bl	8000864 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d803      	bhi.n	8001ada <HAL_SPI_Receive+0x166>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ad8:	d102      	bne.n	8001ae0 <HAL_SPI_Receive+0x16c>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001ae4:	e04a      	b.n	8001b7c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1cb      	bne.n	8001a88 <HAL_SPI_Receive+0x114>
 8001af0:	e031      	b.n	8001b56 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d113      	bne.n	8001b28 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0a:	b292      	uxth	r2, r2
 8001b0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b12:	1c9a      	adds	r2, r3, #2
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b26:	e011      	b.n	8001b4c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b28:	f7fe fe9c 	bl	8000864 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d803      	bhi.n	8001b40 <HAL_SPI_Receive+0x1cc>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b3e:	d102      	bne.n	8001b46 <HAL_SPI_Receive+0x1d2>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d102      	bne.n	8001b4c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001b4a:	e017      	b.n	8001b7c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1cd      	bne.n	8001af2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	6839      	ldr	r1, [r7, #0]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 fa46 	bl	8001fec <SPI_EndRxTransaction>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	75fb      	strb	r3, [r7, #23]
 8001b78:	e000      	b.n	8001b7c <HAL_SPI_Receive+0x208>
  }

error :
 8001b7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b08c      	sub	sp, #48	; 0x30
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_SPI_TransmitReceive+0x26>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e18a      	b.n	8001ed2 <HAL_SPI_TransmitReceive+0x33c>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bc4:	f7fe fe4e 	bl	8000864 <HAL_GetTick>
 8001bc8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001bda:	887b      	ldrh	r3, [r7, #2]
 8001bdc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001bde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d00f      	beq.n	8001c06 <HAL_SPI_TransmitReceive+0x70>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bec:	d107      	bne.n	8001bfe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d103      	bne.n	8001bfe <HAL_SPI_TransmitReceive+0x68>
 8001bf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d003      	beq.n	8001c06 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001c04:	e15b      	b.n	8001ebe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_SPI_TransmitReceive+0x82>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <HAL_SPI_TransmitReceive+0x82>
 8001c12:	887b      	ldrh	r3, [r7, #2]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d103      	bne.n	8001c20 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001c1e:	e14e      	b.n	8001ebe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d003      	beq.n	8001c34 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2205      	movs	r2, #5
 8001c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	887a      	ldrh	r2, [r7, #2]
 8001c44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	887a      	ldrh	r2, [r7, #2]
 8001c4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	887a      	ldrh	r2, [r7, #2]
 8001c56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c74:	2b40      	cmp	r3, #64	; 0x40
 8001c76:	d007      	beq.n	8001c88 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c90:	d178      	bne.n	8001d84 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <HAL_SPI_TransmitReceive+0x10a>
 8001c9a:	8b7b      	ldrh	r3, [r7, #26]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d166      	bne.n	8001d6e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	881a      	ldrh	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	1c9a      	adds	r2, r3, #2
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cc4:	e053      	b.n	8001d6e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d11b      	bne.n	8001d0c <HAL_SPI_TransmitReceive+0x176>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d016      	beq.n	8001d0c <HAL_SPI_TransmitReceive+0x176>
 8001cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d113      	bne.n	8001d0c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	881a      	ldrh	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	1c9a      	adds	r2, r3, #2
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d119      	bne.n	8001d4e <HAL_SPI_TransmitReceive+0x1b8>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d014      	beq.n	8001d4e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2e:	b292      	uxth	r2, r2
 8001d30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d36:	1c9a      	adds	r2, r3, #2
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	3b01      	subs	r3, #1
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001d4e:	f7fe fd89 	bl	8000864 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d807      	bhi.n	8001d6e <HAL_SPI_TransmitReceive+0x1d8>
 8001d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d64:	d003      	beq.n	8001d6e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001d6c:	e0a7      	b.n	8001ebe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1a6      	bne.n	8001cc6 <HAL_SPI_TransmitReceive+0x130>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1a1      	bne.n	8001cc6 <HAL_SPI_TransmitReceive+0x130>
 8001d82:	e07c      	b.n	8001e7e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_SPI_TransmitReceive+0x1fc>
 8001d8c:	8b7b      	ldrh	r3, [r7, #26]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d16b      	bne.n	8001e6a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	330c      	adds	r3, #12
 8001d9c:	7812      	ldrb	r2, [r2, #0]
 8001d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001db8:	e057      	b.n	8001e6a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d11c      	bne.n	8001e02 <HAL_SPI_TransmitReceive+0x26c>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d017      	beq.n	8001e02 <HAL_SPI_TransmitReceive+0x26c>
 8001dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d114      	bne.n	8001e02 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	330c      	adds	r3, #12
 8001de2:	7812      	ldrb	r2, [r2, #0]
 8001de4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3b01      	subs	r3, #1
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d119      	bne.n	8001e44 <HAL_SPI_TransmitReceive+0x2ae>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d014      	beq.n	8001e44 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e40:	2301      	movs	r3, #1
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001e44:	f7fe fd0e 	bl	8000864 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d803      	bhi.n	8001e5c <HAL_SPI_TransmitReceive+0x2c6>
 8001e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e5a:	d102      	bne.n	8001e62 <HAL_SPI_TransmitReceive+0x2cc>
 8001e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d103      	bne.n	8001e6a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e68:	e029      	b.n	8001ebe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1a2      	bne.n	8001dba <HAL_SPI_TransmitReceive+0x224>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d19d      	bne.n	8001dba <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f904 	bl	8002090 <SPI_EndRxTxTransaction>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d006      	beq.n	8001e9c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2220      	movs	r2, #32
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001e9a:	e010      	b.n	8001ebe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10b      	bne.n	8001ebc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	e000      	b.n	8001ebe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001ebc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ece:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3730      	adds	r7, #48	; 0x30
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001eec:	f7fe fcba 	bl	8000864 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef4:	1a9b      	subs	r3, r3, r2
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	4413      	add	r3, r2
 8001efa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001efc:	f7fe fcb2 	bl	8000864 <HAL_GetTick>
 8001f00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f02:	4b39      	ldr	r3, [pc, #228]	; (8001fe8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	015b      	lsls	r3, r3, #5
 8001f08:	0d1b      	lsrs	r3, r3, #20
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	fb02 f303 	mul.w	r3, r2, r3
 8001f10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f12:	e054      	b.n	8001fbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f1a:	d050      	beq.n	8001fbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f1c:	f7fe fca2 	bl	8000864 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d902      	bls.n	8001f32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d13d      	bne.n	8001fae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f4a:	d111      	bne.n	8001f70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f54:	d004      	beq.n	8001f60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5e:	d107      	bne.n	8001f70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f78:	d10f      	bne.n	8001f9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e017      	b.n	8001fde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	bf0c      	ite	eq
 8001fce:	2301      	moveq	r3, #1
 8001fd0:	2300      	movne	r3, #0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d19b      	bne.n	8001f14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3720      	adds	r7, #32
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000000 	.word	0x20000000

08001fec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002000:	d111      	bne.n	8002026 <SPI_EndRxTransaction+0x3a>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800200a:	d004      	beq.n	8002016 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002014:	d107      	bne.n	8002026 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002024:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800202e:	d117      	bne.n	8002060 <SPI_EndRxTransaction+0x74>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002038:	d112      	bne.n	8002060 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2200      	movs	r2, #0
 8002042:	2101      	movs	r1, #1
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f7ff ff49 	bl	8001edc <SPI_WaitFlagStateUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01a      	beq.n	8002086 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002054:	f043 0220 	orr.w	r2, r3, #32
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e013      	b.n	8002088 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2200      	movs	r2, #0
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f7ff ff36 	bl	8001edc <SPI_WaitFlagStateUntilTimeout>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207a:	f043 0220 	orr.w	r2, r3, #32
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e000      	b.n	8002088 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2200      	movs	r2, #0
 80020a4:	2180      	movs	r1, #128	; 0x80
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f7ff ff18 	bl	8001edc <SPI_WaitFlagStateUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d007      	beq.n	80020c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b6:	f043 0220 	orr.w	r2, r3, #32
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e000      	b.n	80020c4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e03f      	b.n	800215e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d106      	bne.n	80020f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7fe fa88 	bl	8000608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2224      	movs	r2, #36	; 0x24
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800210e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f905 	bl	8002320 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002124:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002134:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002144:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2220      	movs	r2, #32
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b08a      	sub	sp, #40	; 0x28
 800216a:	af02      	add	r7, sp, #8
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	4613      	mov	r3, r2
 8002174:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b20      	cmp	r3, #32
 8002184:	d17c      	bne.n	8002280 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <HAL_UART_Transmit+0x2c>
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e075      	b.n	8002282 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_UART_Transmit+0x3e>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e06e      	b.n	8002282 <HAL_UART_Transmit+0x11c>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2221      	movs	r2, #33	; 0x21
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021ba:	f7fe fb53 	bl	8000864 <HAL_GetTick>
 80021be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	88fa      	ldrh	r2, [r7, #6]
 80021c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	88fa      	ldrh	r2, [r7, #6]
 80021ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d4:	d108      	bne.n	80021e8 <HAL_UART_Transmit+0x82>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d104      	bne.n	80021e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	e003      	b.n	80021f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80021f8:	e02a      	b.n	8002250 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2200      	movs	r2, #0
 8002202:	2180      	movs	r1, #128	; 0x80
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f840 	bl	800228a <UART_WaitOnFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e036      	b.n	8002282 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10b      	bne.n	8002232 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002228:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	3302      	adds	r3, #2
 800222e:	61bb      	str	r3, [r7, #24]
 8002230:	e007      	b.n	8002242 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	781a      	ldrb	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	3301      	adds	r3, #1
 8002240:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002254:	b29b      	uxth	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1cf      	bne.n	80021fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2200      	movs	r2, #0
 8002262:	2140      	movs	r1, #64	; 0x40
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f810 	bl	800228a <UART_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e006      	b.n	8002282 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	e000      	b.n	8002282 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002280:	2302      	movs	r3, #2
  }
}
 8002282:	4618      	mov	r0, r3
 8002284:	3720      	adds	r7, #32
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b084      	sub	sp, #16
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	4613      	mov	r3, r2
 8002298:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800229a:	e02c      	b.n	80022f6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022a2:	d028      	beq.n	80022f6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d007      	beq.n	80022ba <UART_WaitOnFlagUntilTimeout+0x30>
 80022aa:	f7fe fadb 	bl	8000864 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d21d      	bcs.n	80022f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80022c8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0201 	bic.w	r2, r2, #1
 80022d8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2220      	movs	r2, #32
 80022de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e00f      	b.n	8002316 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4013      	ands	r3, r2
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	429a      	cmp	r2, r3
 8002304:	bf0c      	ite	eq
 8002306:	2301      	moveq	r3, #1
 8002308:	2300      	movne	r3, #0
 800230a:	b2db      	uxtb	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	429a      	cmp	r2, r3
 8002312:	d0c3      	beq.n	800229c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800235a:	f023 030c 	bic.w	r3, r3, #12
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	430b      	orrs	r3, r1
 8002366:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699a      	ldr	r2, [r3, #24]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a2c      	ldr	r2, [pc, #176]	; (8002434 <UART_SetConfig+0x114>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d103      	bne.n	8002390 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002388:	f7ff f902 	bl	8001590 <HAL_RCC_GetPCLK2Freq>
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	e002      	b.n	8002396 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002390:	f7ff f8ea 	bl	8001568 <HAL_RCC_GetPCLK1Freq>
 8002394:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	009a      	lsls	r2, r3, #2
 80023a0:	441a      	add	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ac:	4a22      	ldr	r2, [pc, #136]	; (8002438 <UART_SetConfig+0x118>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	0119      	lsls	r1, r3, #4
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	009a      	lsls	r2, r3, #2
 80023c0:	441a      	add	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023cc:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <UART_SetConfig+0x118>)
 80023ce:	fba3 0302 	umull	r0, r3, r3, r2
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2064      	movs	r0, #100	; 0x64
 80023d6:	fb00 f303 	mul.w	r3, r0, r3
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	3332      	adds	r3, #50	; 0x32
 80023e0:	4a15      	ldr	r2, [pc, #84]	; (8002438 <UART_SetConfig+0x118>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ec:	4419      	add	r1, r3
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	009a      	lsls	r2, r3, #2
 80023f8:	441a      	add	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	fbb2 f2f3 	udiv	r2, r2, r3
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <UART_SetConfig+0x118>)
 8002406:	fba3 0302 	umull	r0, r3, r3, r2
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	2064      	movs	r0, #100	; 0x64
 800240e:	fb00 f303 	mul.w	r3, r0, r3
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	3332      	adds	r3, #50	; 0x32
 8002418:	4a07      	ldr	r2, [pc, #28]	; (8002438 <UART_SetConfig+0x118>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	f003 020f 	and.w	r2, r3, #15
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	440a      	add	r2, r1
 800242a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40013800 	.word	0x40013800
 8002438:	51eb851f 	.word	0x51eb851f

0800243c <__errno>:
 800243c:	4b01      	ldr	r3, [pc, #4]	; (8002444 <__errno+0x8>)
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	2000000c 	.word	0x2000000c

08002448 <__libc_init_array>:
 8002448:	b570      	push	{r4, r5, r6, lr}
 800244a:	2600      	movs	r6, #0
 800244c:	4d0c      	ldr	r5, [pc, #48]	; (8002480 <__libc_init_array+0x38>)
 800244e:	4c0d      	ldr	r4, [pc, #52]	; (8002484 <__libc_init_array+0x3c>)
 8002450:	1b64      	subs	r4, r4, r5
 8002452:	10a4      	asrs	r4, r4, #2
 8002454:	42a6      	cmp	r6, r4
 8002456:	d109      	bne.n	800246c <__libc_init_array+0x24>
 8002458:	f000 fcaa 	bl	8002db0 <_init>
 800245c:	2600      	movs	r6, #0
 800245e:	4d0a      	ldr	r5, [pc, #40]	; (8002488 <__libc_init_array+0x40>)
 8002460:	4c0a      	ldr	r4, [pc, #40]	; (800248c <__libc_init_array+0x44>)
 8002462:	1b64      	subs	r4, r4, r5
 8002464:	10a4      	asrs	r4, r4, #2
 8002466:	42a6      	cmp	r6, r4
 8002468:	d105      	bne.n	8002476 <__libc_init_array+0x2e>
 800246a:	bd70      	pop	{r4, r5, r6, pc}
 800246c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002470:	4798      	blx	r3
 8002472:	3601      	adds	r6, #1
 8002474:	e7ee      	b.n	8002454 <__libc_init_array+0xc>
 8002476:	f855 3b04 	ldr.w	r3, [r5], #4
 800247a:	4798      	blx	r3
 800247c:	3601      	adds	r6, #1
 800247e:	e7f2      	b.n	8002466 <__libc_init_array+0x1e>
 8002480:	08002e38 	.word	0x08002e38
 8002484:	08002e38 	.word	0x08002e38
 8002488:	08002e38 	.word	0x08002e38
 800248c:	08002e3c 	.word	0x08002e3c

08002490 <memset>:
 8002490:	4603      	mov	r3, r0
 8002492:	4402      	add	r2, r0
 8002494:	4293      	cmp	r3, r2
 8002496:	d100      	bne.n	800249a <memset+0xa>
 8002498:	4770      	bx	lr
 800249a:	f803 1b01 	strb.w	r1, [r3], #1
 800249e:	e7f9      	b.n	8002494 <memset+0x4>

080024a0 <siprintf>:
 80024a0:	b40e      	push	{r1, r2, r3}
 80024a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80024a6:	b500      	push	{lr}
 80024a8:	b09c      	sub	sp, #112	; 0x70
 80024aa:	ab1d      	add	r3, sp, #116	; 0x74
 80024ac:	9002      	str	r0, [sp, #8]
 80024ae:	9006      	str	r0, [sp, #24]
 80024b0:	9107      	str	r1, [sp, #28]
 80024b2:	9104      	str	r1, [sp, #16]
 80024b4:	4808      	ldr	r0, [pc, #32]	; (80024d8 <siprintf+0x38>)
 80024b6:	4909      	ldr	r1, [pc, #36]	; (80024dc <siprintf+0x3c>)
 80024b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80024bc:	9105      	str	r1, [sp, #20]
 80024be:	6800      	ldr	r0, [r0, #0]
 80024c0:	a902      	add	r1, sp, #8
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	f000 f876 	bl	80025b4 <_svfiprintf_r>
 80024c8:	2200      	movs	r2, #0
 80024ca:	9b02      	ldr	r3, [sp, #8]
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	b01c      	add	sp, #112	; 0x70
 80024d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80024d4:	b003      	add	sp, #12
 80024d6:	4770      	bx	lr
 80024d8:	2000000c 	.word	0x2000000c
 80024dc:	ffff0208 	.word	0xffff0208

080024e0 <strcat>:
 80024e0:	4602      	mov	r2, r0
 80024e2:	b510      	push	{r4, lr}
 80024e4:	7814      	ldrb	r4, [r2, #0]
 80024e6:	4613      	mov	r3, r2
 80024e8:	3201      	adds	r2, #1
 80024ea:	2c00      	cmp	r4, #0
 80024ec:	d1fa      	bne.n	80024e4 <strcat+0x4>
 80024ee:	3b01      	subs	r3, #1
 80024f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80024f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80024f8:	2a00      	cmp	r2, #0
 80024fa:	d1f9      	bne.n	80024f0 <strcat+0x10>
 80024fc:	bd10      	pop	{r4, pc}

080024fe <__ssputs_r>:
 80024fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002502:	688e      	ldr	r6, [r1, #8]
 8002504:	4682      	mov	sl, r0
 8002506:	429e      	cmp	r6, r3
 8002508:	460c      	mov	r4, r1
 800250a:	4690      	mov	r8, r2
 800250c:	461f      	mov	r7, r3
 800250e:	d838      	bhi.n	8002582 <__ssputs_r+0x84>
 8002510:	898a      	ldrh	r2, [r1, #12]
 8002512:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002516:	d032      	beq.n	800257e <__ssputs_r+0x80>
 8002518:	6825      	ldr	r5, [r4, #0]
 800251a:	6909      	ldr	r1, [r1, #16]
 800251c:	3301      	adds	r3, #1
 800251e:	eba5 0901 	sub.w	r9, r5, r1
 8002522:	6965      	ldr	r5, [r4, #20]
 8002524:	444b      	add	r3, r9
 8002526:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800252a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800252e:	106d      	asrs	r5, r5, #1
 8002530:	429d      	cmp	r5, r3
 8002532:	bf38      	it	cc
 8002534:	461d      	movcc	r5, r3
 8002536:	0553      	lsls	r3, r2, #21
 8002538:	d531      	bpl.n	800259e <__ssputs_r+0xa0>
 800253a:	4629      	mov	r1, r5
 800253c:	f000 fb6e 	bl	8002c1c <_malloc_r>
 8002540:	4606      	mov	r6, r0
 8002542:	b950      	cbnz	r0, 800255a <__ssputs_r+0x5c>
 8002544:	230c      	movs	r3, #12
 8002546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800254a:	f8ca 3000 	str.w	r3, [sl]
 800254e:	89a3      	ldrh	r3, [r4, #12]
 8002550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002554:	81a3      	strh	r3, [r4, #12]
 8002556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800255a:	464a      	mov	r2, r9
 800255c:	6921      	ldr	r1, [r4, #16]
 800255e:	f000 facd 	bl	8002afc <memcpy>
 8002562:	89a3      	ldrh	r3, [r4, #12]
 8002564:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256c:	81a3      	strh	r3, [r4, #12]
 800256e:	6126      	str	r6, [r4, #16]
 8002570:	444e      	add	r6, r9
 8002572:	6026      	str	r6, [r4, #0]
 8002574:	463e      	mov	r6, r7
 8002576:	6165      	str	r5, [r4, #20]
 8002578:	eba5 0509 	sub.w	r5, r5, r9
 800257c:	60a5      	str	r5, [r4, #8]
 800257e:	42be      	cmp	r6, r7
 8002580:	d900      	bls.n	8002584 <__ssputs_r+0x86>
 8002582:	463e      	mov	r6, r7
 8002584:	4632      	mov	r2, r6
 8002586:	4641      	mov	r1, r8
 8002588:	6820      	ldr	r0, [r4, #0]
 800258a:	f000 fac5 	bl	8002b18 <memmove>
 800258e:	68a3      	ldr	r3, [r4, #8]
 8002590:	2000      	movs	r0, #0
 8002592:	1b9b      	subs	r3, r3, r6
 8002594:	60a3      	str	r3, [r4, #8]
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	4433      	add	r3, r6
 800259a:	6023      	str	r3, [r4, #0]
 800259c:	e7db      	b.n	8002556 <__ssputs_r+0x58>
 800259e:	462a      	mov	r2, r5
 80025a0:	f000 fbb0 	bl	8002d04 <_realloc_r>
 80025a4:	4606      	mov	r6, r0
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d1e1      	bne.n	800256e <__ssputs_r+0x70>
 80025aa:	4650      	mov	r0, sl
 80025ac:	6921      	ldr	r1, [r4, #16]
 80025ae:	f000 facd 	bl	8002b4c <_free_r>
 80025b2:	e7c7      	b.n	8002544 <__ssputs_r+0x46>

080025b4 <_svfiprintf_r>:
 80025b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b8:	4698      	mov	r8, r3
 80025ba:	898b      	ldrh	r3, [r1, #12]
 80025bc:	4607      	mov	r7, r0
 80025be:	061b      	lsls	r3, r3, #24
 80025c0:	460d      	mov	r5, r1
 80025c2:	4614      	mov	r4, r2
 80025c4:	b09d      	sub	sp, #116	; 0x74
 80025c6:	d50e      	bpl.n	80025e6 <_svfiprintf_r+0x32>
 80025c8:	690b      	ldr	r3, [r1, #16]
 80025ca:	b963      	cbnz	r3, 80025e6 <_svfiprintf_r+0x32>
 80025cc:	2140      	movs	r1, #64	; 0x40
 80025ce:	f000 fb25 	bl	8002c1c <_malloc_r>
 80025d2:	6028      	str	r0, [r5, #0]
 80025d4:	6128      	str	r0, [r5, #16]
 80025d6:	b920      	cbnz	r0, 80025e2 <_svfiprintf_r+0x2e>
 80025d8:	230c      	movs	r3, #12
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025e0:	e0d1      	b.n	8002786 <_svfiprintf_r+0x1d2>
 80025e2:	2340      	movs	r3, #64	; 0x40
 80025e4:	616b      	str	r3, [r5, #20]
 80025e6:	2300      	movs	r3, #0
 80025e8:	9309      	str	r3, [sp, #36]	; 0x24
 80025ea:	2320      	movs	r3, #32
 80025ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025f0:	2330      	movs	r3, #48	; 0x30
 80025f2:	f04f 0901 	mov.w	r9, #1
 80025f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80025fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80027a0 <_svfiprintf_r+0x1ec>
 80025fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002602:	4623      	mov	r3, r4
 8002604:	469a      	mov	sl, r3
 8002606:	f813 2b01 	ldrb.w	r2, [r3], #1
 800260a:	b10a      	cbz	r2, 8002610 <_svfiprintf_r+0x5c>
 800260c:	2a25      	cmp	r2, #37	; 0x25
 800260e:	d1f9      	bne.n	8002604 <_svfiprintf_r+0x50>
 8002610:	ebba 0b04 	subs.w	fp, sl, r4
 8002614:	d00b      	beq.n	800262e <_svfiprintf_r+0x7a>
 8002616:	465b      	mov	r3, fp
 8002618:	4622      	mov	r2, r4
 800261a:	4629      	mov	r1, r5
 800261c:	4638      	mov	r0, r7
 800261e:	f7ff ff6e 	bl	80024fe <__ssputs_r>
 8002622:	3001      	adds	r0, #1
 8002624:	f000 80aa 	beq.w	800277c <_svfiprintf_r+0x1c8>
 8002628:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800262a:	445a      	add	r2, fp
 800262c:	9209      	str	r2, [sp, #36]	; 0x24
 800262e:	f89a 3000 	ldrb.w	r3, [sl]
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80a2 	beq.w	800277c <_svfiprintf_r+0x1c8>
 8002638:	2300      	movs	r3, #0
 800263a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800263e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002642:	f10a 0a01 	add.w	sl, sl, #1
 8002646:	9304      	str	r3, [sp, #16]
 8002648:	9307      	str	r3, [sp, #28]
 800264a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800264e:	931a      	str	r3, [sp, #104]	; 0x68
 8002650:	4654      	mov	r4, sl
 8002652:	2205      	movs	r2, #5
 8002654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002658:	4851      	ldr	r0, [pc, #324]	; (80027a0 <_svfiprintf_r+0x1ec>)
 800265a:	f000 fa41 	bl	8002ae0 <memchr>
 800265e:	9a04      	ldr	r2, [sp, #16]
 8002660:	b9d8      	cbnz	r0, 800269a <_svfiprintf_r+0xe6>
 8002662:	06d0      	lsls	r0, r2, #27
 8002664:	bf44      	itt	mi
 8002666:	2320      	movmi	r3, #32
 8002668:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800266c:	0711      	lsls	r1, r2, #28
 800266e:	bf44      	itt	mi
 8002670:	232b      	movmi	r3, #43	; 0x2b
 8002672:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002676:	f89a 3000 	ldrb.w	r3, [sl]
 800267a:	2b2a      	cmp	r3, #42	; 0x2a
 800267c:	d015      	beq.n	80026aa <_svfiprintf_r+0xf6>
 800267e:	4654      	mov	r4, sl
 8002680:	2000      	movs	r0, #0
 8002682:	f04f 0c0a 	mov.w	ip, #10
 8002686:	9a07      	ldr	r2, [sp, #28]
 8002688:	4621      	mov	r1, r4
 800268a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800268e:	3b30      	subs	r3, #48	; 0x30
 8002690:	2b09      	cmp	r3, #9
 8002692:	d94e      	bls.n	8002732 <_svfiprintf_r+0x17e>
 8002694:	b1b0      	cbz	r0, 80026c4 <_svfiprintf_r+0x110>
 8002696:	9207      	str	r2, [sp, #28]
 8002698:	e014      	b.n	80026c4 <_svfiprintf_r+0x110>
 800269a:	eba0 0308 	sub.w	r3, r0, r8
 800269e:	fa09 f303 	lsl.w	r3, r9, r3
 80026a2:	4313      	orrs	r3, r2
 80026a4:	46a2      	mov	sl, r4
 80026a6:	9304      	str	r3, [sp, #16]
 80026a8:	e7d2      	b.n	8002650 <_svfiprintf_r+0x9c>
 80026aa:	9b03      	ldr	r3, [sp, #12]
 80026ac:	1d19      	adds	r1, r3, #4
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	9103      	str	r1, [sp, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	bfbb      	ittet	lt
 80026b6:	425b      	neglt	r3, r3
 80026b8:	f042 0202 	orrlt.w	r2, r2, #2
 80026bc:	9307      	strge	r3, [sp, #28]
 80026be:	9307      	strlt	r3, [sp, #28]
 80026c0:	bfb8      	it	lt
 80026c2:	9204      	strlt	r2, [sp, #16]
 80026c4:	7823      	ldrb	r3, [r4, #0]
 80026c6:	2b2e      	cmp	r3, #46	; 0x2e
 80026c8:	d10c      	bne.n	80026e4 <_svfiprintf_r+0x130>
 80026ca:	7863      	ldrb	r3, [r4, #1]
 80026cc:	2b2a      	cmp	r3, #42	; 0x2a
 80026ce:	d135      	bne.n	800273c <_svfiprintf_r+0x188>
 80026d0:	9b03      	ldr	r3, [sp, #12]
 80026d2:	3402      	adds	r4, #2
 80026d4:	1d1a      	adds	r2, r3, #4
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	9203      	str	r2, [sp, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	bfb8      	it	lt
 80026de:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80026e2:	9305      	str	r3, [sp, #20]
 80026e4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80027a4 <_svfiprintf_r+0x1f0>
 80026e8:	2203      	movs	r2, #3
 80026ea:	4650      	mov	r0, sl
 80026ec:	7821      	ldrb	r1, [r4, #0]
 80026ee:	f000 f9f7 	bl	8002ae0 <memchr>
 80026f2:	b140      	cbz	r0, 8002706 <_svfiprintf_r+0x152>
 80026f4:	2340      	movs	r3, #64	; 0x40
 80026f6:	eba0 000a 	sub.w	r0, r0, sl
 80026fa:	fa03 f000 	lsl.w	r0, r3, r0
 80026fe:	9b04      	ldr	r3, [sp, #16]
 8002700:	3401      	adds	r4, #1
 8002702:	4303      	orrs	r3, r0
 8002704:	9304      	str	r3, [sp, #16]
 8002706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800270a:	2206      	movs	r2, #6
 800270c:	4826      	ldr	r0, [pc, #152]	; (80027a8 <_svfiprintf_r+0x1f4>)
 800270e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002712:	f000 f9e5 	bl	8002ae0 <memchr>
 8002716:	2800      	cmp	r0, #0
 8002718:	d038      	beq.n	800278c <_svfiprintf_r+0x1d8>
 800271a:	4b24      	ldr	r3, [pc, #144]	; (80027ac <_svfiprintf_r+0x1f8>)
 800271c:	bb1b      	cbnz	r3, 8002766 <_svfiprintf_r+0x1b2>
 800271e:	9b03      	ldr	r3, [sp, #12]
 8002720:	3307      	adds	r3, #7
 8002722:	f023 0307 	bic.w	r3, r3, #7
 8002726:	3308      	adds	r3, #8
 8002728:	9303      	str	r3, [sp, #12]
 800272a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800272c:	4433      	add	r3, r6
 800272e:	9309      	str	r3, [sp, #36]	; 0x24
 8002730:	e767      	b.n	8002602 <_svfiprintf_r+0x4e>
 8002732:	460c      	mov	r4, r1
 8002734:	2001      	movs	r0, #1
 8002736:	fb0c 3202 	mla	r2, ip, r2, r3
 800273a:	e7a5      	b.n	8002688 <_svfiprintf_r+0xd4>
 800273c:	2300      	movs	r3, #0
 800273e:	f04f 0c0a 	mov.w	ip, #10
 8002742:	4619      	mov	r1, r3
 8002744:	3401      	adds	r4, #1
 8002746:	9305      	str	r3, [sp, #20]
 8002748:	4620      	mov	r0, r4
 800274a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800274e:	3a30      	subs	r2, #48	; 0x30
 8002750:	2a09      	cmp	r2, #9
 8002752:	d903      	bls.n	800275c <_svfiprintf_r+0x1a8>
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0c5      	beq.n	80026e4 <_svfiprintf_r+0x130>
 8002758:	9105      	str	r1, [sp, #20]
 800275a:	e7c3      	b.n	80026e4 <_svfiprintf_r+0x130>
 800275c:	4604      	mov	r4, r0
 800275e:	2301      	movs	r3, #1
 8002760:	fb0c 2101 	mla	r1, ip, r1, r2
 8002764:	e7f0      	b.n	8002748 <_svfiprintf_r+0x194>
 8002766:	ab03      	add	r3, sp, #12
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	462a      	mov	r2, r5
 800276c:	4638      	mov	r0, r7
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <_svfiprintf_r+0x1fc>)
 8002770:	a904      	add	r1, sp, #16
 8002772:	f3af 8000 	nop.w
 8002776:	1c42      	adds	r2, r0, #1
 8002778:	4606      	mov	r6, r0
 800277a:	d1d6      	bne.n	800272a <_svfiprintf_r+0x176>
 800277c:	89ab      	ldrh	r3, [r5, #12]
 800277e:	065b      	lsls	r3, r3, #25
 8002780:	f53f af2c 	bmi.w	80025dc <_svfiprintf_r+0x28>
 8002784:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002786:	b01d      	add	sp, #116	; 0x74
 8002788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800278c:	ab03      	add	r3, sp, #12
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	462a      	mov	r2, r5
 8002792:	4638      	mov	r0, r7
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <_svfiprintf_r+0x1fc>)
 8002796:	a904      	add	r1, sp, #16
 8002798:	f000 f87c 	bl	8002894 <_printf_i>
 800279c:	e7eb      	b.n	8002776 <_svfiprintf_r+0x1c2>
 800279e:	bf00      	nop
 80027a0:	08002e04 	.word	0x08002e04
 80027a4:	08002e0a 	.word	0x08002e0a
 80027a8:	08002e0e 	.word	0x08002e0e
 80027ac:	00000000 	.word	0x00000000
 80027b0:	080024ff 	.word	0x080024ff

080027b4 <_printf_common>:
 80027b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027b8:	4616      	mov	r6, r2
 80027ba:	4699      	mov	r9, r3
 80027bc:	688a      	ldr	r2, [r1, #8]
 80027be:	690b      	ldr	r3, [r1, #16]
 80027c0:	4607      	mov	r7, r0
 80027c2:	4293      	cmp	r3, r2
 80027c4:	bfb8      	it	lt
 80027c6:	4613      	movlt	r3, r2
 80027c8:	6033      	str	r3, [r6, #0]
 80027ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027ce:	460c      	mov	r4, r1
 80027d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027d4:	b10a      	cbz	r2, 80027da <_printf_common+0x26>
 80027d6:	3301      	adds	r3, #1
 80027d8:	6033      	str	r3, [r6, #0]
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	0699      	lsls	r1, r3, #26
 80027de:	bf42      	ittt	mi
 80027e0:	6833      	ldrmi	r3, [r6, #0]
 80027e2:	3302      	addmi	r3, #2
 80027e4:	6033      	strmi	r3, [r6, #0]
 80027e6:	6825      	ldr	r5, [r4, #0]
 80027e8:	f015 0506 	ands.w	r5, r5, #6
 80027ec:	d106      	bne.n	80027fc <_printf_common+0x48>
 80027ee:	f104 0a19 	add.w	sl, r4, #25
 80027f2:	68e3      	ldr	r3, [r4, #12]
 80027f4:	6832      	ldr	r2, [r6, #0]
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	42ab      	cmp	r3, r5
 80027fa:	dc28      	bgt.n	800284e <_printf_common+0x9a>
 80027fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002800:	1e13      	subs	r3, r2, #0
 8002802:	6822      	ldr	r2, [r4, #0]
 8002804:	bf18      	it	ne
 8002806:	2301      	movne	r3, #1
 8002808:	0692      	lsls	r2, r2, #26
 800280a:	d42d      	bmi.n	8002868 <_printf_common+0xb4>
 800280c:	4649      	mov	r1, r9
 800280e:	4638      	mov	r0, r7
 8002810:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002814:	47c0      	blx	r8
 8002816:	3001      	adds	r0, #1
 8002818:	d020      	beq.n	800285c <_printf_common+0xa8>
 800281a:	6823      	ldr	r3, [r4, #0]
 800281c:	68e5      	ldr	r5, [r4, #12]
 800281e:	f003 0306 	and.w	r3, r3, #6
 8002822:	2b04      	cmp	r3, #4
 8002824:	bf18      	it	ne
 8002826:	2500      	movne	r5, #0
 8002828:	6832      	ldr	r2, [r6, #0]
 800282a:	f04f 0600 	mov.w	r6, #0
 800282e:	68a3      	ldr	r3, [r4, #8]
 8002830:	bf08      	it	eq
 8002832:	1aad      	subeq	r5, r5, r2
 8002834:	6922      	ldr	r2, [r4, #16]
 8002836:	bf08      	it	eq
 8002838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800283c:	4293      	cmp	r3, r2
 800283e:	bfc4      	itt	gt
 8002840:	1a9b      	subgt	r3, r3, r2
 8002842:	18ed      	addgt	r5, r5, r3
 8002844:	341a      	adds	r4, #26
 8002846:	42b5      	cmp	r5, r6
 8002848:	d11a      	bne.n	8002880 <_printf_common+0xcc>
 800284a:	2000      	movs	r0, #0
 800284c:	e008      	b.n	8002860 <_printf_common+0xac>
 800284e:	2301      	movs	r3, #1
 8002850:	4652      	mov	r2, sl
 8002852:	4649      	mov	r1, r9
 8002854:	4638      	mov	r0, r7
 8002856:	47c0      	blx	r8
 8002858:	3001      	adds	r0, #1
 800285a:	d103      	bne.n	8002864 <_printf_common+0xb0>
 800285c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002864:	3501      	adds	r5, #1
 8002866:	e7c4      	b.n	80027f2 <_printf_common+0x3e>
 8002868:	2030      	movs	r0, #48	; 0x30
 800286a:	18e1      	adds	r1, r4, r3
 800286c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002876:	4422      	add	r2, r4
 8002878:	3302      	adds	r3, #2
 800287a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800287e:	e7c5      	b.n	800280c <_printf_common+0x58>
 8002880:	2301      	movs	r3, #1
 8002882:	4622      	mov	r2, r4
 8002884:	4649      	mov	r1, r9
 8002886:	4638      	mov	r0, r7
 8002888:	47c0      	blx	r8
 800288a:	3001      	adds	r0, #1
 800288c:	d0e6      	beq.n	800285c <_printf_common+0xa8>
 800288e:	3601      	adds	r6, #1
 8002890:	e7d9      	b.n	8002846 <_printf_common+0x92>
	...

08002894 <_printf_i>:
 8002894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002898:	7e0f      	ldrb	r7, [r1, #24]
 800289a:	4691      	mov	r9, r2
 800289c:	2f78      	cmp	r7, #120	; 0x78
 800289e:	4680      	mov	r8, r0
 80028a0:	460c      	mov	r4, r1
 80028a2:	469a      	mov	sl, r3
 80028a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80028a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80028aa:	d807      	bhi.n	80028bc <_printf_i+0x28>
 80028ac:	2f62      	cmp	r7, #98	; 0x62
 80028ae:	d80a      	bhi.n	80028c6 <_printf_i+0x32>
 80028b0:	2f00      	cmp	r7, #0
 80028b2:	f000 80d9 	beq.w	8002a68 <_printf_i+0x1d4>
 80028b6:	2f58      	cmp	r7, #88	; 0x58
 80028b8:	f000 80a4 	beq.w	8002a04 <_printf_i+0x170>
 80028bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028c4:	e03a      	b.n	800293c <_printf_i+0xa8>
 80028c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80028ca:	2b15      	cmp	r3, #21
 80028cc:	d8f6      	bhi.n	80028bc <_printf_i+0x28>
 80028ce:	a101      	add	r1, pc, #4	; (adr r1, 80028d4 <_printf_i+0x40>)
 80028d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80028d4:	0800292d 	.word	0x0800292d
 80028d8:	08002941 	.word	0x08002941
 80028dc:	080028bd 	.word	0x080028bd
 80028e0:	080028bd 	.word	0x080028bd
 80028e4:	080028bd 	.word	0x080028bd
 80028e8:	080028bd 	.word	0x080028bd
 80028ec:	08002941 	.word	0x08002941
 80028f0:	080028bd 	.word	0x080028bd
 80028f4:	080028bd 	.word	0x080028bd
 80028f8:	080028bd 	.word	0x080028bd
 80028fc:	080028bd 	.word	0x080028bd
 8002900:	08002a4f 	.word	0x08002a4f
 8002904:	08002971 	.word	0x08002971
 8002908:	08002a31 	.word	0x08002a31
 800290c:	080028bd 	.word	0x080028bd
 8002910:	080028bd 	.word	0x080028bd
 8002914:	08002a71 	.word	0x08002a71
 8002918:	080028bd 	.word	0x080028bd
 800291c:	08002971 	.word	0x08002971
 8002920:	080028bd 	.word	0x080028bd
 8002924:	080028bd 	.word	0x080028bd
 8002928:	08002a39 	.word	0x08002a39
 800292c:	682b      	ldr	r3, [r5, #0]
 800292e:	1d1a      	adds	r2, r3, #4
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	602a      	str	r2, [r5, #0]
 8002934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800293c:	2301      	movs	r3, #1
 800293e:	e0a4      	b.n	8002a8a <_printf_i+0x1f6>
 8002940:	6820      	ldr	r0, [r4, #0]
 8002942:	6829      	ldr	r1, [r5, #0]
 8002944:	0606      	lsls	r6, r0, #24
 8002946:	f101 0304 	add.w	r3, r1, #4
 800294a:	d50a      	bpl.n	8002962 <_printf_i+0xce>
 800294c:	680e      	ldr	r6, [r1, #0]
 800294e:	602b      	str	r3, [r5, #0]
 8002950:	2e00      	cmp	r6, #0
 8002952:	da03      	bge.n	800295c <_printf_i+0xc8>
 8002954:	232d      	movs	r3, #45	; 0x2d
 8002956:	4276      	negs	r6, r6
 8002958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800295c:	230a      	movs	r3, #10
 800295e:	485e      	ldr	r0, [pc, #376]	; (8002ad8 <_printf_i+0x244>)
 8002960:	e019      	b.n	8002996 <_printf_i+0x102>
 8002962:	680e      	ldr	r6, [r1, #0]
 8002964:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002968:	602b      	str	r3, [r5, #0]
 800296a:	bf18      	it	ne
 800296c:	b236      	sxthne	r6, r6
 800296e:	e7ef      	b.n	8002950 <_printf_i+0xbc>
 8002970:	682b      	ldr	r3, [r5, #0]
 8002972:	6820      	ldr	r0, [r4, #0]
 8002974:	1d19      	adds	r1, r3, #4
 8002976:	6029      	str	r1, [r5, #0]
 8002978:	0601      	lsls	r1, r0, #24
 800297a:	d501      	bpl.n	8002980 <_printf_i+0xec>
 800297c:	681e      	ldr	r6, [r3, #0]
 800297e:	e002      	b.n	8002986 <_printf_i+0xf2>
 8002980:	0646      	lsls	r6, r0, #25
 8002982:	d5fb      	bpl.n	800297c <_printf_i+0xe8>
 8002984:	881e      	ldrh	r6, [r3, #0]
 8002986:	2f6f      	cmp	r7, #111	; 0x6f
 8002988:	bf0c      	ite	eq
 800298a:	2308      	moveq	r3, #8
 800298c:	230a      	movne	r3, #10
 800298e:	4852      	ldr	r0, [pc, #328]	; (8002ad8 <_printf_i+0x244>)
 8002990:	2100      	movs	r1, #0
 8002992:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002996:	6865      	ldr	r5, [r4, #4]
 8002998:	2d00      	cmp	r5, #0
 800299a:	bfa8      	it	ge
 800299c:	6821      	ldrge	r1, [r4, #0]
 800299e:	60a5      	str	r5, [r4, #8]
 80029a0:	bfa4      	itt	ge
 80029a2:	f021 0104 	bicge.w	r1, r1, #4
 80029a6:	6021      	strge	r1, [r4, #0]
 80029a8:	b90e      	cbnz	r6, 80029ae <_printf_i+0x11a>
 80029aa:	2d00      	cmp	r5, #0
 80029ac:	d04d      	beq.n	8002a4a <_printf_i+0x1b6>
 80029ae:	4615      	mov	r5, r2
 80029b0:	fbb6 f1f3 	udiv	r1, r6, r3
 80029b4:	fb03 6711 	mls	r7, r3, r1, r6
 80029b8:	5dc7      	ldrb	r7, [r0, r7]
 80029ba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80029be:	4637      	mov	r7, r6
 80029c0:	42bb      	cmp	r3, r7
 80029c2:	460e      	mov	r6, r1
 80029c4:	d9f4      	bls.n	80029b0 <_printf_i+0x11c>
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d10b      	bne.n	80029e2 <_printf_i+0x14e>
 80029ca:	6823      	ldr	r3, [r4, #0]
 80029cc:	07de      	lsls	r6, r3, #31
 80029ce:	d508      	bpl.n	80029e2 <_printf_i+0x14e>
 80029d0:	6923      	ldr	r3, [r4, #16]
 80029d2:	6861      	ldr	r1, [r4, #4]
 80029d4:	4299      	cmp	r1, r3
 80029d6:	bfde      	ittt	le
 80029d8:	2330      	movle	r3, #48	; 0x30
 80029da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029de:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80029e2:	1b52      	subs	r2, r2, r5
 80029e4:	6122      	str	r2, [r4, #16]
 80029e6:	464b      	mov	r3, r9
 80029e8:	4621      	mov	r1, r4
 80029ea:	4640      	mov	r0, r8
 80029ec:	f8cd a000 	str.w	sl, [sp]
 80029f0:	aa03      	add	r2, sp, #12
 80029f2:	f7ff fedf 	bl	80027b4 <_printf_common>
 80029f6:	3001      	adds	r0, #1
 80029f8:	d14c      	bne.n	8002a94 <_printf_i+0x200>
 80029fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029fe:	b004      	add	sp, #16
 8002a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a04:	4834      	ldr	r0, [pc, #208]	; (8002ad8 <_printf_i+0x244>)
 8002a06:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002a0a:	6829      	ldr	r1, [r5, #0]
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a12:	6029      	str	r1, [r5, #0]
 8002a14:	061d      	lsls	r5, r3, #24
 8002a16:	d514      	bpl.n	8002a42 <_printf_i+0x1ae>
 8002a18:	07df      	lsls	r7, r3, #31
 8002a1a:	bf44      	itt	mi
 8002a1c:	f043 0320 	orrmi.w	r3, r3, #32
 8002a20:	6023      	strmi	r3, [r4, #0]
 8002a22:	b91e      	cbnz	r6, 8002a2c <_printf_i+0x198>
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	f023 0320 	bic.w	r3, r3, #32
 8002a2a:	6023      	str	r3, [r4, #0]
 8002a2c:	2310      	movs	r3, #16
 8002a2e:	e7af      	b.n	8002990 <_printf_i+0xfc>
 8002a30:	6823      	ldr	r3, [r4, #0]
 8002a32:	f043 0320 	orr.w	r3, r3, #32
 8002a36:	6023      	str	r3, [r4, #0]
 8002a38:	2378      	movs	r3, #120	; 0x78
 8002a3a:	4828      	ldr	r0, [pc, #160]	; (8002adc <_printf_i+0x248>)
 8002a3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a40:	e7e3      	b.n	8002a0a <_printf_i+0x176>
 8002a42:	0659      	lsls	r1, r3, #25
 8002a44:	bf48      	it	mi
 8002a46:	b2b6      	uxthmi	r6, r6
 8002a48:	e7e6      	b.n	8002a18 <_printf_i+0x184>
 8002a4a:	4615      	mov	r5, r2
 8002a4c:	e7bb      	b.n	80029c6 <_printf_i+0x132>
 8002a4e:	682b      	ldr	r3, [r5, #0]
 8002a50:	6826      	ldr	r6, [r4, #0]
 8002a52:	1d18      	adds	r0, r3, #4
 8002a54:	6961      	ldr	r1, [r4, #20]
 8002a56:	6028      	str	r0, [r5, #0]
 8002a58:	0635      	lsls	r5, r6, #24
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	d501      	bpl.n	8002a62 <_printf_i+0x1ce>
 8002a5e:	6019      	str	r1, [r3, #0]
 8002a60:	e002      	b.n	8002a68 <_printf_i+0x1d4>
 8002a62:	0670      	lsls	r0, r6, #25
 8002a64:	d5fb      	bpl.n	8002a5e <_printf_i+0x1ca>
 8002a66:	8019      	strh	r1, [r3, #0]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	4615      	mov	r5, r2
 8002a6c:	6123      	str	r3, [r4, #16]
 8002a6e:	e7ba      	b.n	80029e6 <_printf_i+0x152>
 8002a70:	682b      	ldr	r3, [r5, #0]
 8002a72:	2100      	movs	r1, #0
 8002a74:	1d1a      	adds	r2, r3, #4
 8002a76:	602a      	str	r2, [r5, #0]
 8002a78:	681d      	ldr	r5, [r3, #0]
 8002a7a:	6862      	ldr	r2, [r4, #4]
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	f000 f82f 	bl	8002ae0 <memchr>
 8002a82:	b108      	cbz	r0, 8002a88 <_printf_i+0x1f4>
 8002a84:	1b40      	subs	r0, r0, r5
 8002a86:	6060      	str	r0, [r4, #4]
 8002a88:	6863      	ldr	r3, [r4, #4]
 8002a8a:	6123      	str	r3, [r4, #16]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a92:	e7a8      	b.n	80029e6 <_printf_i+0x152>
 8002a94:	462a      	mov	r2, r5
 8002a96:	4649      	mov	r1, r9
 8002a98:	4640      	mov	r0, r8
 8002a9a:	6923      	ldr	r3, [r4, #16]
 8002a9c:	47d0      	blx	sl
 8002a9e:	3001      	adds	r0, #1
 8002aa0:	d0ab      	beq.n	80029fa <_printf_i+0x166>
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	079b      	lsls	r3, r3, #30
 8002aa6:	d413      	bmi.n	8002ad0 <_printf_i+0x23c>
 8002aa8:	68e0      	ldr	r0, [r4, #12]
 8002aaa:	9b03      	ldr	r3, [sp, #12]
 8002aac:	4298      	cmp	r0, r3
 8002aae:	bfb8      	it	lt
 8002ab0:	4618      	movlt	r0, r3
 8002ab2:	e7a4      	b.n	80029fe <_printf_i+0x16a>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	4632      	mov	r2, r6
 8002ab8:	4649      	mov	r1, r9
 8002aba:	4640      	mov	r0, r8
 8002abc:	47d0      	blx	sl
 8002abe:	3001      	adds	r0, #1
 8002ac0:	d09b      	beq.n	80029fa <_printf_i+0x166>
 8002ac2:	3501      	adds	r5, #1
 8002ac4:	68e3      	ldr	r3, [r4, #12]
 8002ac6:	9903      	ldr	r1, [sp, #12]
 8002ac8:	1a5b      	subs	r3, r3, r1
 8002aca:	42ab      	cmp	r3, r5
 8002acc:	dcf2      	bgt.n	8002ab4 <_printf_i+0x220>
 8002ace:	e7eb      	b.n	8002aa8 <_printf_i+0x214>
 8002ad0:	2500      	movs	r5, #0
 8002ad2:	f104 0619 	add.w	r6, r4, #25
 8002ad6:	e7f5      	b.n	8002ac4 <_printf_i+0x230>
 8002ad8:	08002e15 	.word	0x08002e15
 8002adc:	08002e26 	.word	0x08002e26

08002ae0 <memchr>:
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	b510      	push	{r4, lr}
 8002ae4:	b2c9      	uxtb	r1, r1
 8002ae6:	4402      	add	r2, r0
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	d101      	bne.n	8002af2 <memchr+0x12>
 8002aee:	2000      	movs	r0, #0
 8002af0:	e003      	b.n	8002afa <memchr+0x1a>
 8002af2:	7804      	ldrb	r4, [r0, #0]
 8002af4:	3301      	adds	r3, #1
 8002af6:	428c      	cmp	r4, r1
 8002af8:	d1f6      	bne.n	8002ae8 <memchr+0x8>
 8002afa:	bd10      	pop	{r4, pc}

08002afc <memcpy>:
 8002afc:	440a      	add	r2, r1
 8002afe:	4291      	cmp	r1, r2
 8002b00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002b04:	d100      	bne.n	8002b08 <memcpy+0xc>
 8002b06:	4770      	bx	lr
 8002b08:	b510      	push	{r4, lr}
 8002b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b0e:	4291      	cmp	r1, r2
 8002b10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b14:	d1f9      	bne.n	8002b0a <memcpy+0xe>
 8002b16:	bd10      	pop	{r4, pc}

08002b18 <memmove>:
 8002b18:	4288      	cmp	r0, r1
 8002b1a:	b510      	push	{r4, lr}
 8002b1c:	eb01 0402 	add.w	r4, r1, r2
 8002b20:	d902      	bls.n	8002b28 <memmove+0x10>
 8002b22:	4284      	cmp	r4, r0
 8002b24:	4623      	mov	r3, r4
 8002b26:	d807      	bhi.n	8002b38 <memmove+0x20>
 8002b28:	1e43      	subs	r3, r0, #1
 8002b2a:	42a1      	cmp	r1, r4
 8002b2c:	d008      	beq.n	8002b40 <memmove+0x28>
 8002b2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b36:	e7f8      	b.n	8002b2a <memmove+0x12>
 8002b38:	4601      	mov	r1, r0
 8002b3a:	4402      	add	r2, r0
 8002b3c:	428a      	cmp	r2, r1
 8002b3e:	d100      	bne.n	8002b42 <memmove+0x2a>
 8002b40:	bd10      	pop	{r4, pc}
 8002b42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002b4a:	e7f7      	b.n	8002b3c <memmove+0x24>

08002b4c <_free_r>:
 8002b4c:	b538      	push	{r3, r4, r5, lr}
 8002b4e:	4605      	mov	r5, r0
 8002b50:	2900      	cmp	r1, #0
 8002b52:	d040      	beq.n	8002bd6 <_free_r+0x8a>
 8002b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b58:	1f0c      	subs	r4, r1, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bfb8      	it	lt
 8002b5e:	18e4      	addlt	r4, r4, r3
 8002b60:	f000 f910 	bl	8002d84 <__malloc_lock>
 8002b64:	4a1c      	ldr	r2, [pc, #112]	; (8002bd8 <_free_r+0x8c>)
 8002b66:	6813      	ldr	r3, [r2, #0]
 8002b68:	b933      	cbnz	r3, 8002b78 <_free_r+0x2c>
 8002b6a:	6063      	str	r3, [r4, #4]
 8002b6c:	6014      	str	r4, [r2, #0]
 8002b6e:	4628      	mov	r0, r5
 8002b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b74:	f000 b90c 	b.w	8002d90 <__malloc_unlock>
 8002b78:	42a3      	cmp	r3, r4
 8002b7a:	d908      	bls.n	8002b8e <_free_r+0x42>
 8002b7c:	6820      	ldr	r0, [r4, #0]
 8002b7e:	1821      	adds	r1, r4, r0
 8002b80:	428b      	cmp	r3, r1
 8002b82:	bf01      	itttt	eq
 8002b84:	6819      	ldreq	r1, [r3, #0]
 8002b86:	685b      	ldreq	r3, [r3, #4]
 8002b88:	1809      	addeq	r1, r1, r0
 8002b8a:	6021      	streq	r1, [r4, #0]
 8002b8c:	e7ed      	b.n	8002b6a <_free_r+0x1e>
 8002b8e:	461a      	mov	r2, r3
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	b10b      	cbz	r3, 8002b98 <_free_r+0x4c>
 8002b94:	42a3      	cmp	r3, r4
 8002b96:	d9fa      	bls.n	8002b8e <_free_r+0x42>
 8002b98:	6811      	ldr	r1, [r2, #0]
 8002b9a:	1850      	adds	r0, r2, r1
 8002b9c:	42a0      	cmp	r0, r4
 8002b9e:	d10b      	bne.n	8002bb8 <_free_r+0x6c>
 8002ba0:	6820      	ldr	r0, [r4, #0]
 8002ba2:	4401      	add	r1, r0
 8002ba4:	1850      	adds	r0, r2, r1
 8002ba6:	4283      	cmp	r3, r0
 8002ba8:	6011      	str	r1, [r2, #0]
 8002baa:	d1e0      	bne.n	8002b6e <_free_r+0x22>
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4401      	add	r1, r0
 8002bb2:	6011      	str	r1, [r2, #0]
 8002bb4:	6053      	str	r3, [r2, #4]
 8002bb6:	e7da      	b.n	8002b6e <_free_r+0x22>
 8002bb8:	d902      	bls.n	8002bc0 <_free_r+0x74>
 8002bba:	230c      	movs	r3, #12
 8002bbc:	602b      	str	r3, [r5, #0]
 8002bbe:	e7d6      	b.n	8002b6e <_free_r+0x22>
 8002bc0:	6820      	ldr	r0, [r4, #0]
 8002bc2:	1821      	adds	r1, r4, r0
 8002bc4:	428b      	cmp	r3, r1
 8002bc6:	bf01      	itttt	eq
 8002bc8:	6819      	ldreq	r1, [r3, #0]
 8002bca:	685b      	ldreq	r3, [r3, #4]
 8002bcc:	1809      	addeq	r1, r1, r0
 8002bce:	6021      	streq	r1, [r4, #0]
 8002bd0:	6063      	str	r3, [r4, #4]
 8002bd2:	6054      	str	r4, [r2, #4]
 8002bd4:	e7cb      	b.n	8002b6e <_free_r+0x22>
 8002bd6:	bd38      	pop	{r3, r4, r5, pc}
 8002bd8:	2000013c 	.word	0x2000013c

08002bdc <sbrk_aligned>:
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	4e0e      	ldr	r6, [pc, #56]	; (8002c18 <sbrk_aligned+0x3c>)
 8002be0:	460c      	mov	r4, r1
 8002be2:	6831      	ldr	r1, [r6, #0]
 8002be4:	4605      	mov	r5, r0
 8002be6:	b911      	cbnz	r1, 8002bee <sbrk_aligned+0x12>
 8002be8:	f000 f8bc 	bl	8002d64 <_sbrk_r>
 8002bec:	6030      	str	r0, [r6, #0]
 8002bee:	4621      	mov	r1, r4
 8002bf0:	4628      	mov	r0, r5
 8002bf2:	f000 f8b7 	bl	8002d64 <_sbrk_r>
 8002bf6:	1c43      	adds	r3, r0, #1
 8002bf8:	d00a      	beq.n	8002c10 <sbrk_aligned+0x34>
 8002bfa:	1cc4      	adds	r4, r0, #3
 8002bfc:	f024 0403 	bic.w	r4, r4, #3
 8002c00:	42a0      	cmp	r0, r4
 8002c02:	d007      	beq.n	8002c14 <sbrk_aligned+0x38>
 8002c04:	1a21      	subs	r1, r4, r0
 8002c06:	4628      	mov	r0, r5
 8002c08:	f000 f8ac 	bl	8002d64 <_sbrk_r>
 8002c0c:	3001      	adds	r0, #1
 8002c0e:	d101      	bne.n	8002c14 <sbrk_aligned+0x38>
 8002c10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002c14:	4620      	mov	r0, r4
 8002c16:	bd70      	pop	{r4, r5, r6, pc}
 8002c18:	20000140 	.word	0x20000140

08002c1c <_malloc_r>:
 8002c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c20:	1ccd      	adds	r5, r1, #3
 8002c22:	f025 0503 	bic.w	r5, r5, #3
 8002c26:	3508      	adds	r5, #8
 8002c28:	2d0c      	cmp	r5, #12
 8002c2a:	bf38      	it	cc
 8002c2c:	250c      	movcc	r5, #12
 8002c2e:	2d00      	cmp	r5, #0
 8002c30:	4607      	mov	r7, r0
 8002c32:	db01      	blt.n	8002c38 <_malloc_r+0x1c>
 8002c34:	42a9      	cmp	r1, r5
 8002c36:	d905      	bls.n	8002c44 <_malloc_r+0x28>
 8002c38:	230c      	movs	r3, #12
 8002c3a:	2600      	movs	r6, #0
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	4630      	mov	r0, r6
 8002c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c44:	4e2e      	ldr	r6, [pc, #184]	; (8002d00 <_malloc_r+0xe4>)
 8002c46:	f000 f89d 	bl	8002d84 <__malloc_lock>
 8002c4a:	6833      	ldr	r3, [r6, #0]
 8002c4c:	461c      	mov	r4, r3
 8002c4e:	bb34      	cbnz	r4, 8002c9e <_malloc_r+0x82>
 8002c50:	4629      	mov	r1, r5
 8002c52:	4638      	mov	r0, r7
 8002c54:	f7ff ffc2 	bl	8002bdc <sbrk_aligned>
 8002c58:	1c43      	adds	r3, r0, #1
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	d14d      	bne.n	8002cfa <_malloc_r+0xde>
 8002c5e:	6834      	ldr	r4, [r6, #0]
 8002c60:	4626      	mov	r6, r4
 8002c62:	2e00      	cmp	r6, #0
 8002c64:	d140      	bne.n	8002ce8 <_malloc_r+0xcc>
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	4631      	mov	r1, r6
 8002c6a:	4638      	mov	r0, r7
 8002c6c:	eb04 0803 	add.w	r8, r4, r3
 8002c70:	f000 f878 	bl	8002d64 <_sbrk_r>
 8002c74:	4580      	cmp	r8, r0
 8002c76:	d13a      	bne.n	8002cee <_malloc_r+0xd2>
 8002c78:	6821      	ldr	r1, [r4, #0]
 8002c7a:	3503      	adds	r5, #3
 8002c7c:	1a6d      	subs	r5, r5, r1
 8002c7e:	f025 0503 	bic.w	r5, r5, #3
 8002c82:	3508      	adds	r5, #8
 8002c84:	2d0c      	cmp	r5, #12
 8002c86:	bf38      	it	cc
 8002c88:	250c      	movcc	r5, #12
 8002c8a:	4638      	mov	r0, r7
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	f7ff ffa5 	bl	8002bdc <sbrk_aligned>
 8002c92:	3001      	adds	r0, #1
 8002c94:	d02b      	beq.n	8002cee <_malloc_r+0xd2>
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	442b      	add	r3, r5
 8002c9a:	6023      	str	r3, [r4, #0]
 8002c9c:	e00e      	b.n	8002cbc <_malloc_r+0xa0>
 8002c9e:	6822      	ldr	r2, [r4, #0]
 8002ca0:	1b52      	subs	r2, r2, r5
 8002ca2:	d41e      	bmi.n	8002ce2 <_malloc_r+0xc6>
 8002ca4:	2a0b      	cmp	r2, #11
 8002ca6:	d916      	bls.n	8002cd6 <_malloc_r+0xba>
 8002ca8:	1961      	adds	r1, r4, r5
 8002caa:	42a3      	cmp	r3, r4
 8002cac:	6025      	str	r5, [r4, #0]
 8002cae:	bf18      	it	ne
 8002cb0:	6059      	strne	r1, [r3, #4]
 8002cb2:	6863      	ldr	r3, [r4, #4]
 8002cb4:	bf08      	it	eq
 8002cb6:	6031      	streq	r1, [r6, #0]
 8002cb8:	5162      	str	r2, [r4, r5]
 8002cba:	604b      	str	r3, [r1, #4]
 8002cbc:	4638      	mov	r0, r7
 8002cbe:	f104 060b 	add.w	r6, r4, #11
 8002cc2:	f000 f865 	bl	8002d90 <__malloc_unlock>
 8002cc6:	f026 0607 	bic.w	r6, r6, #7
 8002cca:	1d23      	adds	r3, r4, #4
 8002ccc:	1af2      	subs	r2, r6, r3
 8002cce:	d0b6      	beq.n	8002c3e <_malloc_r+0x22>
 8002cd0:	1b9b      	subs	r3, r3, r6
 8002cd2:	50a3      	str	r3, [r4, r2]
 8002cd4:	e7b3      	b.n	8002c3e <_malloc_r+0x22>
 8002cd6:	6862      	ldr	r2, [r4, #4]
 8002cd8:	42a3      	cmp	r3, r4
 8002cda:	bf0c      	ite	eq
 8002cdc:	6032      	streq	r2, [r6, #0]
 8002cde:	605a      	strne	r2, [r3, #4]
 8002ce0:	e7ec      	b.n	8002cbc <_malloc_r+0xa0>
 8002ce2:	4623      	mov	r3, r4
 8002ce4:	6864      	ldr	r4, [r4, #4]
 8002ce6:	e7b2      	b.n	8002c4e <_malloc_r+0x32>
 8002ce8:	4634      	mov	r4, r6
 8002cea:	6876      	ldr	r6, [r6, #4]
 8002cec:	e7b9      	b.n	8002c62 <_malloc_r+0x46>
 8002cee:	230c      	movs	r3, #12
 8002cf0:	4638      	mov	r0, r7
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	f000 f84c 	bl	8002d90 <__malloc_unlock>
 8002cf8:	e7a1      	b.n	8002c3e <_malloc_r+0x22>
 8002cfa:	6025      	str	r5, [r4, #0]
 8002cfc:	e7de      	b.n	8002cbc <_malloc_r+0xa0>
 8002cfe:	bf00      	nop
 8002d00:	2000013c 	.word	0x2000013c

08002d04 <_realloc_r>:
 8002d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d08:	4680      	mov	r8, r0
 8002d0a:	4614      	mov	r4, r2
 8002d0c:	460e      	mov	r6, r1
 8002d0e:	b921      	cbnz	r1, 8002d1a <_realloc_r+0x16>
 8002d10:	4611      	mov	r1, r2
 8002d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d16:	f7ff bf81 	b.w	8002c1c <_malloc_r>
 8002d1a:	b92a      	cbnz	r2, 8002d28 <_realloc_r+0x24>
 8002d1c:	f7ff ff16 	bl	8002b4c <_free_r>
 8002d20:	4625      	mov	r5, r4
 8002d22:	4628      	mov	r0, r5
 8002d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d28:	f000 f838 	bl	8002d9c <_malloc_usable_size_r>
 8002d2c:	4284      	cmp	r4, r0
 8002d2e:	4607      	mov	r7, r0
 8002d30:	d802      	bhi.n	8002d38 <_realloc_r+0x34>
 8002d32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002d36:	d812      	bhi.n	8002d5e <_realloc_r+0x5a>
 8002d38:	4621      	mov	r1, r4
 8002d3a:	4640      	mov	r0, r8
 8002d3c:	f7ff ff6e 	bl	8002c1c <_malloc_r>
 8002d40:	4605      	mov	r5, r0
 8002d42:	2800      	cmp	r0, #0
 8002d44:	d0ed      	beq.n	8002d22 <_realloc_r+0x1e>
 8002d46:	42bc      	cmp	r4, r7
 8002d48:	4622      	mov	r2, r4
 8002d4a:	4631      	mov	r1, r6
 8002d4c:	bf28      	it	cs
 8002d4e:	463a      	movcs	r2, r7
 8002d50:	f7ff fed4 	bl	8002afc <memcpy>
 8002d54:	4631      	mov	r1, r6
 8002d56:	4640      	mov	r0, r8
 8002d58:	f7ff fef8 	bl	8002b4c <_free_r>
 8002d5c:	e7e1      	b.n	8002d22 <_realloc_r+0x1e>
 8002d5e:	4635      	mov	r5, r6
 8002d60:	e7df      	b.n	8002d22 <_realloc_r+0x1e>
	...

08002d64 <_sbrk_r>:
 8002d64:	b538      	push	{r3, r4, r5, lr}
 8002d66:	2300      	movs	r3, #0
 8002d68:	4d05      	ldr	r5, [pc, #20]	; (8002d80 <_sbrk_r+0x1c>)
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	602b      	str	r3, [r5, #0]
 8002d70:	f7fd fcbe 	bl	80006f0 <_sbrk>
 8002d74:	1c43      	adds	r3, r0, #1
 8002d76:	d102      	bne.n	8002d7e <_sbrk_r+0x1a>
 8002d78:	682b      	ldr	r3, [r5, #0]
 8002d7a:	b103      	cbz	r3, 8002d7e <_sbrk_r+0x1a>
 8002d7c:	6023      	str	r3, [r4, #0]
 8002d7e:	bd38      	pop	{r3, r4, r5, pc}
 8002d80:	20000144 	.word	0x20000144

08002d84 <__malloc_lock>:
 8002d84:	4801      	ldr	r0, [pc, #4]	; (8002d8c <__malloc_lock+0x8>)
 8002d86:	f000 b811 	b.w	8002dac <__retarget_lock_acquire_recursive>
 8002d8a:	bf00      	nop
 8002d8c:	20000148 	.word	0x20000148

08002d90 <__malloc_unlock>:
 8002d90:	4801      	ldr	r0, [pc, #4]	; (8002d98 <__malloc_unlock+0x8>)
 8002d92:	f000 b80c 	b.w	8002dae <__retarget_lock_release_recursive>
 8002d96:	bf00      	nop
 8002d98:	20000148 	.word	0x20000148

08002d9c <_malloc_usable_size_r>:
 8002d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002da0:	1f18      	subs	r0, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	bfbc      	itt	lt
 8002da6:	580b      	ldrlt	r3, [r1, r0]
 8002da8:	18c0      	addlt	r0, r0, r3
 8002daa:	4770      	bx	lr

08002dac <__retarget_lock_acquire_recursive>:
 8002dac:	4770      	bx	lr

08002dae <__retarget_lock_release_recursive>:
 8002dae:	4770      	bx	lr

08002db0 <_init>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	bf00      	nop
 8002db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db6:	bc08      	pop	{r3}
 8002db8:	469e      	mov	lr, r3
 8002dba:	4770      	bx	lr

08002dbc <_fini>:
 8002dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dbe:	bf00      	nop
 8002dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc2:	bc08      	pop	{r3}
 8002dc4:	469e      	mov	lr, r3
 8002dc6:	4770      	bx	lr
